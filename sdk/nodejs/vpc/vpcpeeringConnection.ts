// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an VPC Peering Connection for establishing a connection between multiple VPC.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ucloud from "@pulumi/ucloud";
 *
 * const foo = new ucloud.vpc.VPC("foo", {
 *     tag: "tf-example",
 *     cidrBlocks: ["192.168.0.0/16"],
 * });
 * const bar = new ucloud.vpc.VPC("bar", {
 *     tag: "tf-example",
 *     cidrBlocks: ["10.10.0.0/16"],
 * });
 * const connection = new ucloud.vpc.VPCPeeringConnection("connection", {
 *     vpcId: foo.id,
 *     peerVpcId: bar.id,
 * });
 * ```
 */
export class VPCPeeringConnection extends pulumi.CustomResource {
    /**
     * Get an existing VPCPeeringConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VPCPeeringConnectionState, opts?: pulumi.CustomResourceOptions): VPCPeeringConnection {
        return new VPCPeeringConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:vpc/vPCPeeringConnection:VPCPeeringConnection';

    /**
     * Returns true if the given object is an instance of VPCPeeringConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VPCPeeringConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VPCPeeringConnection.__pulumiType;
    }

    /**
     * The ID of accepter project of the specific VPC Peering Connection to retrieve.
     */
    public readonly peerProjectId!: pulumi.Output<string>;
    /**
     * The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.
     */
    public readonly peerVpcId!: pulumi.Output<string>;
    /**
     * The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a VPCPeeringConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VPCPeeringConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VPCPeeringConnectionArgs | VPCPeeringConnectionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VPCPeeringConnectionState | undefined;
            inputs["peerProjectId"] = state ? state.peerProjectId : undefined;
            inputs["peerVpcId"] = state ? state.peerVpcId : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VPCPeeringConnectionArgs | undefined;
            if ((!args || args.peerVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerVpcId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            inputs["peerProjectId"] = args ? args.peerProjectId : undefined;
            inputs["peerVpcId"] = args ? args.peerVpcId : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(VPCPeeringConnection.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VPCPeeringConnection resources.
 */
export interface VPCPeeringConnectionState {
    /**
     * The ID of accepter project of the specific VPC Peering Connection to retrieve.
     */
    peerProjectId?: pulumi.Input<string>;
    /**
     * The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.
     */
    peerVpcId?: pulumi.Input<string>;
    /**
     * The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VPCPeeringConnection resource.
 */
export interface VPCPeeringConnectionArgs {
    /**
     * The ID of accepter project of the specific VPC Peering Connection to retrieve.
     */
    peerProjectId?: pulumi.Input<string>;
    /**
     * The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.
     */
    peerVpcId: pulumi.Input<string>;
    /**
     * The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.
     */
    vpcId: pulumi.Input<string>;
}
