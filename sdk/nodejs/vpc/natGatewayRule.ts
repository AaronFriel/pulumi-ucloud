// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class NatGatewayRule extends pulumi.CustomResource {
    /**
     * Get an existing NatGatewayRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatGatewayRuleState, opts?: pulumi.CustomResourceOptions): NatGatewayRule {
        return new NatGatewayRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:vpc/natGatewayRule:NatGatewayRule';

    /**
     * Returns true if the given object is an instance of NatGatewayRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatGatewayRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatGatewayRule.__pulumiType;
    }

    public readonly dstIp!: pulumi.Output<string>;
    public readonly dstPortRange!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly natGatewayId!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly srcEipId!: pulumi.Output<string>;
    public readonly srcPortRange!: pulumi.Output<string>;

    /**
     * Create a NatGatewayRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatGatewayRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatGatewayRuleArgs | NatGatewayRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as NatGatewayRuleState | undefined;
            inputs["dstIp"] = state ? state.dstIp : undefined;
            inputs["dstPortRange"] = state ? state.dstPortRange : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["natGatewayId"] = state ? state.natGatewayId : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["srcEipId"] = state ? state.srcEipId : undefined;
            inputs["srcPortRange"] = state ? state.srcPortRange : undefined;
        } else {
            const args = argsOrState as NatGatewayRuleArgs | undefined;
            if (!args || args.dstIp === undefined) {
                throw new Error("Missing required property 'dstIp'");
            }
            if (!args || args.dstPortRange === undefined) {
                throw new Error("Missing required property 'dstPortRange'");
            }
            if (!args || args.natGatewayId === undefined) {
                throw new Error("Missing required property 'natGatewayId'");
            }
            if (!args || args.protocol === undefined) {
                throw new Error("Missing required property 'protocol'");
            }
            if (!args || args.srcEipId === undefined) {
                throw new Error("Missing required property 'srcEipId'");
            }
            if (!args || args.srcPortRange === undefined) {
                throw new Error("Missing required property 'srcPortRange'");
            }
            inputs["dstIp"] = args ? args.dstIp : undefined;
            inputs["dstPortRange"] = args ? args.dstPortRange : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["natGatewayId"] = args ? args.natGatewayId : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["srcEipId"] = args ? args.srcEipId : undefined;
            inputs["srcPortRange"] = args ? args.srcPortRange : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(NatGatewayRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NatGatewayRule resources.
 */
export interface NatGatewayRuleState {
    readonly dstIp?: pulumi.Input<string>;
    readonly dstPortRange?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly natGatewayId?: pulumi.Input<string>;
    readonly protocol?: pulumi.Input<string>;
    readonly srcEipId?: pulumi.Input<string>;
    readonly srcPortRange?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NatGatewayRule resource.
 */
export interface NatGatewayRuleArgs {
    readonly dstIp: pulumi.Input<string>;
    readonly dstPortRange: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly natGatewayId: pulumi.Input<string>;
    readonly protocol: pulumi.Input<string>;
    readonly srcEipId: pulumi.Input<string>;
    readonly srcPortRange: pulumi.Input<string>;
}
