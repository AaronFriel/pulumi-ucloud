// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Load Balancer Rule resource to add content forwarding policies for Load Balancer backend resource.
 *
 * > **Note** The Load Balancer Rule can only be define while the `protocol` of lb listener is one of HTTP and HTTPS. In addition, should set one of `domain` and `path` if defined.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ucloud from "@pulumi/ucloud";
 *
 * const defaultImage = ucloud.uhost.getImage({
 *     availabilityZone: "cn-bj2-02",
 *     nameRegex: "^CentOS 6.5 64",
 *     imageType: "base",
 * });
 * const webLB = new ucloud.ulb.LB("webLB", {tag: "tf-example"});
 * const defaultLBListener = new ucloud.ulb.LBListener("defaultLBListener", {
 *     loadBalancerId: webLB.id,
 *     protocol: "http",
 * });
 * const webInstance = new ucloud.uhost.Instance("webInstance", {
 *     instanceType: "n-basic-2",
 *     availabilityZone: "cn-bj2-02",
 *     rootPassword: "wA1234567",
 *     imageId: defaultImage.then(defaultImage => defaultImage.images[0].id),
 *     tag: "tf-example",
 * });
 * const defaultLBAttachment = new ucloud.ulb.LBAttachment("defaultLBAttachment", {
 *     loadBalancerId: webLB.id,
 *     listenerId: defaultLBListener.id,
 *     resourceType: "instance",
 *     resourceId: webInstance.id,
 *     port: 80,
 * });
 * const example = new ucloud.ulb.LBRule("example", {
 *     loadBalancerId: webLB.id,
 *     listenerId: defaultLBListener.id,
 *     backendIds: [defaultLBAttachment].map(__item => __item.id),
 *     domain: "www.ucloud.cn",
 * });
 * ```
 *
 * ## Import
 *
 * LB Listener can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import ucloud:ulb/lBRule:LBRule example rule-abcdefg
 * ```
 */
export class LBRule extends pulumi.CustomResource {
    /**
     * Get an existing LBRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LBRuleState, opts?: pulumi.CustomResourceOptions): LBRule {
        return new LBRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:ulb/lBRule:LBRule';

    /**
     * Returns true if the given object is an instance of LBRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LBRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LBRule.__pulumiType;
    }

    /**
     * The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
     */
    public readonly backendIds!: pulumi.Output<string[]>;
    /**
     * The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    /**
     * The ID of a listener server.
     */
    public readonly listenerId!: pulumi.Output<string>;
    /**
     * The ID of a load balancer.
     */
    public readonly loadBalancerId!: pulumi.Output<string>;
    /**
     * The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
     */
    public readonly path!: pulumi.Output<string | undefined>;

    /**
     * Create a LBRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LBRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LBRuleArgs | LBRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LBRuleState | undefined;
            inputs["backendIds"] = state ? state.backendIds : undefined;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["listenerId"] = state ? state.listenerId : undefined;
            inputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            inputs["path"] = state ? state.path : undefined;
        } else {
            const args = argsOrState as LBRuleArgs | undefined;
            if ((!args || args.backendIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendIds'");
            }
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            inputs["backendIds"] = args ? args.backendIds : undefined;
            inputs["domain"] = args ? args.domain : undefined;
            inputs["listenerId"] = args ? args.listenerId : undefined;
            inputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            inputs["path"] = args ? args.path : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LBRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LBRule resources.
 */
export interface LBRuleState {
    /**
     * The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
     */
    backendIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
     */
    domain?: pulumi.Input<string>;
    /**
     * The ID of a listener server.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * The ID of a load balancer.
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
     */
    path?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LBRule resource.
 */
export interface LBRuleArgs {
    /**
     * The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
     */
    backendIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
     */
    domain?: pulumi.Input<string>;
    /**
     * The ID of a listener server.
     */
    listenerId: pulumi.Input<string>;
    /**
     * The ID of a load balancer.
     */
    loadBalancerId: pulumi.Input<string>;
    /**
     * The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
     */
    path?: pulumi.Input<string>;
}
