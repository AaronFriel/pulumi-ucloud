// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Load Balancer Attachment resource for attaching Load Balancer to UHost Instance, etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ucloud from "@pulumi/ucloud";
 *
 * const defaultImage = ucloud.uhost.getImage({
 *     availabilityZone: "cn-bj2-04",
 *     nameRegex: "^CentOS 6.5 64",
 *     imageType: "base",
 * });
 * // Create Load Balancer
 * const webLB = new ucloud.ulb.LB("webLB", {tag: "tf-example"});
 * // Create Load Balancer Listener with http protocol
 * const defaultLBListener = new ucloud.ulb.LBListener("defaultLBListener", {
 *     loadBalancerId: webLB.id,
 *     protocol: "http",
 * });
 * // Create web server
 * const webInstance = new ucloud.uhost.Instance("webInstance", {
 *     instanceType: "n-basic-2",
 *     availabilityZone: "cn-bj2-04",
 *     rootPassword: "wA1234567",
 *     imageId: defaultImage.then(defaultImage => defaultImage.images[0].id),
 *     tag: "tf-example",
 * });
 * // Attach instances to Load Balancer
 * const example = new ucloud.ulb.LBAttachment("example", {
 *     loadBalancerId: webLB.id,
 *     listenerId: defaultLBListener.id,
 *     resourceId: webInstance.id,
 *     port: 80,
 * });
 * ```
 *
 * ## Import
 *
 * LB Listener can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import ucloud:ulb/lBAttachment:LBAttachment example backend-abcdefg
 * ```
 */
export class LBAttachment extends pulumi.CustomResource {
    /**
     * Get an existing LBAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LBAttachmentState, opts?: pulumi.CustomResourceOptions): LBAttachment {
        return new LBAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:ulb/lBAttachment:LBAttachment';

    /**
     * Returns true if the given object is an instance of LBAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LBAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LBAttachment.__pulumiType;
    }

    /**
     * The ID of a listener server.
     */
    public readonly listenerId!: pulumi.Output<string>;
    /**
     * The ID of a load balancer.
     */
    public readonly loadBalancerId!: pulumi.Output<string>;
    /**
     * The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `requestProxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packetsTransmit`, the port of the backend server must be consistent with the LB listening port.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * The private ip address for backend servers.
     */
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    /**
     * The ID of a backend server.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * , attribute `resourceType` is deprecated for optimizing parameters.
     *
     * @deprecated attribute `resource_type` is deprecated for optimizing parameters
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a LBAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LBAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LBAttachmentArgs | LBAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LBAttachmentState | undefined;
            inputs["listenerId"] = state ? state.listenerId : undefined;
            inputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["privateIp"] = state ? state.privateIp : undefined;
            inputs["resourceId"] = state ? state.resourceId : undefined;
            inputs["resourceType"] = state ? state.resourceType : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as LBAttachmentArgs | undefined;
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            inputs["listenerId"] = args ? args.listenerId : undefined;
            inputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["resourceId"] = args ? args.resourceId : undefined;
            inputs["resourceType"] = args ? args.resourceType : undefined;
            inputs["privateIp"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LBAttachment.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LBAttachment resources.
 */
export interface LBAttachmentState {
    /**
     * The ID of a listener server.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * The ID of a load balancer.
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `requestProxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packetsTransmit`, the port of the backend server must be consistent with the LB listening port.
     */
    port?: pulumi.Input<number>;
    /**
     * The private ip address for backend servers.
     */
    privateIp?: pulumi.Input<string>;
    /**
     * The ID of a backend server.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * , attribute `resourceType` is deprecated for optimizing parameters.
     *
     * @deprecated attribute `resource_type` is deprecated for optimizing parameters
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LBAttachment resource.
 */
export interface LBAttachmentArgs {
    /**
     * The ID of a listener server.
     */
    listenerId: pulumi.Input<string>;
    /**
     * The ID of a load balancer.
     */
    loadBalancerId: pulumi.Input<string>;
    /**
     * The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `requestProxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packetsTransmit`, the port of the backend server must be consistent with the LB listening port.
     */
    port?: pulumi.Input<number>;
    /**
     * The ID of a backend server.
     */
    resourceId: pulumi.Input<string>;
    /**
     * , attribute `resourceType` is deprecated for optimizing parameters.
     *
     * @deprecated attribute `resource_type` is deprecated for optimizing parameters
     */
    resourceType?: pulumi.Input<string>;
}
