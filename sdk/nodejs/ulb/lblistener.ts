// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Load Balancer Listener resource.
 *
 * > **Note** This `listenType` only support when `protocol` is `tcp` in the extranet mode and the default value is `requestProxy`. In addition, in the extranet mode, the `listenType` is `requestProxy` if `protocol`is `http` or `https`, the `listenType` is `packetsTransmit` if `protocol`is `udp`. In the intranet mode, the `listenType` is `packetsTransmit`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ucloud from "@pulumi/ucloud";
 *
 * const web = new ucloud.ulb.LB("web", {tag: "tf-example"});
 * const example = new ucloud.ulb.LBListener("example", {
 *     loadBalancerId: web.id,
 *     protocol: "http",
 * });
 * ```
 *
 * ## Import
 *
 * LB Listener can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import ucloud:ulb/lBListener:LBListener example vserver-abcdefg
 * ```
 */
export class LBListener extends pulumi.CustomResource {
    /**
     * Get an existing LBListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LBListenerState, opts?: pulumi.CustomResourceOptions): LBListener {
        return new LBListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:ulb/lBListener:LBListener';

    /**
     * Returns true if the given object is an instance of LBListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LBListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LBListener.__pulumiType;
    }

    /**
     * Health check domain checking.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Health check method. Possible values are `port` as port checking and `path` as http checking.
     */
    public readonly healthCheckType!: pulumi.Output<string>;
    /**
     * Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listenType` is `requestProxy`, range: 60-900 when `listenType` is `packetsTransmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.
     */
    public readonly idleTimeout!: pulumi.Output<number>;
    /**
     * The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).
     */
    public readonly listenType!: pulumi.Output<string>;
    /**
     * The ID of load balancer instance.
     */
    public readonly loadBalancerId!: pulumi.Output<string>;
    /**
     * The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
     * - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
     * - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
     */
    public readonly method!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Health check path checking.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
     */
    public readonly persistence!: pulumi.Output<string>;
    /**
     * The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
     */
    public readonly persistenceType!: pulumi.Output<string | undefined>;
    /**
     * Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a LBListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LBListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LBListenerArgs | LBListenerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LBListenerState | undefined;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            inputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            inputs["listenType"] = state ? state.listenType : undefined;
            inputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            inputs["method"] = state ? state.method : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["persistence"] = state ? state.persistence : undefined;
            inputs["persistenceType"] = state ? state.persistenceType : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as LBListenerArgs | undefined;
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            inputs["domain"] = args ? args.domain : undefined;
            inputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            inputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            inputs["listenType"] = args ? args.listenType : undefined;
            inputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            inputs["method"] = args ? args.method : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["persistence"] = args ? args.persistence : undefined;
            inputs["persistenceType"] = args ? args.persistenceType : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LBListener.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LBListener resources.
 */
export interface LBListenerState {
    /**
     * Health check domain checking.
     */
    domain?: pulumi.Input<string>;
    /**
     * Health check method. Possible values are `port` as port checking and `path` as http checking.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listenType` is `requestProxy`, range: 60-900 when `listenType` is `packetsTransmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).
     */
    listenType?: pulumi.Input<string>;
    /**
     * The ID of load balancer instance.
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
     * - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
     * - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
     */
    method?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Health check path checking.
     */
    path?: pulumi.Input<string>;
    /**
     * Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
     */
    persistence?: pulumi.Input<string>;
    /**
     * The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
     */
    persistenceType?: pulumi.Input<string>;
    /**
     * Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
     */
    port?: pulumi.Input<number>;
    /**
     * Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LBListener resource.
 */
export interface LBListenerArgs {
    /**
     * Health check domain checking.
     */
    domain?: pulumi.Input<string>;
    /**
     * Health check method. Possible values are `port` as port checking and `path` as http checking.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listenType` is `requestProxy`, range: 60-900 when `listenType` is `packetsTransmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).
     */
    listenType?: pulumi.Input<string>;
    /**
     * The ID of load balancer instance.
     */
    loadBalancerId: pulumi.Input<string>;
    /**
     * The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
     * - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
     * - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
     */
    method?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Health check path checking.
     */
    path?: pulumi.Input<string>;
    /**
     * Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
     */
    persistence?: pulumi.Input<string>;
    /**
     * The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
     */
    persistenceType?: pulumi.Input<string>;
    /**
     * Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
     */
    port?: pulumi.Input<number>;
    /**
     * Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
     */
    protocol: pulumi.Input<string>;
}
