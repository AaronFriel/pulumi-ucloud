// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Load Balancer SSL certificate resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ucloud from "@pulumi/ucloud";
 * import * from "fs";
 *
 * const _default = new ucloud.ulb.LBSsl("default", {
 *     privateKey: fs.readFileSync("private.key"),
 *     userCert: fs.readFileSync("user.crt"),
 *     caCert: fs.readFileSync("ca.crt"),
 * });
 * ```
 */
export class LBSsl extends pulumi.CustomResource {
    /**
     * Get an existing LBSsl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LBSslState, opts?: pulumi.CustomResourceOptions): LBSsl {
        return new LBSsl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:ulb/lBSsl:LBSsl';

    /**
     * Returns true if the given object is an instance of LBSsl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LBSsl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LBSsl.__pulumiType;
    }

    /**
     * The content of the CA certificate about ssl certificate.
     */
    public readonly caCert!: pulumi.Output<string | undefined>;
    /**
     * The time of creation for lb ssl, formatted in RFC3339 time string.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The content of the private key about ssl certificate.
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * The content of the user certificate about ssl certificate.
     */
    public readonly userCert!: pulumi.Output<string>;

    /**
     * Create a LBSsl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LBSslArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LBSslArgs | LBSslState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LBSslState | undefined;
            inputs["caCert"] = state ? state.caCert : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["privateKey"] = state ? state.privateKey : undefined;
            inputs["userCert"] = state ? state.userCert : undefined;
        } else {
            const args = argsOrState as LBSslArgs | undefined;
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            if ((!args || args.userCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userCert'");
            }
            inputs["caCert"] = args ? args.caCert : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["privateKey"] = args ? args.privateKey : undefined;
            inputs["userCert"] = args ? args.userCert : undefined;
            inputs["createTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LBSsl.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LBSsl resources.
 */
export interface LBSslState {
    /**
     * The content of the CA certificate about ssl certificate.
     */
    caCert?: pulumi.Input<string>;
    /**
     * The time of creation for lb ssl, formatted in RFC3339 time string.
     */
    createTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The content of the private key about ssl certificate.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The content of the user certificate about ssl certificate.
     */
    userCert?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LBSsl resource.
 */
export interface LBSslArgs {
    /**
     * The content of the CA certificate about ssl certificate.
     */
    caCert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The content of the private key about ssl certificate.
     */
    privateKey: pulumi.Input<string>;
    /**
     * The content of the user certificate about ssl certificate.
     */
    userCert: pulumi.Input<string>;
}
