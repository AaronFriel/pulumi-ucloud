// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source providers a list of available image resources according to their availability zone, image ID and other fields.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ucloud from "@pulumi/ucloud";
 *
 * const example = ucloud.uhost.getImage({
 *     availabilityZone: "cn-bj2-02",
 *     imageType: "base",
 *     nameRegex: "^CentOS 7.[1-2] 64",
 *     mostRecent: true,
 * });
 * export const first = example.then(example => example.images[0].id);
 * ```
 */
export function getImage(args?: GetImageArgs, opts?: pulumi.InvokeOptions): Promise<GetImageResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("ucloud:uhost/getImage:getImage", {
        "availabilityZone": args.availabilityZone,
        "ids": args.ids,
        "imageId": args.imageId,
        "imageType": args.imageType,
        "mostRecent": args.mostRecent,
        "nameRegex": args.nameRegex,
        "osType": args.osType,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageArgs {
    /**
     * Availability zone where images are located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
     */
    availabilityZone?: string;
    /**
     * A list of image IDs, all the images belong to this region will be retrieved if the ID is `[]`. 
     * > **Note** this argument conflicts with `imageId`.
     */
    ids?: string[];
    /**
     * The ID of image.
     * > **Note** this argument conflicts with `ids`.
     */
    imageId?: string;
    /**
     * The type of image. Possible values are: `base` as standard image, `business` as owned by market place, and `custom` as custom-image, all the image types will be retrieved by default.
     */
    imageType?: string;
    /**
     * If more than one result is returned, use the most recent image.
     */
    mostRecent?: boolean;
    /**
     * A regex string to filter resulting images by name. (Such as: `^CentOS 7.[1-2] 64` means CentOS 7.1 of 64-bit operating system or CentOS 7.2 of 64-bit operating system, "^Ubuntu 16.04 64" means Ubuntu 16.04 of 64-bit operating system).
     */
    nameRegex?: string;
    /**
     * The type of OS. Possible values are: `linux` and `windows`, all the OS types will be retrieved by default.
     */
    osType?: string;
    outputFile?: string;
}

/**
 * A collection of values returned by getImage.
 */
export interface GetImageResult {
    /**
     * Availability zone where image is located.
     */
    readonly availabilityZone?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly imageId?: string;
    readonly imageType?: string;
    /**
     * It is a nested type which documented below.
     */
    readonly images: outputs.uhost.GetImageImage[];
    readonly mostRecent?: boolean;
    readonly nameRegex?: string;
    /**
     * The type of OS.
     */
    readonly osType?: string;
    readonly outputFile?: string;
    /**
     * Total number of images that satisfy the condition.
     */
    readonly totalCount: number;
}
