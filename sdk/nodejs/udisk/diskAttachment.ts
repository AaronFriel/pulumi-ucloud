// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Cloud Disk Attachment resource for attaching Cloud Disk to UHost Instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ucloud from "@pulumi/ucloud";
 *
 * const defaultZone = ucloud.uaccount.getZone({});
 * const defaultImage = defaultZone.then(defaultZone => ucloud.uhost.getImage({
 *     availabilityZone: defaultZone.zones[0].id,
 *     nameRegex: "^CentOS 7.[1-2] 64",
 *     imageType: "base",
 * }));
 * // Create cloud disk
 * const defaultDisk = new ucloud.udisk.Disk("defaultDisk", {
 *     availabilityZone: defaultZone.then(defaultZone => defaultZone.zones[0].id),
 *     diskSize: 10,
 * });
 * // Create a web server
 * const web = new ucloud.uhost.Instance("web", {
 *     availabilityZone: defaultZone.then(defaultZone => defaultZone.zones[0].id),
 *     instanceType: "n-basic-2",
 *     imageId: defaultImage.then(defaultImage => defaultImage.images[0].id),
 *     rootPassword: "wA1234567",
 *     tag: "tf-example",
 * });
 * // attach cloud disk to instance
 * const defaultDiskAttachment = new ucloud.udisk.DiskAttachment("defaultDiskAttachment", {
 *     availabilityZone: defaultZone.then(defaultZone => defaultZone.zones[0].id),
 *     diskId: defaultDisk.id,
 *     instanceId: web.id,
 * });
 * ```
 */
export class DiskAttachment extends pulumi.CustomResource {
    /**
     * Get an existing DiskAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiskAttachmentState, opts?: pulumi.CustomResourceOptions): DiskAttachment {
        return new DiskAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:udisk/diskAttachment:DiskAttachment';

    /**
     * Returns true if the given object is an instance of DiskAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiskAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiskAttachment.__pulumiType;
    }

    /**
     * The Zone to attach the disk in.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * The ID of disk that needs to be attached
     */
    public readonly diskId!: pulumi.Output<string>;
    /**
     * The ID of instance.
     */
    public readonly instanceId!: pulumi.Output<string>;

    /**
     * Create a DiskAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiskAttachmentArgs | DiskAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiskAttachmentState | undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["diskId"] = state ? state.diskId : undefined;
            inputs["instanceId"] = state ? state.instanceId : undefined;
        } else {
            const args = argsOrState as DiskAttachmentArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.diskId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskId'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["diskId"] = args ? args.diskId : undefined;
            inputs["instanceId"] = args ? args.instanceId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(DiskAttachment.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DiskAttachment resources.
 */
export interface DiskAttachmentState {
    /**
     * The Zone to attach the disk in.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The ID of disk that needs to be attached
     */
    diskId?: pulumi.Input<string>;
    /**
     * The ID of instance.
     */
    instanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DiskAttachment resource.
 */
export interface DiskAttachmentArgs {
    /**
     * The Zone to attach the disk in.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * The ID of disk that needs to be attached
     */
    diskId: pulumi.Input<string>;
    /**
     * The ID of instance.
     */
    instanceId: pulumi.Input<string>;
}
