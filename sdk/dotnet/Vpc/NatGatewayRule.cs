// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ucloud.Vpc
{
    /// <summary>
    /// Provides a Nat Gateway resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Ucloud = Pulumi.Ucloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVPC = new Ucloud.Vpc.VPC("fooVPC", new Ucloud.Vpc.VPCArgs
    ///         {
    ///             Tag = "tf-acc",
    ///             CidrBlocks = 
    ///             {
    ///                 "192.168.0.0/16",
    ///             },
    ///         });
    ///         var fooSubnet = new Ucloud.Vpc.Subnet("fooSubnet", new Ucloud.Vpc.SubnetArgs
    ///         {
    ///             Tag = "tf-acc",
    ///             CidrBlock = "192.168.1.0/24",
    ///             VpcId = fooVPC.Id,
    ///         });
    ///         var fooEIP = new Ucloud.Unet.EIP("fooEIP", new Ucloud.Unet.EIPArgs
    ///         {
    ///             Bandwidth = 1,
    ///             InternetType = "bgp",
    ///             ChargeMode = "bandwidth",
    ///             Tag = "tf-acc",
    ///         });
    ///         var fooSecurityGroup = Output.Create(Ucloud.Unet.GetSecurityGroup.InvokeAsync(new Ucloud.Unet.GetSecurityGroupArgs
    ///         {
    ///             Type = "recommend_web",
    ///         }));
    ///         var defaultZone = Output.Create(Ucloud.Uaccount.GetZone.InvokeAsync());
    ///         var defaultImage = defaultZone.Apply(defaultZone =&gt; Output.Create(Ucloud.Uhost.GetImage.InvokeAsync(new Ucloud.Uhost.GetImageArgs
    ///         {
    ///             AvailabilityZone = defaultZone.Zones[0].Id,
    ///             NameRegex = "^CentOS 7.[1-2] 64",
    ///             ImageType = "base",
    ///         })));
    ///         var fooInstance = new Ucloud.Uhost.Instance("fooInstance", new Ucloud.Uhost.InstanceArgs
    ///         {
    ///             VpcId = fooVPC.Id,
    ///             SubnetId = fooSubnet.Id,
    ///             AvailabilityZone = defaultZone.Apply(defaultZone =&gt; defaultZone.Zones[0].Id),
    ///             ImageId = defaultImage.Apply(defaultImage =&gt; defaultImage.Images[0].Id),
    ///             InstanceType = "n-basic-1",
    ///             ChargeType = "dynamic",
    ///             Tag = "tf-acc",
    ///         });
    ///         var fooNATGateway = new Ucloud.Vpc.NATGateway("fooNATGateway", new Ucloud.Vpc.NATGatewayArgs
    ///         {
    ///             VpcId = fooVPC.Id,
    ///             SubnetIds = 
    ///             {
    ///                 fooSubnet.Id,
    ///             },
    ///             EipId = fooEIP.Id,
    ///             Tag = "tf-acc",
    ///             EnableWhiteList = false,
    ///             SecurityGroup = fooSecurityGroup.Apply(fooSecurityGroup =&gt; fooSecurityGroup.SecurityGroups[0].Id),
    ///         });
    ///         var fooNATGatewayRule = new Ucloud.Vpc.NATGatewayRule("fooNATGatewayRule", new Ucloud.Vpc.NATGatewayRuleArgs
    ///         {
    ///             NatGatewayId = fooNATGateway.Id,
    ///             Protocol = "tcp",
    ///             SrcEipId = fooEIP.Id,
    ///             SrcPortRange = "88",
    ///             DstIp = fooInstance.PrivateIp,
    ///             DstPortRange = "80",
    ///         });
    ///         var bar = new Ucloud.Vpc.NATGatewayRule("bar", new Ucloud.Vpc.NATGatewayRuleArgs
    ///         {
    ///             NatGatewayId = fooNATGateway.Id,
    ///             Protocol = "tcp",
    ///             SrcEipId = fooEIP.Id,
    ///             SrcPortRange = "90-100",
    ///             DstIp = fooInstance.PrivateIp,
    ///             DstPortRange = "90-100",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [UcloudResourceType("ucloud:vpc/nATGatewayRule:NATGatewayRule")]
    public partial class NATGatewayRule : Pulumi.CustomResource
    {
        /// <summary>
        /// The private ip of instance bound to the jNAT gateway.
        /// </summary>
        [Output("dstIp")]
        public Output<string> DstIp { get; private set; } = null!;

        /// <summary>
        /// The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
        /// </summary>
        [Output("dstPortRange")]
        public Output<string> DstPortRange { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Nat Gateway.
        /// </summary>
        [Output("natGatewayId")]
        public Output<string> NatGatewayId { get; private set; } = null!;

        /// <summary>
        /// The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// The ID of eip associate to the Nat Gateway.
        /// </summary>
        [Output("srcEipId")]
        public Output<string> SrcEipId { get; private set; } = null!;

        /// <summary>
        /// The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
        /// </summary>
        [Output("srcPortRange")]
        public Output<string> SrcPortRange { get; private set; } = null!;


        /// <summary>
        /// Create a NATGatewayRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NATGatewayRule(string name, NATGatewayRuleArgs args, CustomResourceOptions? options = null)
            : base("ucloud:vpc/nATGatewayRule:NATGatewayRule", name, args ?? new NATGatewayRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NATGatewayRule(string name, Input<string> id, NATGatewayRuleState? state = null, CustomResourceOptions? options = null)
            : base("ucloud:vpc/nATGatewayRule:NATGatewayRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NATGatewayRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NATGatewayRule Get(string name, Input<string> id, NATGatewayRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new NATGatewayRule(name, id, state, options);
        }
    }

    public sealed class NATGatewayRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The private ip of instance bound to the jNAT gateway.
        /// </summary>
        [Input("dstIp", required: true)]
        public Input<string> DstIp { get; set; } = null!;

        /// <summary>
        /// The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
        /// </summary>
        [Input("dstPortRange", required: true)]
        public Input<string> DstPortRange { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Nat Gateway.
        /// </summary>
        [Input("natGatewayId", required: true)]
        public Input<string> NatGatewayId { get; set; } = null!;

        /// <summary>
        /// The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The ID of eip associate to the Nat Gateway.
        /// </summary>
        [Input("srcEipId", required: true)]
        public Input<string> SrcEipId { get; set; } = null!;

        /// <summary>
        /// The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
        /// </summary>
        [Input("srcPortRange", required: true)]
        public Input<string> SrcPortRange { get; set; } = null!;

        public NATGatewayRuleArgs()
        {
        }
    }

    public sealed class NATGatewayRuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The private ip of instance bound to the jNAT gateway.
        /// </summary>
        [Input("dstIp")]
        public Input<string>? DstIp { get; set; }

        /// <summary>
        /// The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
        /// </summary>
        [Input("dstPortRange")]
        public Input<string>? DstPortRange { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Nat Gateway.
        /// </summary>
        [Input("natGatewayId")]
        public Input<string>? NatGatewayId { get; set; }

        /// <summary>
        /// The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The ID of eip associate to the Nat Gateway.
        /// </summary>
        [Input("srcEipId")]
        public Input<string>? SrcEipId { get; set; }

        /// <summary>
        /// The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
        /// </summary>
        [Input("srcPortRange")]
        public Input<string>? SrcPortRange { get; set; }

        public NATGatewayRuleState()
        {
        }
    }
}
