// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ucloud
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source providers a list of projects owned by user according to finance permission and name.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/d/projects.html.markdown.
        /// </summary>
        public static Task<LookupProjectsResult> LookupProjects(LookupProjectsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<LookupProjectsResult>("ucloud:/lookupProjects:lookupProjects", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class LookupProjectsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// To identify if the current account is granted with financial permission.
        /// </summary>
        [Input("isFinance")]
        public bool? IsFinance { get; set; }

        /// <summary>
        /// A regex string to filter resulting projects by name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public LookupProjectsArgs()
        {
        }
    }

    [OutputType]
    public sealed class LookupProjectsResult
    {
        public readonly bool? IsFinance;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.LookupProjectsProjectsResult> Projects;
        /// <summary>
        /// Total number of projects that satisfy the condition.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private LookupProjectsResult(
            bool? isFinance,
            string? nameRegex,
            string? outputFile,
            ImmutableArray<Outputs.LookupProjectsProjectsResult> projects,
            int totalCount,
            string id)
        {
            IsFinance = isFinance;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Projects = projects;
            TotalCount = totalCount;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class LookupProjectsProjectsResult
    {
        /// <summary>
        /// The time of creation for instance, formatted in RFC3339 time string.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The ID of project defined.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The number of members belongs to the defined project.
        /// </summary>
        public readonly int MemberCount;
        /// <summary>
        /// The name of the defined project.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the parent project where the sub project belongs to.
        /// </summary>
        public readonly string ParentId;
        /// <summary>
        /// The name of the parent project where the sub project belongs to.
        /// </summary>
        public readonly string ParentName;
        /// <summary>
        /// The number of the resounce instance belong/s to the defined project.
        /// </summary>
        public readonly int ResourceCount;

        [OutputConstructor]
        private LookupProjectsProjectsResult(
            string createTime,
            string id,
            int memberCount,
            string name,
            string parentId,
            string parentName,
            int resourceCount)
        {
            CreateTime = createTime;
            Id = id;
            MemberCount = memberCount;
            Name = name;
            ParentId = parentId;
            ParentName = parentName;
            ResourceCount = resourceCount;
        }
    }
    }
}
