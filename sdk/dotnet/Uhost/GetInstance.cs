// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ucloud.Uhost
{
    public static class GetInstance
    {
        /// <summary>
        /// This data source providers a list of UHost instance resources according to their availability zone, instance ID and tag.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ucloud = Pulumi.Ucloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Ucloud.Uhost.GetInstance.InvokeAsync(new Ucloud.Uhost.GetInstanceArgs
        ///         {
        ///             AvailabilityZone = "cn-bj2-02",
        ///         }));
        ///         this.First = example.Apply(example =&gt; example.Instances[0].Id);
        ///     }
        /// 
        ///     [Output("first")]
        ///     public Output&lt;string&gt; First { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("ucloud:uhost/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithVersion());
    }


    public sealed class GetInstanceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Availability zone where instances are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        /// </summary>
        [Input("availabilityZone")]
        public string? AvailabilityZone { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of instance IDs, all the instances belongs to the defined region will be retrieved if this argument is `[]`.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter resulting instances by name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// A tag assigned to instance.
        /// </summary>
        [Input("tag")]
        public string? Tag { get; set; }

        public GetInstanceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        /// <summary>
        /// Availability zone where instances are located.
        /// </summary>
        public readonly string? AvailabilityZone;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// It is a nested type. instances documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceInstanceResult> Instances;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// A tag assigned to the instance.
        /// </summary>
        public readonly string? Tag;
        /// <summary>
        /// Total number of instances that satisfy the condition.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetInstanceResult(
            string? availabilityZone,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.GetInstanceInstanceResult> instances,

            string? nameRegex,

            string? outputFile,

            string? tag,

            int totalCount)
        {
            AvailabilityZone = availabilityZone;
            Id = id;
            Ids = ids;
            Instances = instances;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Tag = tag;
            TotalCount = totalCount;
        }
    }
}
