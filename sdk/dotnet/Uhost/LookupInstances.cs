// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ucloud.uhost
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source providers a list of UHost instance resources according to their availability zone, instance ID and tag.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/d/instances.html.markdown.
        /// </summary>
        public static Task<LookupInstancesResult> LookupInstances(LookupInstancesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<LookupInstancesResult>("ucloud:uhost/lookupInstances:lookupInstances", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class LookupInstancesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Availability zone where instances are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        /// </summary>
        [Input("availabilityZone")]
        public string? AvailabilityZone { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of instance IDs, all the instances belongs to the defined region will be retrieved if this argument is "".
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter resulting instances by name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// A tag assigned to instance.
        /// </summary>
        [Input("tag")]
        public string? Tag { get; set; }

        public LookupInstancesArgs()
        {
        }
    }

    [OutputType]
    public sealed class LookupInstancesResult
    {
        /// <summary>
        /// Availability zone where instances are located.
        /// </summary>
        public readonly string? AvailabilityZone;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// It is a nested type. instances documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.LookupInstancesInstancesResult> Instances;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// A tag assigned to the instance.
        /// </summary>
        public readonly string? Tag;
        /// <summary>
        /// Total number of instances that satisfy the condition.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private LookupInstancesResult(
            string? availabilityZone,
            ImmutableArray<string> ids,
            ImmutableArray<Outputs.LookupInstancesInstancesResult> instances,
            string? nameRegex,
            string? outputFile,
            string? tag,
            int totalCount,
            string id)
        {
            AvailabilityZone = availabilityZone;
            Ids = ids;
            Instances = instances;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Tag = tag;
            TotalCount = totalCount;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class LookupInstancesInstancesDiskSetsResult
    {
        /// <summary>
        /// The ID of disk.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies whether boot disk or not.
        /// </summary>
        public readonly bool IsBoot;
        /// <summary>
        /// The size of disk, measured in GB (Gigabyte).
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The type of disk.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private LookupInstancesInstancesDiskSetsResult(
            string id,
            bool isBoot,
            int size,
            string type)
        {
            Id = id;
            IsBoot = isBoot;
            Size = size;
            Type = type;
        }
    }

    [OutputType]
    public sealed class LookupInstancesInstancesIpSetsResult
    {
        /// <summary>
        /// Type of Elastic IP routes.
        /// </summary>
        public readonly string InternetType;
        /// <summary>
        /// Elastic IP address.
        /// </summary>
        public readonly string Ip;

        [OutputConstructor]
        private LookupInstancesInstancesIpSetsResult(
            string internetType,
            string ip)
        {
            InternetType = internetType;
            Ip = ip;
        }
    }

    [OutputType]
    public sealed class LookupInstancesInstancesResult
    {
        /// <summary>
        /// Whether to renew an instance automatically or not.
        /// </summary>
        public readonly bool AutoRenew;
        /// <summary>
        /// Availability zone where instances are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// The charge type of instance, possible values are: `year`, `month` and `dynamic` as pay by hour.
        /// </summary>
        public readonly string ChargeType;
        /// <summary>
        /// The number of cores of virtual CPU, measureed in core.
        /// </summary>
        public readonly int Cpu;
        /// <summary>
        /// The time of creation for instance, formatted in RFC3339 time string.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<LookupInstancesInstancesDiskSetsResult> DiskSets;
        /// <summary>
        /// The expiration time for instance, formatted in RFC3339 time string.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// The ID of disk.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The type of instance.
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<LookupInstancesInstancesIpSetsResult> IpSets;
        /// <summary>
        /// The size of memory, measured in MB (Megabyte).
        /// </summary>
        public readonly int Memory;
        /// <summary>
        /// The name of the instance.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The private IP address assigned to the instance.
        /// </summary>
        public readonly string PrivateIp;
        /// <summary>
        /// The remarks of instance.
        /// </summary>
        public readonly string Remark;
        /// <summary>
        /// Instance current status. Possible values are `Initializing`, `Starting`, `Running`, `Stopping`, `Stopped`, `Install Fail` and `Rebooting`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The ID of subnet linked to the instance.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// A tag assigned to instance.
        /// </summary>
        public readonly string Tag;
        /// <summary>
        /// The ID of VPC linked to the instance.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private LookupInstancesInstancesResult(
            bool autoRenew,
            string availabilityZone,
            string chargeType,
            int cpu,
            string createTime,
            ImmutableArray<LookupInstancesInstancesDiskSetsResult> diskSets,
            string expireTime,
            string id,
            string instanceType,
            ImmutableArray<LookupInstancesInstancesIpSetsResult> ipSets,
            int memory,
            string name,
            string privateIp,
            string remark,
            string status,
            string subnetId,
            string tag,
            string vpcId)
        {
            AutoRenew = autoRenew;
            AvailabilityZone = availabilityZone;
            ChargeType = chargeType;
            Cpu = cpu;
            CreateTime = createTime;
            DiskSets = diskSets;
            ExpireTime = expireTime;
            Id = id;
            InstanceType = instanceType;
            IpSets = ipSets;
            Memory = memory;
            Name = name;
            PrivateIp = privateIp;
            Remark = remark;
            Status = status;
            SubnetId = subnetId;
            Tag = tag;
            VpcId = vpcId;
        }
    }
    }
}
