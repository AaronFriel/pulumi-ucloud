// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ucloud.Uhost
{
    public static class GetImage
    {
        /// <summary>
        /// This data source providers a list of available image resources according to their availability zone, image ID and other fields.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ucloud = Pulumi.Ucloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Ucloud.Uhost.GetImage.InvokeAsync(new Ucloud.Uhost.GetImageArgs
        ///         {
        ///             AvailabilityZone = "cn-bj2-02",
        ///             ImageType = "base",
        ///             NameRegex = "^CentOS 7.[1-2] 64",
        ///             MostRecent = true,
        ///         }));
        ///         this.First = example.Apply(example =&gt; example.Images[0].Id);
        ///     }
        /// 
        ///     [Output("first")]
        ///     public Output&lt;string&gt; First { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("ucloud:uhost/getImage:getImage", args ?? new GetImageArgs(), options.WithVersion());
    }


    public sealed class GetImageArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Availability zone where images are located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
        /// </summary>
        [Input("availabilityZone")]
        public string? AvailabilityZone { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of image IDs, all the images belong to this region will be retrieved if the ID is `[]`. 
        /// &gt; **Note** this argument conflicts with `image_id`.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The ID of image.
        /// &gt; **Note** this argument conflicts with `ids`.
        /// </summary>
        [Input("imageId")]
        public string? ImageId { get; set; }

        /// <summary>
        /// The type of image. Possible values are: `base` as standard image, `business` as owned by market place, and `custom` as custom-image, all the image types will be retrieved by default.
        /// </summary>
        [Input("imageType")]
        public string? ImageType { get; set; }

        /// <summary>
        /// If more than one result is returned, use the most recent image.
        /// </summary>
        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        /// <summary>
        /// A regex string to filter resulting images by name. (Such as: `^CentOS 7.[1-2] 64` means CentOS 7.1 of 64-bit operating system or CentOS 7.2 of 64-bit operating system, "^Ubuntu 16.04 64" means Ubuntu 16.04 of 64-bit operating system).
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// The type of OS. Possible values are: `linux` and `windows`, all the OS types will be retrieved by default.
        /// </summary>
        [Input("osType")]
        public string? OsType { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetImageArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetImageResult
    {
        /// <summary>
        /// Availability zone where image is located.
        /// </summary>
        public readonly string? AvailabilityZone;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? ImageId;
        public readonly string? ImageType;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageImageResult> Images;
        public readonly bool? MostRecent;
        public readonly string? NameRegex;
        /// <summary>
        /// The type of OS.
        /// </summary>
        public readonly string? OsType;
        public readonly string? OutputFile;
        /// <summary>
        /// Total number of images that satisfy the condition.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetImageResult(
            string? availabilityZone,

            string id,

            ImmutableArray<string> ids,

            string? imageId,

            string? imageType,

            ImmutableArray<Outputs.GetImageImageResult> images,

            bool? mostRecent,

            string? nameRegex,

            string? osType,

            string? outputFile,

            int totalCount)
        {
            AvailabilityZone = availabilityZone;
            Id = id;
            Ids = ids;
            ImageId = imageId;
            ImageType = imageType;
            Images = images;
            MostRecent = mostRecent;
            NameRegex = nameRegex;
            OsType = osType;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
