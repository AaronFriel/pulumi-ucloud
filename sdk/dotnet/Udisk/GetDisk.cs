// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ucloud.Udisk
{
    public static class GetDisk
    {
        /// <summary>
        /// This data source provides a list of Disk resources according to their Disk ID and disk type.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ucloud = Pulumi.Ucloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Ucloud.Udisk.GetDisk.InvokeAsync());
        ///         this.First = example.Apply(example =&gt; example.Disks[0].Id);
        ///     }
        /// 
        ///     [Output("first")]
        ///     public Output&lt;string&gt; First { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDiskResult> InvokeAsync(GetDiskArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDiskResult>("ucloud:udisk/getDisk:getDisk", args ?? new GetDiskArgs(), options.WithVersion());
    }


    public sealed class GetDiskArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Availability zone where Disk are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        /// </summary>
        [Input("availabilityZone")]
        public string? AvailabilityZone { get; set; }

        /// <summary>
        /// The type of disk. Possible values are: `data_disk`as cloud disk, `ssd_data_disk` as SSD cloud disk, `system_disk`as system disk, `ssd_system_disk` as SSD system disk, `rssd_data_disk` as RDMA-SSD cloud disk.
        /// </summary>
        [Input("diskType")]
        public string? DiskType { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Disk IDs, all the Disks belong to this region will be retrieved if the ID is `[]`.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter resulting disks by name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetDiskArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDiskResult
    {
        /// <summary>
        /// Availability zone where disk is located.
        /// </summary>
        public readonly string? AvailabilityZone;
        /// <summary>
        /// The type of disk.
        /// </summary>
        public readonly string? DiskType;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDiskDiskResult> Disks;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// Total number of Disks that satisfy the condition.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetDiskResult(
            string? availabilityZone,

            string? diskType,

            ImmutableArray<Outputs.GetDiskDiskResult> disks,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            int totalCount)
        {
            AvailabilityZone = availabilityZone;
            DiskType = diskType;
            Disks = disks;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
