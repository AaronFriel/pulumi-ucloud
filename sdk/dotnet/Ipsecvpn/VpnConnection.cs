// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ucloud.ipsecvpn
{
    /// <summary>
    /// Provides a IPSec VPN Gateway Connection resource.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/r/vpn_connection.html.markdown.
    /// </summary>
    public partial class VpnConnection : Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time for VPN Gateway Connection, formatted in RFC3339 time string.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The grade of the VPN Gateway
        /// </summary>
        [Output("customerGatewayId")]
        public Output<string> CustomerGatewayId { get; private set; } = null!;

        /// <summary>
        /// The configurations of IKE negotiation. Each ike_config supports fields documented below.
        /// </summary>
        [Output("ikeConfig")]
        public Output<Outputs.VpnConnectionIkeConfig> IkeConfig { get; private set; } = null!;

        /// <summary>
        /// The configurations of IPSec negotiation. Each ipsec_config supports fields documented below.
        /// </summary>
        [Output("ipsecConfig")]
        public Output<Outputs.VpnConnectionIpsecConfig> IpsecConfig { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The remarks of the VPN Gateway Connection. (Default: `""`).
        /// </summary>
        [Output("remark")]
        public Output<string> Remark { get; private set; } = null!;

        /// <summary>
        /// A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        /// </summary>
        [Output("tag")]
        public Output<string?> Tag { get; private set; } = null!;

        /// <summary>
        /// The ID of VPC linked to the VPN Gateway Connection. 
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The ID of  the VPN Customer Gateway. 
        /// </summary>
        [Output("vpnGatewayId")]
        public Output<string> VpnGatewayId { get; private set; } = null!;


        /// <summary>
        /// Create a VpnConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnConnection(string name, VpnConnectionArgs args, CustomResourceOptions? options = null)
            : base("ucloud:ipsecvpn/vpnConnection:VpnConnection", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private VpnConnection(string name, Input<string> id, VpnConnectionState? state = null, CustomResourceOptions? options = null)
            : base("ucloud:ipsecvpn/vpnConnection:VpnConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnConnection Get(string name, Input<string> id, VpnConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnConnection(name, id, state, options);
        }
    }

    public sealed class VpnConnectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The grade of the VPN Gateway
        /// </summary>
        [Input("customerGatewayId", required: true)]
        public Input<string> CustomerGatewayId { get; set; } = null!;

        /// <summary>
        /// The configurations of IKE negotiation. Each ike_config supports fields documented below.
        /// </summary>
        [Input("ikeConfig", required: true)]
        public Input<Inputs.VpnConnectionIkeConfigArgs> IkeConfig { get; set; } = null!;

        /// <summary>
        /// The configurations of IPSec negotiation. Each ipsec_config supports fields documented below.
        /// </summary>
        [Input("ipsecConfig", required: true)]
        public Input<Inputs.VpnConnectionIpsecConfigArgs> IpsecConfig { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The remarks of the VPN Gateway Connection. (Default: `""`).
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        /// <summary>
        /// The ID of VPC linked to the VPN Gateway Connection. 
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// The ID of  the VPN Customer Gateway. 
        /// </summary>
        [Input("vpnGatewayId", required: true)]
        public Input<string> VpnGatewayId { get; set; } = null!;

        public VpnConnectionArgs()
        {
        }
    }

    public sealed class VpnConnectionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time for VPN Gateway Connection, formatted in RFC3339 time string.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The grade of the VPN Gateway
        /// </summary>
        [Input("customerGatewayId")]
        public Input<string>? CustomerGatewayId { get; set; }

        /// <summary>
        /// The configurations of IKE negotiation. Each ike_config supports fields documented below.
        /// </summary>
        [Input("ikeConfig")]
        public Input<Inputs.VpnConnectionIkeConfigGetArgs>? IkeConfig { get; set; }

        /// <summary>
        /// The configurations of IPSec negotiation. Each ipsec_config supports fields documented below.
        /// </summary>
        [Input("ipsecConfig")]
        public Input<Inputs.VpnConnectionIpsecConfigGetArgs>? IpsecConfig { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The remarks of the VPN Gateway Connection. (Default: `""`).
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        /// <summary>
        /// The ID of VPC linked to the VPN Gateway Connection. 
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The ID of  the VPN Customer Gateway. 
        /// </summary>
        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        public VpnConnectionState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class VpnConnectionIkeConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication algorithm of IPSec negotiation. Possible values: `sha1`, `md5`. (Default: `sha1`)
        /// </summary>
        [Input("authenticationAlgorithm")]
        public Input<string>? AuthenticationAlgorithm { get; set; }

        /// <summary>
        /// The Diffie-Hellman group used by IKE negotiation. Possible values: `1`, `2`, `5`, `14`, `15`, `16`. (Default:`15`)
        /// </summary>
        [Input("dhGroup")]
        public Input<string>? DhGroup { get; set; }

        /// <summary>
        /// The encryption algorithm of IPSec negotiation. Possible values: `aes128`, `aes192`, `aes256`, `aes512`, `3des`. (Default: `aes128`).
        /// </summary>
        [Input("encryptionAlgorithm")]
        public Input<string>? EncryptionAlgorithm { get; set; }

        /// <summary>
        /// The negotiation exchange mode of IKE V1 of VPN gateway. Possible values: `main` (main mode), `aggressive` (aggressive mode). (Default: `main`)
        /// </summary>
        [Input("exchangeMode")]
        public Input<string>? ExchangeMode { get; set; }

        /// <summary>
        /// The version of the IKE protocol which only be supported IKE V1 protocol at present. Possible values: ikev1. (Default: ikev1)
        /// </summary>
        [Input("ikeVersion")]
        public Input<string>? IkeVersion { get; set; }

        /// <summary>
        /// The identification of the VPN gateway.
        /// </summary>
        [Input("localId")]
        public Input<string>? LocalId { get; set; }

        /// <summary>
        /// The key used for authentication between the VPN gateway and the Customer gateway which contains 1-128 characters and only support English, numbers and special characters: `!@#$%^&amp;*()_+-=[]:,./'~`.
        /// </summary>
        [Input("preSharedKey", required: true)]
        public Input<string> PreSharedKey { get; set; } = null!;

        /// <summary>
        /// The identification of the Customer gateway.
        /// </summary>
        [Input("remoteId")]
        public Input<string>? RemoteId { get; set; }

        /// <summary>
        /// The Security Association lifecycle as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)
        /// </summary>
        [Input("saLifeTime")]
        public Input<int>? SaLifeTime { get; set; }

        public VpnConnectionIkeConfigArgs()
        {
        }
    }

    public sealed class VpnConnectionIkeConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication algorithm of IPSec negotiation. Possible values: `sha1`, `md5`. (Default: `sha1`)
        /// </summary>
        [Input("authenticationAlgorithm")]
        public Input<string>? AuthenticationAlgorithm { get; set; }

        /// <summary>
        /// The Diffie-Hellman group used by IKE negotiation. Possible values: `1`, `2`, `5`, `14`, `15`, `16`. (Default:`15`)
        /// </summary>
        [Input("dhGroup")]
        public Input<string>? DhGroup { get; set; }

        /// <summary>
        /// The encryption algorithm of IPSec negotiation. Possible values: `aes128`, `aes192`, `aes256`, `aes512`, `3des`. (Default: `aes128`).
        /// </summary>
        [Input("encryptionAlgorithm")]
        public Input<string>? EncryptionAlgorithm { get; set; }

        /// <summary>
        /// The negotiation exchange mode of IKE V1 of VPN gateway. Possible values: `main` (main mode), `aggressive` (aggressive mode). (Default: `main`)
        /// </summary>
        [Input("exchangeMode")]
        public Input<string>? ExchangeMode { get; set; }

        /// <summary>
        /// The version of the IKE protocol which only be supported IKE V1 protocol at present. Possible values: ikev1. (Default: ikev1)
        /// </summary>
        [Input("ikeVersion")]
        public Input<string>? IkeVersion { get; set; }

        /// <summary>
        /// The identification of the VPN gateway.
        /// </summary>
        [Input("localId")]
        public Input<string>? LocalId { get; set; }

        /// <summary>
        /// The key used for authentication between the VPN gateway and the Customer gateway which contains 1-128 characters and only support English, numbers and special characters: `!@#$%^&amp;*()_+-=[]:,./'~`.
        /// </summary>
        [Input("preSharedKey", required: true)]
        public Input<string> PreSharedKey { get; set; } = null!;

        /// <summary>
        /// The identification of the Customer gateway.
        /// </summary>
        [Input("remoteId")]
        public Input<string>? RemoteId { get; set; }

        /// <summary>
        /// The Security Association lifecycle as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)
        /// </summary>
        [Input("saLifeTime")]
        public Input<int>? SaLifeTime { get; set; }

        public VpnConnectionIkeConfigGetArgs()
        {
        }
    }

    public sealed class VpnConnectionIpsecConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication algorithm of IPSec negotiation. Possible values: `sha1`, `md5`. (Default: `sha1`)
        /// </summary>
        [Input("authenticationAlgorithm")]
        public Input<string>? AuthenticationAlgorithm { get; set; }

        /// <summary>
        /// The encryption algorithm of IPSec negotiation. Possible values: `aes128`, `aes192`, `aes256`, `aes512`, `3des`. (Default: `aes128`).
        /// </summary>
        [Input("encryptionAlgorithm")]
        public Input<string>? EncryptionAlgorithm { get; set; }

        [Input("localSubnetIds", required: true)]
        private InputList<string>? _localSubnetIds;

        /// <summary>
        /// The id list of Local subnet. 
        /// </summary>
        public InputList<string> LocalSubnetIds
        {
            get => _localSubnetIds ?? (_localSubnetIds = new InputList<string>());
            set => _localSubnetIds = value;
        }

        /// <summary>
        /// Whether the PFS of IPSec negotiation is on or off, `disable` as off, The Diffie-Hellman group as open.  Possible values: `disable`, `1`, `2`, `5`, `14`, `15`, `16`. (Default:`disable`)
        /// </summary>
        [Input("pfsDhGroup")]
        public Input<string>? PfsDhGroup { get; set; }

        /// <summary>
        /// The security protocol of IPSec negotiation. Possible values: `esp`, `ah`. (Default:`esp`)
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("remoteSubnets", required: true)]
        private InputList<string>? _remoteSubnets;

        /// <summary>
        /// The ip address list of remote subnet.
        /// </summary>
        public InputList<string> RemoteSubnets
        {
            get => _remoteSubnets ?? (_remoteSubnets = new InputList<string>());
            set => _remoteSubnets = value;
        }

        /// <summary>
        /// The Security Association lifecycle as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)
        /// </summary>
        [Input("saLifeTime")]
        public Input<int>? SaLifeTime { get; set; }

        /// <summary>
        /// The Security Association lifecycle in bytes as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)
        /// </summary>
        [Input("saLifeTimeBytes")]
        public Input<int>? SaLifeTimeBytes { get; set; }

        public VpnConnectionIpsecConfigArgs()
        {
        }
    }

    public sealed class VpnConnectionIpsecConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication algorithm of IPSec negotiation. Possible values: `sha1`, `md5`. (Default: `sha1`)
        /// </summary>
        [Input("authenticationAlgorithm")]
        public Input<string>? AuthenticationAlgorithm { get; set; }

        /// <summary>
        /// The encryption algorithm of IPSec negotiation. Possible values: `aes128`, `aes192`, `aes256`, `aes512`, `3des`. (Default: `aes128`).
        /// </summary>
        [Input("encryptionAlgorithm")]
        public Input<string>? EncryptionAlgorithm { get; set; }

        [Input("localSubnetIds", required: true)]
        private InputList<string>? _localSubnetIds;

        /// <summary>
        /// The id list of Local subnet. 
        /// </summary>
        public InputList<string> LocalSubnetIds
        {
            get => _localSubnetIds ?? (_localSubnetIds = new InputList<string>());
            set => _localSubnetIds = value;
        }

        /// <summary>
        /// Whether the PFS of IPSec negotiation is on or off, `disable` as off, The Diffie-Hellman group as open.  Possible values: `disable`, `1`, `2`, `5`, `14`, `15`, `16`. (Default:`disable`)
        /// </summary>
        [Input("pfsDhGroup")]
        public Input<string>? PfsDhGroup { get; set; }

        /// <summary>
        /// The security protocol of IPSec negotiation. Possible values: `esp`, `ah`. (Default:`esp`)
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("remoteSubnets", required: true)]
        private InputList<string>? _remoteSubnets;

        /// <summary>
        /// The ip address list of remote subnet.
        /// </summary>
        public InputList<string> RemoteSubnets
        {
            get => _remoteSubnets ?? (_remoteSubnets = new InputList<string>());
            set => _remoteSubnets = value;
        }

        /// <summary>
        /// The Security Association lifecycle as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)
        /// </summary>
        [Input("saLifeTime")]
        public Input<int>? SaLifeTime { get; set; }

        /// <summary>
        /// The Security Association lifecycle in bytes as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)
        /// </summary>
        [Input("saLifeTimeBytes")]
        public Input<int>? SaLifeTimeBytes { get; set; }

        public VpnConnectionIpsecConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class VpnConnectionIkeConfig
    {
        /// <summary>
        /// The authentication algorithm of IPSec negotiation. Possible values: `sha1`, `md5`. (Default: `sha1`)
        /// </summary>
        public readonly string? AuthenticationAlgorithm;
        /// <summary>
        /// The Diffie-Hellman group used by IKE negotiation. Possible values: `1`, `2`, `5`, `14`, `15`, `16`. (Default:`15`)
        /// </summary>
        public readonly string? DhGroup;
        /// <summary>
        /// The encryption algorithm of IPSec negotiation. Possible values: `aes128`, `aes192`, `aes256`, `aes512`, `3des`. (Default: `aes128`).
        /// </summary>
        public readonly string? EncryptionAlgorithm;
        /// <summary>
        /// The negotiation exchange mode of IKE V1 of VPN gateway. Possible values: `main` (main mode), `aggressive` (aggressive mode). (Default: `main`)
        /// </summary>
        public readonly string? ExchangeMode;
        /// <summary>
        /// The version of the IKE protocol which only be supported IKE V1 protocol at present. Possible values: ikev1. (Default: ikev1)
        /// </summary>
        public readonly string? IkeVersion;
        /// <summary>
        /// The identification of the VPN gateway.
        /// </summary>
        public readonly string LocalId;
        /// <summary>
        /// The key used for authentication between the VPN gateway and the Customer gateway which contains 1-128 characters and only support English, numbers and special characters: `!@#$%^&amp;*()_+-=[]:,./'~`.
        /// </summary>
        public readonly string PreSharedKey;
        /// <summary>
        /// The identification of the Customer gateway.
        /// </summary>
        public readonly string RemoteId;
        /// <summary>
        /// The Security Association lifecycle as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)
        /// </summary>
        public readonly int? SaLifeTime;

        [OutputConstructor]
        private VpnConnectionIkeConfig(
            string? authenticationAlgorithm,
            string? dhGroup,
            string? encryptionAlgorithm,
            string? exchangeMode,
            string? ikeVersion,
            string localId,
            string preSharedKey,
            string remoteId,
            int? saLifeTime)
        {
            AuthenticationAlgorithm = authenticationAlgorithm;
            DhGroup = dhGroup;
            EncryptionAlgorithm = encryptionAlgorithm;
            ExchangeMode = exchangeMode;
            IkeVersion = ikeVersion;
            LocalId = localId;
            PreSharedKey = preSharedKey;
            RemoteId = remoteId;
            SaLifeTime = saLifeTime;
        }
    }

    [OutputType]
    public sealed class VpnConnectionIpsecConfig
    {
        /// <summary>
        /// The authentication algorithm of IPSec negotiation. Possible values: `sha1`, `md5`. (Default: `sha1`)
        /// </summary>
        public readonly string? AuthenticationAlgorithm;
        /// <summary>
        /// The encryption algorithm of IPSec negotiation. Possible values: `aes128`, `aes192`, `aes256`, `aes512`, `3des`. (Default: `aes128`).
        /// </summary>
        public readonly string? EncryptionAlgorithm;
        /// <summary>
        /// The id list of Local subnet. 
        /// </summary>
        public readonly ImmutableArray<string> LocalSubnetIds;
        /// <summary>
        /// Whether the PFS of IPSec negotiation is on or off, `disable` as off, The Diffie-Hellman group as open.  Possible values: `disable`, `1`, `2`, `5`, `14`, `15`, `16`. (Default:`disable`)
        /// </summary>
        public readonly string? PfsDhGroup;
        /// <summary>
        /// The security protocol of IPSec negotiation. Possible values: `esp`, `ah`. (Default:`esp`)
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// The ip address list of remote subnet.
        /// </summary>
        public readonly ImmutableArray<string> RemoteSubnets;
        /// <summary>
        /// The Security Association lifecycle as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)
        /// </summary>
        public readonly int? SaLifeTime;
        /// <summary>
        /// The Security Association lifecycle in bytes as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)
        /// </summary>
        public readonly int SaLifeTimeBytes;

        [OutputConstructor]
        private VpnConnectionIpsecConfig(
            string? authenticationAlgorithm,
            string? encryptionAlgorithm,
            ImmutableArray<string> localSubnetIds,
            string? pfsDhGroup,
            string? protocol,
            ImmutableArray<string> remoteSubnets,
            int? saLifeTime,
            int saLifeTimeBytes)
        {
            AuthenticationAlgorithm = authenticationAlgorithm;
            EncryptionAlgorithm = encryptionAlgorithm;
            LocalSubnetIds = localSubnetIds;
            PfsDhGroup = pfsDhGroup;
            Protocol = protocol;
            RemoteSubnets = remoteSubnets;
            SaLifeTime = saLifeTime;
            SaLifeTimeBytes = saLifeTimeBytes;
        }
    }
    }
}
