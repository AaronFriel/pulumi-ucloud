// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ucloud.ipsecvpn
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source providers a list of VPN Connection resources according to their ID, name and tag.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/d/vpn_connections.html.markdown.
        /// </summary>
        public static Task<LookupVpnConnectionsResult> LookupVpnConnections(LookupVpnConnectionsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<LookupVpnConnectionsResult>("ucloud:ipsecvpn/lookupVpnConnections:lookupVpnConnections", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class LookupVpnConnectionsArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of VPN Connection IDs, all the VPN Connections belongs to the defined region will be retrieved if this argument is "".
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter resulting VPN Connections by name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// A tag assigned to VPN Connection.
        /// </summary>
        [Input("tag")]
        public string? Tag { get; set; }

        public LookupVpnConnectionsArgs()
        {
        }
    }

    [OutputType]
    public sealed class LookupVpnConnectionsResult
    {
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// A tag assigned to the VPN Connection.
        /// </summary>
        public readonly string? Tag;
        /// <summary>
        /// Total number of VPN Connections that satisfy the condition.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// It is a nested type. VPN Connections documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.LookupVpnConnectionsVpnConnectionsResult> VpnConnections;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private LookupVpnConnectionsResult(
            ImmutableArray<string> ids,
            string? nameRegex,
            string? outputFile,
            string? tag,
            int totalCount,
            ImmutableArray<Outputs.LookupVpnConnectionsVpnConnectionsResult> vpnConnections,
            string id)
        {
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Tag = tag;
            TotalCount = totalCount;
            VpnConnections = vpnConnections;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class LookupVpnConnectionsVpnConnectionsIkeConfigsResult
    {
        /// <summary>
        /// The authentication algorithm of IPSec negotiation.
        /// </summary>
        public readonly string AuthenticationAlgorithm;
        /// <summary>
        /// The Diffie-Hellman group used by IKE negotiation.
        /// </summary>
        public readonly string DhGroup;
        /// <summary>
        /// The encryption algorithm of IPSec negotiation.
        /// </summary>
        public readonly string EncryptionAlgorithm;
        /// <summary>
        /// The negotiation exchange mode of IKE V1 of VPN gateway. 
        /// </summary>
        public readonly string ExchangeMode;
        /// <summary>
        /// The version of the IKE protocol.
        /// </summary>
        public readonly string IkeVersion;
        /// <summary>
        /// The identification of the VPN gateway.
        /// </summary>
        public readonly string LocalId;
        /// <summary>
        /// The key used for authentication between the VPN gateway and the Customer gateway.
        /// </summary>
        public readonly string PreSharedKey;
        /// <summary>
        /// The identification of the Customer gateway.
        /// </summary>
        public readonly string RemoteId;
        /// <summary>
        /// The Security Association lifecycle as the result of IPSec negotiation.
        /// </summary>
        public readonly int SaLifeTime;

        [OutputConstructor]
        private LookupVpnConnectionsVpnConnectionsIkeConfigsResult(
            string authenticationAlgorithm,
            string dhGroup,
            string encryptionAlgorithm,
            string exchangeMode,
            string ikeVersion,
            string localId,
            string preSharedKey,
            string remoteId,
            int saLifeTime)
        {
            AuthenticationAlgorithm = authenticationAlgorithm;
            DhGroup = dhGroup;
            EncryptionAlgorithm = encryptionAlgorithm;
            ExchangeMode = exchangeMode;
            IkeVersion = ikeVersion;
            LocalId = localId;
            PreSharedKey = preSharedKey;
            RemoteId = remoteId;
            SaLifeTime = saLifeTime;
        }
    }

    [OutputType]
    public sealed class LookupVpnConnectionsVpnConnectionsIpsecConfigsResult
    {
        /// <summary>
        /// The authentication algorithm of IPSec negotiation.
        /// </summary>
        public readonly string AuthenticationAlgorithm;
        /// <summary>
        /// The encryption algorithm of IPSec negotiation.
        /// </summary>
        public readonly string EncryptionAlgorithm;
        /// <summary>
        /// The id list of Local subnet. 
        /// </summary>
        public readonly ImmutableArray<string> LocalSubnetIds;
        /// <summary>
        /// Whether the PFS of IPSec negotiation is on or off, `disable` as off, The Diffie-Hellman group as open.
        /// </summary>
        public readonly string PfsDhGroup;
        /// <summary>
        /// The security protocol of IPSec negotiation.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The ip address list of remote subnet.
        /// </summary>
        public readonly ImmutableArray<string> RemoteSubnets;
        /// <summary>
        /// The Security Association lifecycle as the result of IPSec negotiation.
        /// </summary>
        public readonly int SaLifeTime;
        /// <summary>
        /// The Security Association lifecycle in bytes as the result of IPSec negotiation.
        /// </summary>
        public readonly int SaLifeTimeBytes;

        [OutputConstructor]
        private LookupVpnConnectionsVpnConnectionsIpsecConfigsResult(
            string authenticationAlgorithm,
            string encryptionAlgorithm,
            ImmutableArray<string> localSubnetIds,
            string pfsDhGroup,
            string protocol,
            ImmutableArray<string> remoteSubnets,
            int saLifeTime,
            int saLifeTimeBytes)
        {
            AuthenticationAlgorithm = authenticationAlgorithm;
            EncryptionAlgorithm = encryptionAlgorithm;
            LocalSubnetIds = localSubnetIds;
            PfsDhGroup = pfsDhGroup;
            Protocol = protocol;
            RemoteSubnets = remoteSubnets;
            SaLifeTime = saLifeTime;
            SaLifeTimeBytes = saLifeTimeBytes;
        }
    }

    [OutputType]
    public sealed class LookupVpnConnectionsVpnConnectionsResult
    {
        /// <summary>
        /// The time of creation for VPN Connection, formatted in RFC3339 time string.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The ID of VPN Customer Gateway.
        /// </summary>
        public readonly string CustomerGatewayId;
        /// <summary>
        /// The ID of VPN Connection.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<LookupVpnConnectionsVpnConnectionsIkeConfigsResult> IkeConfigs;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<LookupVpnConnectionsVpnConnectionsIpsecConfigsResult> IpsecConfigs;
        /// <summary>
        /// The name of the VPN Connection.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The remarks of VPN Connection.
        /// </summary>
        public readonly string Remark;
        /// <summary>
        /// A tag assigned to VPN Connection.
        /// </summary>
        public readonly string Tag;
        /// <summary>
        /// The ID of VPC linked to the VPN Connection.
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// The ID of VPN Gateway.
        /// </summary>
        public readonly string VpnGatewayId;

        [OutputConstructor]
        private LookupVpnConnectionsVpnConnectionsResult(
            string createTime,
            string customerGatewayId,
            string id,
            ImmutableArray<LookupVpnConnectionsVpnConnectionsIkeConfigsResult> ikeConfigs,
            ImmutableArray<LookupVpnConnectionsVpnConnectionsIpsecConfigsResult> ipsecConfigs,
            string name,
            string remark,
            string tag,
            string vpcId,
            string vpnGatewayId)
        {
            CreateTime = createTime;
            CustomerGatewayId = customerGatewayId;
            Id = id;
            IkeConfigs = ikeConfigs;
            IpsecConfigs = ipsecConfigs;
            Name = name;
            Remark = remark;
            Tag = tag;
            VpcId = vpcId;
            VpnGatewayId = vpnGatewayId;
        }
    }
    }
}
