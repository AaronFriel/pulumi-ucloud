// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ucloud.Ulb
{
    public static class GetLBAttachment
    {
        /// <summary>
        /// This data source provides a list of Load Balancer Attachment resources according to their Load Balancer Attachment ID.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ucloud = Pulumi.Ucloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Ucloud.Ulb.GetLBAttachment.InvokeAsync(new Ucloud.Ulb.GetLBAttachmentArgs
        ///         {
        ///             LoadBalancerId = "ulb-xxx",
        ///             ListenerId = "vserver-xxx",
        ///         }));
        ///         this.First = example.Apply(example =&gt; example.LbAttachments[0].Id);
        ///     }
        /// 
        ///     [Output("first")]
        ///     public Output&lt;string&gt; First { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLBAttachmentResult> InvokeAsync(GetLBAttachmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLBAttachmentResult>("ucloud:ulb/getLBAttachment:getLBAttachment", args ?? new GetLBAttachmentArgs(), options.WithVersion());
    }


    public sealed class GetLBAttachmentArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of LB Attachment IDs, all the LB Attachments belong to the Load Balancer listener will be retrieved if the ID is `[]`.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The ID of a listener server.
        /// </summary>
        [Input("listenerId", required: true)]
        public string ListenerId { get; set; } = null!;

        /// <summary>
        /// The ID of a load balancer.
        /// </summary>
        [Input("loadBalancerId", required: true)]
        public string LoadBalancerId { get; set; } = null!;

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetLBAttachmentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLBAttachmentResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLBAttachmentLbAttachmentResult> LbAttachments;
        public readonly string ListenerId;
        public readonly string LoadBalancerId;
        public readonly string? OutputFile;
        /// <summary>
        /// Total number of LB Attachments that satisfy the condition.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetLBAttachmentResult(
            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.GetLBAttachmentLbAttachmentResult> lbAttachments,

            string listenerId,

            string loadBalancerId,

            string? outputFile,

            int totalCount)
        {
            Id = id;
            Ids = ids;
            LbAttachments = lbAttachments;
            ListenerId = listenerId;
            LoadBalancerId = loadBalancerId;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
