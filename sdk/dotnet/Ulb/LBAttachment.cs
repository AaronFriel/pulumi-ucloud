// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ucloud.Ulb
{
    /// <summary>
    /// Provides a Load Balancer Attachment resource for attaching Load Balancer to UHost Instance, etc.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Ucloud = Pulumi.Ucloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var defaultImage = Output.Create(Ucloud.Uhost.GetImage.InvokeAsync(new Ucloud.Uhost.GetImageArgs
    ///         {
    ///             AvailabilityZone = "cn-bj2-04",
    ///             NameRegex = "^CentOS 6.5 64",
    ///             ImageType = "base",
    ///         }));
    ///         // Create Load Balancer
    ///         var webLB = new Ucloud.Ulb.LB("webLB", new Ucloud.Ulb.LBArgs
    ///         {
    ///             Tag = "tf-example",
    ///         });
    ///         // Create Load Balancer Listener with http protocol
    ///         var defaultLBListener = new Ucloud.Ulb.LBListener("defaultLBListener", new Ucloud.Ulb.LBListenerArgs
    ///         {
    ///             LoadBalancerId = webLB.Id,
    ///             Protocol = "http",
    ///         });
    ///         // Create web server
    ///         var webInstance = new Ucloud.Uhost.Instance("webInstance", new Ucloud.Uhost.InstanceArgs
    ///         {
    ///             InstanceType = "n-basic-2",
    ///             AvailabilityZone = "cn-bj2-04",
    ///             RootPassword = "wA1234567",
    ///             ImageId = defaultImage.Apply(defaultImage =&gt; defaultImage.Images[0].Id),
    ///             Tag = "tf-example",
    ///         });
    ///         // Attach instances to Load Balancer
    ///         var example = new Ucloud.Ulb.LBAttachment("example", new Ucloud.Ulb.LBAttachmentArgs
    ///         {
    ///             LoadBalancerId = webLB.Id,
    ///             ListenerId = defaultLBListener.Id,
    ///             ResourceId = webInstance.Id,
    ///             Port = 80,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// LB Listener can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import ucloud:ulb/lBAttachment:LBAttachment example backend-abcdefg
    /// ```
    /// </summary>
    [UcloudResourceType("ucloud:ulb/lBAttachment:LBAttachment")]
    public partial class LBAttachment : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of a listener server.
        /// </summary>
        [Output("listenerId")]
        public Output<string> ListenerId { get; private set; } = null!;

        /// <summary>
        /// The ID of a load balancer.
        /// </summary>
        [Output("loadBalancerId")]
        public Output<string> LoadBalancerId { get; private set; } = null!;

        /// <summary>
        /// The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// The private ip address for backend servers.
        /// </summary>
        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        /// <summary>
        /// The ID of a backend server.
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// , attribute `resource_type` is deprecated for optimizing parameters.
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;

        /// <summary>
        /// The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a LBAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LBAttachment(string name, LBAttachmentArgs args, CustomResourceOptions? options = null)
            : base("ucloud:ulb/lBAttachment:LBAttachment", name, args ?? new LBAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LBAttachment(string name, Input<string> id, LBAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("ucloud:ulb/lBAttachment:LBAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LBAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LBAttachment Get(string name, Input<string> id, LBAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new LBAttachment(name, id, state, options);
        }
    }

    public sealed class LBAttachmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of a listener server.
        /// </summary>
        [Input("listenerId", required: true)]
        public Input<string> ListenerId { get; set; } = null!;

        /// <summary>
        /// The ID of a load balancer.
        /// </summary>
        [Input("loadBalancerId", required: true)]
        public Input<string> LoadBalancerId { get; set; } = null!;

        /// <summary>
        /// The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The ID of a backend server.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        /// <summary>
        /// , attribute `resource_type` is deprecated for optimizing parameters.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        public LBAttachmentArgs()
        {
        }
    }

    public sealed class LBAttachmentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of a listener server.
        /// </summary>
        [Input("listenerId")]
        public Input<string>? ListenerId { get; set; }

        /// <summary>
        /// The ID of a load balancer.
        /// </summary>
        [Input("loadBalancerId")]
        public Input<string>? LoadBalancerId { get; set; }

        /// <summary>
        /// The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The private ip address for backend servers.
        /// </summary>
        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        /// <summary>
        /// The ID of a backend server.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// , attribute `resource_type` is deprecated for optimizing parameters.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public LBAttachmentState()
        {
        }
    }
}
