// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ucloud.ulb
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source provides a list of Load Balancer Rule resources according to their Load Balancer Rule ID.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/d/lb_rules.html.markdown.
        /// </summary>
        public static Task<LookupLbRulesResult> LookupLbRules(LookupLbRulesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<LookupLbRulesResult>("ucloud:ulb/lookupLbRules:lookupLbRules", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class LookupLbRulesArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of LB Rule IDs, all the LB Rules belong to the Load Balancer listener will be retrieved if the ID is `""`.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The ID of a listener server.
        /// </summary>
        [Input("listenerId", required: true)]
        public string ListenerId { get; set; } = null!;

        /// <summary>
        /// The ID of a load balancer.
        /// </summary>
        [Input("loadBalancerId", required: true)]
        public string LoadBalancerId { get; set; } = null!;

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public LookupLbRulesArgs()
        {
        }
    }

    [OutputType]
    public sealed class LookupLbRulesResult
    {
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.LookupLbRulesLbRulesResult> LbRules;
        public readonly string ListenerId;
        public readonly string LoadBalancerId;
        public readonly string? OutputFile;
        /// <summary>
        /// Total number of LB Rules that satisfy the condition.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private LookupLbRulesResult(
            ImmutableArray<string> ids,
            ImmutableArray<Outputs.LookupLbRulesLbRulesResult> lbRules,
            string listenerId,
            string loadBalancerId,
            string? outputFile,
            int totalCount,
            string id)
        {
            Ids = ids;
            LbRules = lbRules;
            ListenerId = listenerId;
            LoadBalancerId = loadBalancerId;
            OutputFile = outputFile;
            TotalCount = totalCount;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class LookupLbRulesLbRulesResult
    {
        /// <summary>
        /// (Optional) The domain of content forward matching fields. `path` and `domain` cannot coexist.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// The ID of LB Rule.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Optional) The path of Content forward matching fields. `path` and `domain` cannot coexist.
        /// </summary>
        public readonly string Path;

        [OutputConstructor]
        private LookupLbRulesLbRulesResult(
            string domain,
            string id,
            string path)
        {
            Domain = domain;
            Id = id;
            Path = path;
        }
    }
    }
}
