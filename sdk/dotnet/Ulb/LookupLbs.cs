// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ucloud.ulb
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source provides a list of Load Balancer resources according to their Load Balancer ID, VPC ID and Subnet ID.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/d/lbs.html.markdown.
        /// </summary>
        public static Task<LookupLbsResult> LookupLbs(LookupLbsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<LookupLbsResult>("ucloud:ulb/lookupLbs:lookupLbs", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class LookupLbsArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Load Balancer IDs, all the LBs belong to this region will be retrieved if the ID is `""`.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A regex string to filter resulting lbs by name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The ID of subnet that intrant load balancer belongs to.
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId { get; set; }

        /// <summary>
        /// The ID of the VPC linked to the Load Balancers.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public LookupLbsArgs()
        {
        }
    }

    [OutputType]
    public sealed class LookupLbsResult
    {
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.LookupLbsLbsResult> Lbs;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// (Optional) The ID of subnet that intrant load balancer belongs to. 
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Total number of Load Balancers that satisfy the condition.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The ID of the VPC linked to the Load Balancers.
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private LookupLbsResult(
            ImmutableArray<string> ids,
            ImmutableArray<Outputs.LookupLbsLbsResult> lbs,
            string? nameRegex,
            string? outputFile,
            string subnetId,
            int totalCount,
            string vpcId,
            string id)
        {
            Ids = ids;
            Lbs = lbs;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            SubnetId = subnetId;
            TotalCount = totalCount;
            VpcId = vpcId;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class LookupLbsLbsIpSetsResult
    {
        /// <summary>
        /// Type of Load Balancer routes.
        /// </summary>
        public readonly string InternetType;
        /// <summary>
        /// Load Balancer address.
        /// </summary>
        public readonly string Ip;

        [OutputConstructor]
        private LookupLbsLbsIpSetsResult(
            string internetType,
            string ip)
        {
            InternetType = internetType;
            Ip = ip;
        }
    }

    [OutputType]
    public sealed class LookupLbsLbsResult
    {
        /// <summary>
        /// The creation time of Load Balancer, formatted in RFC3339 time string.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The ID of Load Balancer.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicate whether the load balancer is intranet.
        /// </summary>
        public readonly bool Internal;
        public readonly ImmutableArray<LookupLbsLbsIpSetsResult> IpSets;
        /// <summary>
        /// The name of Load Balancer.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The IP address of intranet IP.
        /// </summary>
        public readonly string PrivateIp;
        /// <summary>
        /// The remarks of Load Balancer.
        /// </summary>
        public readonly string Remark;
        /// <summary>
        /// The ID of subnet that intrant load balancer belongs to.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// A tag assigned to Load Balancer.
        /// </summary>
        public readonly string Tag;
        /// <summary>
        /// The ID of the VPC linked to the Load Balancers.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private LookupLbsLbsResult(
            string createTime,
            string id,
            bool @internal,
            ImmutableArray<LookupLbsLbsIpSetsResult> ipSets,
            string name,
            string privateIp,
            string remark,
            string subnetId,
            string tag,
            string vpcId)
        {
            CreateTime = createTime;
            Id = id;
            Internal = @internal;
            IpSets = ipSets;
            Name = name;
            PrivateIp = privateIp;
            Remark = remark;
            SubnetId = subnetId;
            Tag = tag;
            VpcId = vpcId;
        }
    }
    }
}
