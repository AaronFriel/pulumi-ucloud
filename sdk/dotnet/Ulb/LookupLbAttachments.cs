// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ucloud.ulb
{
    public static partial class Invokes
    {
        /// <summary>
        /// This data source provides a list of Load Balancer Attachment resources according to their Load Balancer Attachment ID.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/d/lb_attachments.html.markdown.
        /// </summary>
        public static Task<LookupLbAttachmentsResult> LookupLbAttachments(LookupLbAttachmentsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<LookupLbAttachmentsResult>("ucloud:ulb/lookupLbAttachments:lookupLbAttachments", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class LookupLbAttachmentsArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of LB Attachment IDs, all the LB Attachments belong to the Load Balancer listener will be retrieved if the ID is `""`.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The ID of a listener server.
        /// </summary>
        [Input("listenerId", required: true)]
        public string ListenerId { get; set; } = null!;

        /// <summary>
        /// The ID of a load balancer.
        /// </summary>
        [Input("loadBalancerId", required: true)]
        public string LoadBalancerId { get; set; } = null!;

        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public LookupLbAttachmentsArgs()
        {
        }
    }

    [OutputType]
    public sealed class LookupLbAttachmentsResult
    {
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// It is a nested type which documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.LookupLbAttachmentsLbAttachmentsResult> LbAttachments;
        public readonly string ListenerId;
        public readonly string LoadBalancerId;
        public readonly string? OutputFile;
        /// <summary>
        /// Total number of LB Attachments that satisfy the condition.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private LookupLbAttachmentsResult(
            ImmutableArray<string> ids,
            ImmutableArray<Outputs.LookupLbAttachmentsLbAttachmentsResult> lbAttachments,
            string listenerId,
            string loadBalancerId,
            string? outputFile,
            int totalCount,
            string id)
        {
            Ids = ids;
            LbAttachments = lbAttachments;
            ListenerId = listenerId;
            LoadBalancerId = loadBalancerId;
            OutputFile = outputFile;
            TotalCount = totalCount;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class LookupLbAttachmentsLbAttachmentsResult
    {
        /// <summary>
        /// The ID of LB Attachment.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Port opened on the backend server to receive requests, range: 1-65535.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The private ip address for backend servers.
        /// </summary>
        public readonly string PrivateIp;
        /// <summary>
        /// The ID of a backend server.
        /// </summary>
        public readonly string ResourceId;
        /// <summary>
        /// The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private LookupLbAttachmentsLbAttachmentsResult(
            string id,
            int port,
            string privateIp,
            string resourceId,
            string status)
        {
            Id = id;
            Port = port;
            PrivateIp = privateIp;
            ResourceId = resourceId;
            Status = status;
        }
    }
    }
}
