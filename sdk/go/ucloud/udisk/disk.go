// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package udisk

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloud Disk resource.
//
// > **Note** If the disk have attached to the instance, the instance will reboot automatically to make the change take effect when update the  `diskSize`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/udisk"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_default, err := uaccount.GetZone(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = udisk.NewDisk(ctx, "example", &udisk.DiskArgs{
// 			AvailabilityZone: pulumi.String(_default.Zones[0].Id),
// 			DiskSize:         pulumi.Int(10),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Disk can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import ucloud:udisk/disk:Disk example bsm-abcdefg
// ```
type Disk struct {
	pulumi.CustomResourceState

	// Availability zone where cloud disk is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour. (Default: `month`).
	ChargeType pulumi.StringOutput `pulumi:"chargeType"`
	// The time of creation of disk, formatted in RFC3339 time string.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The size of disk. Purchase the size of disk in GB. 20-8000 for a cloud disk, 20-8000 for SSD cloud disk . If the disk have attached to the instance, the instance will reboot automatically to make the change take effect when update the  `diskSize`.
	DiskSize pulumi.IntOutput `pulumi:"diskSize"`
	// The type of disk. Possible values are: `dataDisk`as cloud disk, `ssdDataDisk` as ssd cloud disk, `rssdDataDisk` as RDMA-SSD cloud disk (the `rssdDataDisk` only be supported in `cn-bj2-05`).(Default: `dataDisk`).
	DiskType pulumi.StringPtrOutput `pulumi:"diskType"`
	// The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the disk will be vaild till the last day of that month.
	Duration pulumi.IntPtrOutput `pulumi:"duration"`
	// The expiration time of disk, formatted in RFC3339 time string.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	Name       pulumi.StringOutput `pulumi:"name"`
	// The status of disk. Possible values are: `Available`, `InUse`, `Detaching`, `Initializating`, `Failed`, `Cloning`, `Restoring`, `RestoreFailed`.
	Status pulumi.StringOutput `pulumi:"status"`
	// A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrOutput `pulumi:"tag"`
}

// NewDisk registers a new resource with the given unique name, arguments, and options.
func NewDisk(ctx *pulumi.Context,
	name string, args *DiskArgs, opts ...pulumi.ResourceOption) (*Disk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.DiskSize == nil {
		return nil, errors.New("invalid value for required argument 'DiskSize'")
	}
	var resource Disk
	err := ctx.RegisterResource("ucloud:udisk/disk:Disk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDisk gets an existing Disk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskState, opts ...pulumi.ResourceOption) (*Disk, error) {
	var resource Disk
	err := ctx.ReadResource("ucloud:udisk/disk:Disk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Disk resources.
type diskState struct {
	// Availability zone where cloud disk is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour. (Default: `month`).
	ChargeType *string `pulumi:"chargeType"`
	// The time of creation of disk, formatted in RFC3339 time string.
	CreateTime *string `pulumi:"createTime"`
	// The size of disk. Purchase the size of disk in GB. 20-8000 for a cloud disk, 20-8000 for SSD cloud disk . If the disk have attached to the instance, the instance will reboot automatically to make the change take effect when update the  `diskSize`.
	DiskSize *int `pulumi:"diskSize"`
	// The type of disk. Possible values are: `dataDisk`as cloud disk, `ssdDataDisk` as ssd cloud disk, `rssdDataDisk` as RDMA-SSD cloud disk (the `rssdDataDisk` only be supported in `cn-bj2-05`).(Default: `dataDisk`).
	DiskType *string `pulumi:"diskType"`
	// The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the disk will be vaild till the last day of that month.
	Duration *int `pulumi:"duration"`
	// The expiration time of disk, formatted in RFC3339 time string.
	ExpireTime *string `pulumi:"expireTime"`
	Name       *string `pulumi:"name"`
	// The status of disk. Possible values are: `Available`, `InUse`, `Detaching`, `Initializating`, `Failed`, `Cloning`, `Restoring`, `RestoreFailed`.
	Status *string `pulumi:"status"`
	// A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag *string `pulumi:"tag"`
}

type DiskState struct {
	// Availability zone where cloud disk is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
	AvailabilityZone pulumi.StringPtrInput
	// Charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour. (Default: `month`).
	ChargeType pulumi.StringPtrInput
	// The time of creation of disk, formatted in RFC3339 time string.
	CreateTime pulumi.StringPtrInput
	// The size of disk. Purchase the size of disk in GB. 20-8000 for a cloud disk, 20-8000 for SSD cloud disk . If the disk have attached to the instance, the instance will reboot automatically to make the change take effect when update the  `diskSize`.
	DiskSize pulumi.IntPtrInput
	// The type of disk. Possible values are: `dataDisk`as cloud disk, `ssdDataDisk` as ssd cloud disk, `rssdDataDisk` as RDMA-SSD cloud disk (the `rssdDataDisk` only be supported in `cn-bj2-05`).(Default: `dataDisk`).
	DiskType pulumi.StringPtrInput
	// The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the disk will be vaild till the last day of that month.
	Duration pulumi.IntPtrInput
	// The expiration time of disk, formatted in RFC3339 time string.
	ExpireTime pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	// The status of disk. Possible values are: `Available`, `InUse`, `Detaching`, `Initializating`, `Failed`, `Cloning`, `Restoring`, `RestoreFailed`.
	Status pulumi.StringPtrInput
	// A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrInput
}

func (DiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskState)(nil)).Elem()
}

type diskArgs struct {
	// Availability zone where cloud disk is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour. (Default: `month`).
	ChargeType *string `pulumi:"chargeType"`
	// The size of disk. Purchase the size of disk in GB. 20-8000 for a cloud disk, 20-8000 for SSD cloud disk . If the disk have attached to the instance, the instance will reboot automatically to make the change take effect when update the  `diskSize`.
	DiskSize int `pulumi:"diskSize"`
	// The type of disk. Possible values are: `dataDisk`as cloud disk, `ssdDataDisk` as ssd cloud disk, `rssdDataDisk` as RDMA-SSD cloud disk (the `rssdDataDisk` only be supported in `cn-bj2-05`).(Default: `dataDisk`).
	DiskType *string `pulumi:"diskType"`
	// The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the disk will be vaild till the last day of that month.
	Duration *int    `pulumi:"duration"`
	Name     *string `pulumi:"name"`
	// A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag *string `pulumi:"tag"`
}

// The set of arguments for constructing a Disk resource.
type DiskArgs struct {
	// Availability zone where cloud disk is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
	AvailabilityZone pulumi.StringInput
	// Charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour. (Default: `month`).
	ChargeType pulumi.StringPtrInput
	// The size of disk. Purchase the size of disk in GB. 20-8000 for a cloud disk, 20-8000 for SSD cloud disk . If the disk have attached to the instance, the instance will reboot automatically to make the change take effect when update the  `diskSize`.
	DiskSize pulumi.IntInput
	// The type of disk. Possible values are: `dataDisk`as cloud disk, `ssdDataDisk` as ssd cloud disk, `rssdDataDisk` as RDMA-SSD cloud disk (the `rssdDataDisk` only be supported in `cn-bj2-05`).(Default: `dataDisk`).
	DiskType pulumi.StringPtrInput
	// The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the disk will be vaild till the last day of that month.
	Duration pulumi.IntPtrInput
	Name     pulumi.StringPtrInput
	// A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrInput
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskArgs)(nil)).Elem()
}

type DiskInput interface {
	pulumi.Input

	ToDiskOutput() DiskOutput
	ToDiskOutputWithContext(ctx context.Context) DiskOutput
}

func (*Disk) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil))
}

func (i *Disk) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i *Disk) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

func (i *Disk) ToDiskPtrOutput() DiskPtrOutput {
	return i.ToDiskPtrOutputWithContext(context.Background())
}

func (i *Disk) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPtrOutput)
}

type DiskPtrInput interface {
	pulumi.Input

	ToDiskPtrOutput() DiskPtrOutput
	ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput
}

type diskPtrType DiskArgs

func (*diskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Disk)(nil))
}

func (i *diskPtrType) ToDiskPtrOutput() DiskPtrOutput {
	return i.ToDiskPtrOutputWithContext(context.Background())
}

func (i *diskPtrType) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPtrOutput)
}

// DiskArrayInput is an input type that accepts DiskArray and DiskArrayOutput values.
// You can construct a concrete instance of `DiskArrayInput` via:
//
//          DiskArray{ DiskArgs{...} }
type DiskArrayInput interface {
	pulumi.Input

	ToDiskArrayOutput() DiskArrayOutput
	ToDiskArrayOutputWithContext(context.Context) DiskArrayOutput
}

type DiskArray []DiskInput

func (DiskArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Disk)(nil))
}

func (i DiskArray) ToDiskArrayOutput() DiskArrayOutput {
	return i.ToDiskArrayOutputWithContext(context.Background())
}

func (i DiskArray) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskArrayOutput)
}

// DiskMapInput is an input type that accepts DiskMap and DiskMapOutput values.
// You can construct a concrete instance of `DiskMapInput` via:
//
//          DiskMap{ "key": DiskArgs{...} }
type DiskMapInput interface {
	pulumi.Input

	ToDiskMapOutput() DiskMapOutput
	ToDiskMapOutputWithContext(context.Context) DiskMapOutput
}

type DiskMap map[string]DiskInput

func (DiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Disk)(nil))
}

func (i DiskMap) ToDiskMapOutput() DiskMapOutput {
	return i.ToDiskMapOutputWithContext(context.Background())
}

func (i DiskMap) ToDiskMapOutputWithContext(ctx context.Context) DiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskMapOutput)
}

type DiskOutput struct {
	*pulumi.OutputState
}

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil))
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

func (o DiskOutput) ToDiskPtrOutput() DiskPtrOutput {
	return o.ToDiskPtrOutputWithContext(context.Background())
}

func (o DiskOutput) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return o.ApplyT(func(v Disk) *Disk {
		return &v
	}).(DiskPtrOutput)
}

type DiskPtrOutput struct {
	*pulumi.OutputState
}

func (DiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Disk)(nil))
}

func (o DiskPtrOutput) ToDiskPtrOutput() DiskPtrOutput {
	return o
}

func (o DiskPtrOutput) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return o
}

type DiskArrayOutput struct{ *pulumi.OutputState }

func (DiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil))
}

func (o DiskArrayOutput) ToDiskArrayOutput() DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) Index(i pulumi.IntInput) DiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Disk {
		return vs[0].([]Disk)[vs[1].(int)]
	}).(DiskOutput)
}

type DiskMapOutput struct{ *pulumi.OutputState }

func (DiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Disk)(nil))
}

func (o DiskMapOutput) ToDiskMapOutput() DiskMapOutput {
	return o
}

func (o DiskMapOutput) ToDiskMapOutputWithContext(ctx context.Context) DiskMapOutput {
	return o
}

func (o DiskMapOutput) MapIndex(k pulumi.StringInput) DiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Disk {
		return vs[0].(map[string]Disk)[vs[1].(string)]
	}).(DiskOutput)
}

func init() {
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(DiskPtrOutput{})
	pulumi.RegisterOutputType(DiskArrayOutput{})
	pulumi.RegisterOutputType(DiskMapOutput{})
}
