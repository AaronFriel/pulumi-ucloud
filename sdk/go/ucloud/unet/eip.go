// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package unet

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Elastic IP resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := unet.NewEIP(ctx, "example", &unet.EIPArgs{
// 			Bandwidth:    pulumi.Int(2),
// 			ChargeMode:   pulumi.String("bandwidth"),
// 			InternetType: pulumi.String("bgp"),
// 			Tag:          pulumi.String("tf-example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// EIP can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import ucloud:unet/eIP:EIP example eip-abcdefg
// ```
type EIP struct {
	pulumi.CustomResourceState

	// Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). The ranges for bandwidth are: 1-200 for pay by traffic, 1-800 for pay by bandwidth. (Default: `1`).
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// -(Optional) Elastic IP charge mode. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth, `shareBandwidth` as share bandwidth mode. (Default: `bandwidth`for the Elastic IP, `shareBandwidth` for the Elastic IP with share bandwidth mode).
	ChargeMode pulumi.StringOutput `pulumi:"chargeMode"`
	// Elastic IP charge type. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType pulumi.StringOutput `pulumi:"chargeType"`
	// The time of creation for EIP, formatted in RFC3339 time string.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the instance will be valid till the last day of that month.
	Duration pulumi.IntPtrOutput `pulumi:"duration"`
	// The expiration time for EIP, formatted in RFC3339 time string.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.
	InternetType pulumi.StringOutput `pulumi:"internetType"`
	// It is a nested type which documented below.
	IpSets EIPIpSetArrayOutput `pulumi:"ipSets"`
	Name   pulumi.StringOutput `pulumi:"name"`
	// Public IP address of Elastic IP.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// The remarks of the EIP. (Default: `""`).
	Remark pulumi.StringOutput `pulumi:"remark"`
	// It is a nested type which documented below.
	Resource EIPResourceOutput `pulumi:"resource"`
	// EIP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.
	Status pulumi.StringOutput `pulumi:"status"`
	// A tag assigned to Elastic IP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrOutput `pulumi:"tag"`
}

// NewEIP registers a new resource with the given unique name, arguments, and options.
func NewEIP(ctx *pulumi.Context,
	name string, args *EIPArgs, opts ...pulumi.ResourceOption) (*EIP, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InternetType == nil {
		return nil, errors.New("invalid value for required argument 'InternetType'")
	}
	var resource EIP
	err := ctx.RegisterResource("ucloud:unet/eIP:EIP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEIP gets an existing EIP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEIP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EIPState, opts ...pulumi.ResourceOption) (*EIP, error) {
	var resource EIP
	err := ctx.ReadResource("ucloud:unet/eIP:EIP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EIP resources.
type eipState struct {
	// Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). The ranges for bandwidth are: 1-200 for pay by traffic, 1-800 for pay by bandwidth. (Default: `1`).
	Bandwidth *int `pulumi:"bandwidth"`
	// -(Optional) Elastic IP charge mode. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth, `shareBandwidth` as share bandwidth mode. (Default: `bandwidth`for the Elastic IP, `shareBandwidth` for the Elastic IP with share bandwidth mode).
	ChargeMode *string `pulumi:"chargeMode"`
	// Elastic IP charge type. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType *string `pulumi:"chargeType"`
	// The time of creation for EIP, formatted in RFC3339 time string.
	CreateTime *string `pulumi:"createTime"`
	// The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the instance will be valid till the last day of that month.
	Duration *int `pulumi:"duration"`
	// The expiration time for EIP, formatted in RFC3339 time string.
	ExpireTime *string `pulumi:"expireTime"`
	// Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.
	InternetType *string `pulumi:"internetType"`
	// It is a nested type which documented below.
	IpSets []EIPIpSet `pulumi:"ipSets"`
	Name   *string    `pulumi:"name"`
	// Public IP address of Elastic IP.
	PublicIp *string `pulumi:"publicIp"`
	// The remarks of the EIP. (Default: `""`).
	Remark *string `pulumi:"remark"`
	// It is a nested type which documented below.
	Resource *EIPResource `pulumi:"resource"`
	// EIP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.
	Status *string `pulumi:"status"`
	// A tag assigned to Elastic IP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag *string `pulumi:"tag"`
}

type EIPState struct {
	// Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). The ranges for bandwidth are: 1-200 for pay by traffic, 1-800 for pay by bandwidth. (Default: `1`).
	Bandwidth pulumi.IntPtrInput
	// -(Optional) Elastic IP charge mode. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth, `shareBandwidth` as share bandwidth mode. (Default: `bandwidth`for the Elastic IP, `shareBandwidth` for the Elastic IP with share bandwidth mode).
	ChargeMode pulumi.StringPtrInput
	// Elastic IP charge type. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType pulumi.StringPtrInput
	// The time of creation for EIP, formatted in RFC3339 time string.
	CreateTime pulumi.StringPtrInput
	// The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the instance will be valid till the last day of that month.
	Duration pulumi.IntPtrInput
	// The expiration time for EIP, formatted in RFC3339 time string.
	ExpireTime pulumi.StringPtrInput
	// Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.
	InternetType pulumi.StringPtrInput
	// It is a nested type which documented below.
	IpSets EIPIpSetArrayInput
	Name   pulumi.StringPtrInput
	// Public IP address of Elastic IP.
	PublicIp pulumi.StringPtrInput
	// The remarks of the EIP. (Default: `""`).
	Remark pulumi.StringPtrInput
	// It is a nested type which documented below.
	Resource EIPResourcePtrInput
	// EIP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.
	Status pulumi.StringPtrInput
	// A tag assigned to Elastic IP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrInput
}

func (EIPState) ElementType() reflect.Type {
	return reflect.TypeOf((*eipState)(nil)).Elem()
}

type eipArgs struct {
	// Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). The ranges for bandwidth are: 1-200 for pay by traffic, 1-800 for pay by bandwidth. (Default: `1`).
	Bandwidth *int `pulumi:"bandwidth"`
	// -(Optional) Elastic IP charge mode. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth, `shareBandwidth` as share bandwidth mode. (Default: `bandwidth`for the Elastic IP, `shareBandwidth` for the Elastic IP with share bandwidth mode).
	ChargeMode *string `pulumi:"chargeMode"`
	// Elastic IP charge type. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType *string `pulumi:"chargeType"`
	// The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the instance will be valid till the last day of that month.
	Duration *int `pulumi:"duration"`
	// Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.
	InternetType string  `pulumi:"internetType"`
	Name         *string `pulumi:"name"`
	// The remarks of the EIP. (Default: `""`).
	Remark *string `pulumi:"remark"`
	// A tag assigned to Elastic IP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag *string `pulumi:"tag"`
}

// The set of arguments for constructing a EIP resource.
type EIPArgs struct {
	// Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). The ranges for bandwidth are: 1-200 for pay by traffic, 1-800 for pay by bandwidth. (Default: `1`).
	Bandwidth pulumi.IntPtrInput
	// -(Optional) Elastic IP charge mode. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth, `shareBandwidth` as share bandwidth mode. (Default: `bandwidth`for the Elastic IP, `shareBandwidth` for the Elastic IP with share bandwidth mode).
	ChargeMode pulumi.StringPtrInput
	// Elastic IP charge type. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType pulumi.StringPtrInput
	// The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the instance will be valid till the last day of that month.
	Duration pulumi.IntPtrInput
	// Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.
	InternetType pulumi.StringInput
	Name         pulumi.StringPtrInput
	// The remarks of the EIP. (Default: `""`).
	Remark pulumi.StringPtrInput
	// A tag assigned to Elastic IP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrInput
}

func (EIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eipArgs)(nil)).Elem()
}

type EIPInput interface {
	pulumi.Input

	ToEIPOutput() EIPOutput
	ToEIPOutputWithContext(ctx context.Context) EIPOutput
}

func (*EIP) ElementType() reflect.Type {
	return reflect.TypeOf((*EIP)(nil))
}

func (i *EIP) ToEIPOutput() EIPOutput {
	return i.ToEIPOutputWithContext(context.Background())
}

func (i *EIP) ToEIPOutputWithContext(ctx context.Context) EIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPOutput)
}

func (i *EIP) ToEIPPtrOutput() EIPPtrOutput {
	return i.ToEIPPtrOutputWithContext(context.Background())
}

func (i *EIP) ToEIPPtrOutputWithContext(ctx context.Context) EIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPPtrOutput)
}

type EIPPtrInput interface {
	pulumi.Input

	ToEIPPtrOutput() EIPPtrOutput
	ToEIPPtrOutputWithContext(ctx context.Context) EIPPtrOutput
}

type eipPtrType EIPArgs

func (*eipPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EIP)(nil))
}

func (i *eipPtrType) ToEIPPtrOutput() EIPPtrOutput {
	return i.ToEIPPtrOutputWithContext(context.Background())
}

func (i *eipPtrType) ToEIPPtrOutputWithContext(ctx context.Context) EIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPPtrOutput)
}

// EIPArrayInput is an input type that accepts EIPArray and EIPArrayOutput values.
// You can construct a concrete instance of `EIPArrayInput` via:
//
//          EIPArray{ EIPArgs{...} }
type EIPArrayInput interface {
	pulumi.Input

	ToEIPArrayOutput() EIPArrayOutput
	ToEIPArrayOutputWithContext(context.Context) EIPArrayOutput
}

type EIPArray []EIPInput

func (EIPArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*EIP)(nil))
}

func (i EIPArray) ToEIPArrayOutput() EIPArrayOutput {
	return i.ToEIPArrayOutputWithContext(context.Background())
}

func (i EIPArray) ToEIPArrayOutputWithContext(ctx context.Context) EIPArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPArrayOutput)
}

// EIPMapInput is an input type that accepts EIPMap and EIPMapOutput values.
// You can construct a concrete instance of `EIPMapInput` via:
//
//          EIPMap{ "key": EIPArgs{...} }
type EIPMapInput interface {
	pulumi.Input

	ToEIPMapOutput() EIPMapOutput
	ToEIPMapOutputWithContext(context.Context) EIPMapOutput
}

type EIPMap map[string]EIPInput

func (EIPMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*EIP)(nil))
}

func (i EIPMap) ToEIPMapOutput() EIPMapOutput {
	return i.ToEIPMapOutputWithContext(context.Background())
}

func (i EIPMap) ToEIPMapOutputWithContext(ctx context.Context) EIPMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPMapOutput)
}

type EIPOutput struct {
	*pulumi.OutputState
}

func (EIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EIP)(nil))
}

func (o EIPOutput) ToEIPOutput() EIPOutput {
	return o
}

func (o EIPOutput) ToEIPOutputWithContext(ctx context.Context) EIPOutput {
	return o
}

func (o EIPOutput) ToEIPPtrOutput() EIPPtrOutput {
	return o.ToEIPPtrOutputWithContext(context.Background())
}

func (o EIPOutput) ToEIPPtrOutputWithContext(ctx context.Context) EIPPtrOutput {
	return o.ApplyT(func(v EIP) *EIP {
		return &v
	}).(EIPPtrOutput)
}

type EIPPtrOutput struct {
	*pulumi.OutputState
}

func (EIPPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EIP)(nil))
}

func (o EIPPtrOutput) ToEIPPtrOutput() EIPPtrOutput {
	return o
}

func (o EIPPtrOutput) ToEIPPtrOutputWithContext(ctx context.Context) EIPPtrOutput {
	return o
}

type EIPArrayOutput struct{ *pulumi.OutputState }

func (EIPArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EIP)(nil))
}

func (o EIPArrayOutput) ToEIPArrayOutput() EIPArrayOutput {
	return o
}

func (o EIPArrayOutput) ToEIPArrayOutputWithContext(ctx context.Context) EIPArrayOutput {
	return o
}

func (o EIPArrayOutput) Index(i pulumi.IntInput) EIPOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EIP {
		return vs[0].([]EIP)[vs[1].(int)]
	}).(EIPOutput)
}

type EIPMapOutput struct{ *pulumi.OutputState }

func (EIPMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EIP)(nil))
}

func (o EIPMapOutput) ToEIPMapOutput() EIPMapOutput {
	return o
}

func (o EIPMapOutput) ToEIPMapOutputWithContext(ctx context.Context) EIPMapOutput {
	return o
}

func (o EIPMapOutput) MapIndex(k pulumi.StringInput) EIPOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EIP {
		return vs[0].(map[string]EIP)[vs[1].(string)]
	}).(EIPOutput)
}

func init() {
	pulumi.RegisterOutputType(EIPOutput{})
	pulumi.RegisterOutputType(EIPPtrOutput{})
	pulumi.RegisterOutputType(EIPArrayOutput{})
	pulumi.RegisterOutputType(EIPMapOutput{})
}
