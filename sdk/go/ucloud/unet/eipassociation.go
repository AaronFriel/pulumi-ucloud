// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package unet

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an EIP Association resource for associating Elastic IP to UHost Instance, Load Balancer, etc.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		defaultZone, err := uaccount.GetZone(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt0 := defaultZone.Zones[0].Id
// 		opt1 := "^CentOS 7.[1-2] 64"
// 		opt2 := "base"
// 		defaultImage, err := uhost.GetImage(ctx, &uhost.GetImageArgs{
// 			AvailabilityZone: &opt0,
// 			NameRegex:        &opt1,
// 			ImageType:        &opt2,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultSecurityGroup, err := unet.NewSecurityGroup(ctx, "defaultSecurityGroup", &unet.SecurityGroupArgs{
// 			Tag: pulumi.String("tf-example"),
// 			Rules: unet.SecurityGroupRuleArray{
// 				&unet.SecurityGroupRuleArgs{
// 					PortRange: pulumi.String("80"),
// 					Protocol:  pulumi.String("tcp"),
// 					CidrBlock: pulumi.String("0.0.0.0/0"),
// 					Policy:    pulumi.String("accept"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultEIP, err := unet.NewEIP(ctx, "defaultEIP", &unet.EIPArgs{
// 			Bandwidth:    pulumi.Int(2),
// 			ChargeMode:   pulumi.String("bandwidth"),
// 			Tag:          pulumi.String("tf-example"),
// 			InternetType: pulumi.String("bgp"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		web, err := uhost.NewInstance(ctx, "web", &uhost.InstanceArgs{
// 			InstanceType:     pulumi.String("n-basic-2"),
// 			AvailabilityZone: pulumi.String(defaultZone.Zones[0].Id),
// 			ImageId:          pulumi.String(defaultImage.Images[0].Id),
// 			DataDiskSize:     pulumi.Int(50),
// 			RootPassword:     pulumi.String("wA1234567"),
// 			SecurityGroup:    defaultSecurityGroup.ID(),
// 			Tag:              pulumi.String("tf-example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = unet.NewEIPAssociation(ctx, "defaultEIPAssociation", &unet.EIPAssociationArgs{
// 			ResourceId: web.ID(),
// 			EipId:      defaultEIP.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type EIPAssociation struct {
	pulumi.CustomResourceState

	// The ID of EIP.
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// The ID of resource with EIP attached.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// , attribute `resourceType` is deprecated for optimizing parameters.
	//
	// Deprecated: attribute `resource_type` is deprecated for optimizing parameters
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
}

// NewEIPAssociation registers a new resource with the given unique name, arguments, and options.
func NewEIPAssociation(ctx *pulumi.Context,
	name string, args *EIPAssociationArgs, opts ...pulumi.ResourceOption) (*EIPAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EipId == nil {
		return nil, errors.New("invalid value for required argument 'EipId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	var resource EIPAssociation
	err := ctx.RegisterResource("ucloud:unet/eIPAssociation:EIPAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEIPAssociation gets an existing EIPAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEIPAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EIPAssociationState, opts ...pulumi.ResourceOption) (*EIPAssociation, error) {
	var resource EIPAssociation
	err := ctx.ReadResource("ucloud:unet/eIPAssociation:EIPAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EIPAssociation resources.
type eipassociationState struct {
	// The ID of EIP.
	EipId *string `pulumi:"eipId"`
	// The ID of resource with EIP attached.
	ResourceId *string `pulumi:"resourceId"`
	// , attribute `resourceType` is deprecated for optimizing parameters.
	//
	// Deprecated: attribute `resource_type` is deprecated for optimizing parameters
	ResourceType *string `pulumi:"resourceType"`
}

type EIPAssociationState struct {
	// The ID of EIP.
	EipId pulumi.StringPtrInput
	// The ID of resource with EIP attached.
	ResourceId pulumi.StringPtrInput
	// , attribute `resourceType` is deprecated for optimizing parameters.
	//
	// Deprecated: attribute `resource_type` is deprecated for optimizing parameters
	ResourceType pulumi.StringPtrInput
}

func (EIPAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eipassociationState)(nil)).Elem()
}

type eipassociationArgs struct {
	// The ID of EIP.
	EipId string `pulumi:"eipId"`
	// The ID of resource with EIP attached.
	ResourceId string `pulumi:"resourceId"`
	// , attribute `resourceType` is deprecated for optimizing parameters.
	//
	// Deprecated: attribute `resource_type` is deprecated for optimizing parameters
	ResourceType *string `pulumi:"resourceType"`
}

// The set of arguments for constructing a EIPAssociation resource.
type EIPAssociationArgs struct {
	// The ID of EIP.
	EipId pulumi.StringInput
	// The ID of resource with EIP attached.
	ResourceId pulumi.StringInput
	// , attribute `resourceType` is deprecated for optimizing parameters.
	//
	// Deprecated: attribute `resource_type` is deprecated for optimizing parameters
	ResourceType pulumi.StringPtrInput
}

func (EIPAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eipassociationArgs)(nil)).Elem()
}

type EIPAssociationInput interface {
	pulumi.Input

	ToEIPAssociationOutput() EIPAssociationOutput
	ToEIPAssociationOutputWithContext(ctx context.Context) EIPAssociationOutput
}

func (*EIPAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*EIPAssociation)(nil))
}

func (i *EIPAssociation) ToEIPAssociationOutput() EIPAssociationOutput {
	return i.ToEIPAssociationOutputWithContext(context.Background())
}

func (i *EIPAssociation) ToEIPAssociationOutputWithContext(ctx context.Context) EIPAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPAssociationOutput)
}

func (i *EIPAssociation) ToEIPAssociationPtrOutput() EIPAssociationPtrOutput {
	return i.ToEIPAssociationPtrOutputWithContext(context.Background())
}

func (i *EIPAssociation) ToEIPAssociationPtrOutputWithContext(ctx context.Context) EIPAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPAssociationPtrOutput)
}

type EIPAssociationPtrInput interface {
	pulumi.Input

	ToEIPAssociationPtrOutput() EIPAssociationPtrOutput
	ToEIPAssociationPtrOutputWithContext(ctx context.Context) EIPAssociationPtrOutput
}

type eipassociationPtrType EIPAssociationArgs

func (*eipassociationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EIPAssociation)(nil))
}

func (i *eipassociationPtrType) ToEIPAssociationPtrOutput() EIPAssociationPtrOutput {
	return i.ToEIPAssociationPtrOutputWithContext(context.Background())
}

func (i *eipassociationPtrType) ToEIPAssociationPtrOutputWithContext(ctx context.Context) EIPAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPAssociationPtrOutput)
}

// EIPAssociationArrayInput is an input type that accepts EIPAssociationArray and EIPAssociationArrayOutput values.
// You can construct a concrete instance of `EIPAssociationArrayInput` via:
//
//          EIPAssociationArray{ EIPAssociationArgs{...} }
type EIPAssociationArrayInput interface {
	pulumi.Input

	ToEIPAssociationArrayOutput() EIPAssociationArrayOutput
	ToEIPAssociationArrayOutputWithContext(context.Context) EIPAssociationArrayOutput
}

type EIPAssociationArray []EIPAssociationInput

func (EIPAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*EIPAssociation)(nil))
}

func (i EIPAssociationArray) ToEIPAssociationArrayOutput() EIPAssociationArrayOutput {
	return i.ToEIPAssociationArrayOutputWithContext(context.Background())
}

func (i EIPAssociationArray) ToEIPAssociationArrayOutputWithContext(ctx context.Context) EIPAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPAssociationArrayOutput)
}

// EIPAssociationMapInput is an input type that accepts EIPAssociationMap and EIPAssociationMapOutput values.
// You can construct a concrete instance of `EIPAssociationMapInput` via:
//
//          EIPAssociationMap{ "key": EIPAssociationArgs{...} }
type EIPAssociationMapInput interface {
	pulumi.Input

	ToEIPAssociationMapOutput() EIPAssociationMapOutput
	ToEIPAssociationMapOutputWithContext(context.Context) EIPAssociationMapOutput
}

type EIPAssociationMap map[string]EIPAssociationInput

func (EIPAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*EIPAssociation)(nil))
}

func (i EIPAssociationMap) ToEIPAssociationMapOutput() EIPAssociationMapOutput {
	return i.ToEIPAssociationMapOutputWithContext(context.Background())
}

func (i EIPAssociationMap) ToEIPAssociationMapOutputWithContext(ctx context.Context) EIPAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPAssociationMapOutput)
}

type EIPAssociationOutput struct {
	*pulumi.OutputState
}

func (EIPAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EIPAssociation)(nil))
}

func (o EIPAssociationOutput) ToEIPAssociationOutput() EIPAssociationOutput {
	return o
}

func (o EIPAssociationOutput) ToEIPAssociationOutputWithContext(ctx context.Context) EIPAssociationOutput {
	return o
}

func (o EIPAssociationOutput) ToEIPAssociationPtrOutput() EIPAssociationPtrOutput {
	return o.ToEIPAssociationPtrOutputWithContext(context.Background())
}

func (o EIPAssociationOutput) ToEIPAssociationPtrOutputWithContext(ctx context.Context) EIPAssociationPtrOutput {
	return o.ApplyT(func(v EIPAssociation) *EIPAssociation {
		return &v
	}).(EIPAssociationPtrOutput)
}

type EIPAssociationPtrOutput struct {
	*pulumi.OutputState
}

func (EIPAssociationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EIPAssociation)(nil))
}

func (o EIPAssociationPtrOutput) ToEIPAssociationPtrOutput() EIPAssociationPtrOutput {
	return o
}

func (o EIPAssociationPtrOutput) ToEIPAssociationPtrOutputWithContext(ctx context.Context) EIPAssociationPtrOutput {
	return o
}

type EIPAssociationArrayOutput struct{ *pulumi.OutputState }

func (EIPAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EIPAssociation)(nil))
}

func (o EIPAssociationArrayOutput) ToEIPAssociationArrayOutput() EIPAssociationArrayOutput {
	return o
}

func (o EIPAssociationArrayOutput) ToEIPAssociationArrayOutputWithContext(ctx context.Context) EIPAssociationArrayOutput {
	return o
}

func (o EIPAssociationArrayOutput) Index(i pulumi.IntInput) EIPAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EIPAssociation {
		return vs[0].([]EIPAssociation)[vs[1].(int)]
	}).(EIPAssociationOutput)
}

type EIPAssociationMapOutput struct{ *pulumi.OutputState }

func (EIPAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EIPAssociation)(nil))
}

func (o EIPAssociationMapOutput) ToEIPAssociationMapOutput() EIPAssociationMapOutput {
	return o
}

func (o EIPAssociationMapOutput) ToEIPAssociationMapOutputWithContext(ctx context.Context) EIPAssociationMapOutput {
	return o
}

func (o EIPAssociationMapOutput) MapIndex(k pulumi.StringInput) EIPAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EIPAssociation {
		return vs[0].(map[string]EIPAssociation)[vs[1].(string)]
	}).(EIPAssociationOutput)
}

func init() {
	pulumi.RegisterOutputType(EIPAssociationOutput{})
	pulumi.RegisterOutputType(EIPAssociationPtrOutput{})
	pulumi.RegisterOutputType(EIPAssociationArrayOutput{})
	pulumi.RegisterOutputType(EIPAssociationMapOutput{})
}
