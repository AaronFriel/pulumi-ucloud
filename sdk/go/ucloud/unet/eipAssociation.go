// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package unet

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an EIP Association resource for associating Elastic IP to UHost Instance, Load Balancer, etc.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/r/eip_association.html.markdown.
type EipAssociation struct {
	pulumi.CustomResourceState

	// The ID of EIP.
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// The ID of resource with EIP attached.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// **Deprecated**, attribute `resourceType` is deprecated for optimizing parameters.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
}

// NewEipAssociation registers a new resource with the given unique name, arguments, and options.
func NewEipAssociation(ctx *pulumi.Context,
	name string, args *EipAssociationArgs, opts ...pulumi.ResourceOption) (*EipAssociation, error) {
	if args == nil || args.EipId == nil {
		return nil, errors.New("missing required argument 'EipId'")
	}
	if args == nil || args.ResourceId == nil {
		return nil, errors.New("missing required argument 'ResourceId'")
	}
	if args == nil {
		args = &EipAssociationArgs{}
	}
	var resource EipAssociation
	err := ctx.RegisterResource("ucloud:unet/eipAssociation:EipAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEipAssociation gets an existing EipAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEipAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EipAssociationState, opts ...pulumi.ResourceOption) (*EipAssociation, error) {
	var resource EipAssociation
	err := ctx.ReadResource("ucloud:unet/eipAssociation:EipAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EipAssociation resources.
type eipAssociationState struct {
	// The ID of EIP.
	EipId *string `pulumi:"eipId"`
	// The ID of resource with EIP attached.
	ResourceId *string `pulumi:"resourceId"`
	// **Deprecated**, attribute `resourceType` is deprecated for optimizing parameters.
	ResourceType *string `pulumi:"resourceType"`
}

type EipAssociationState struct {
	// The ID of EIP.
	EipId pulumi.StringPtrInput
	// The ID of resource with EIP attached.
	ResourceId pulumi.StringPtrInput
	// **Deprecated**, attribute `resourceType` is deprecated for optimizing parameters.
	ResourceType pulumi.StringPtrInput
}

func (EipAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*eipAssociationState)(nil)).Elem()
}

type eipAssociationArgs struct {
	// The ID of EIP.
	EipId string `pulumi:"eipId"`
	// The ID of resource with EIP attached.
	ResourceId string `pulumi:"resourceId"`
	// **Deprecated**, attribute `resourceType` is deprecated for optimizing parameters.
	ResourceType *string `pulumi:"resourceType"`
}

// The set of arguments for constructing a EipAssociation resource.
type EipAssociationArgs struct {
	// The ID of EIP.
	EipId pulumi.StringInput
	// The ID of resource with EIP attached.
	ResourceId pulumi.StringInput
	// **Deprecated**, attribute `resourceType` is deprecated for optimizing parameters.
	ResourceType pulumi.StringPtrInput
}

func (EipAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eipAssociationArgs)(nil)).Elem()
}
