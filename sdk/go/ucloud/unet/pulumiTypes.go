// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package unet

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type EipIpSet struct {
	// Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.
	InternetType *string `pulumi:"internetType"`
	Ip           *string `pulumi:"ip"`
}

type EipIpSetInput interface {
	pulumi.Input

	ToEipIpSetOutput() EipIpSetOutput
	ToEipIpSetOutputWithContext(context.Context) EipIpSetOutput
}

type EipIpSetArgs struct {
	// Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.
	InternetType pulumi.StringPtrInput `pulumi:"internetType"`
	Ip           pulumi.StringPtrInput `pulumi:"ip"`
}

func (EipIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EipIpSet)(nil)).Elem()
}

func (i EipIpSetArgs) ToEipIpSetOutput() EipIpSetOutput {
	return i.ToEipIpSetOutputWithContext(context.Background())
}

func (i EipIpSetArgs) ToEipIpSetOutputWithContext(ctx context.Context) EipIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipIpSetOutput)
}

type EipIpSetArrayInput interface {
	pulumi.Input

	ToEipIpSetArrayOutput() EipIpSetArrayOutput
	ToEipIpSetArrayOutputWithContext(context.Context) EipIpSetArrayOutput
}

type EipIpSetArray []EipIpSetInput

func (EipIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EipIpSet)(nil)).Elem()
}

func (i EipIpSetArray) ToEipIpSetArrayOutput() EipIpSetArrayOutput {
	return i.ToEipIpSetArrayOutputWithContext(context.Background())
}

func (i EipIpSetArray) ToEipIpSetArrayOutputWithContext(ctx context.Context) EipIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipIpSetArrayOutput)
}

type EipIpSetOutput struct{ *pulumi.OutputState }

func (EipIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EipIpSet)(nil)).Elem()
}

func (o EipIpSetOutput) ToEipIpSetOutput() EipIpSetOutput {
	return o
}

func (o EipIpSetOutput) ToEipIpSetOutputWithContext(ctx context.Context) EipIpSetOutput {
	return o
}

// Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.
func (o EipIpSetOutput) InternetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipIpSet) *string { return v.InternetType }).(pulumi.StringPtrOutput)
}

func (o EipIpSetOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipIpSet) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type EipIpSetArrayOutput struct{ *pulumi.OutputState }

func (EipIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EipIpSet)(nil)).Elem()
}

func (o EipIpSetArrayOutput) ToEipIpSetArrayOutput() EipIpSetArrayOutput {
	return o
}

func (o EipIpSetArrayOutput) ToEipIpSetArrayOutputWithContext(ctx context.Context) EipIpSetArrayOutput {
	return o
}

func (o EipIpSetArrayOutput) Index(i pulumi.IntInput) EipIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EipIpSet {
		return vs[0].([]EipIpSet)[vs[1].(int)]
	}).(EipIpSetOutput)
}

type EipResource struct {
	// The ID of the resource with EIP attached.
	Id *string `pulumi:"id"`
	// The type of resource with EIP attached. Possible values are `instance` as instance, `lb` as load balancer.
	Type *string `pulumi:"type"`
}

type EipResourceInput interface {
	pulumi.Input

	ToEipResourceOutput() EipResourceOutput
	ToEipResourceOutputWithContext(context.Context) EipResourceOutput
}

type EipResourceArgs struct {
	// The ID of the resource with EIP attached.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of resource with EIP attached. Possible values are `instance` as instance, `lb` as load balancer.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EipResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EipResource)(nil)).Elem()
}

func (i EipResourceArgs) ToEipResourceOutput() EipResourceOutput {
	return i.ToEipResourceOutputWithContext(context.Background())
}

func (i EipResourceArgs) ToEipResourceOutputWithContext(ctx context.Context) EipResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipResourceOutput)
}

func (i EipResourceArgs) ToEipResourcePtrOutput() EipResourcePtrOutput {
	return i.ToEipResourcePtrOutputWithContext(context.Background())
}

func (i EipResourceArgs) ToEipResourcePtrOutputWithContext(ctx context.Context) EipResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipResourceOutput).ToEipResourcePtrOutputWithContext(ctx)
}

type EipResourcePtrInput interface {
	pulumi.Input

	ToEipResourcePtrOutput() EipResourcePtrOutput
	ToEipResourcePtrOutputWithContext(context.Context) EipResourcePtrOutput
}

type eipResourcePtrType EipResourceArgs

func EipResourcePtr(v *EipResourceArgs) EipResourcePtrInput {
	return (*eipResourcePtrType)(v)
}

func (*eipResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EipResource)(nil)).Elem()
}

func (i *eipResourcePtrType) ToEipResourcePtrOutput() EipResourcePtrOutput {
	return i.ToEipResourcePtrOutputWithContext(context.Background())
}

func (i *eipResourcePtrType) ToEipResourcePtrOutputWithContext(ctx context.Context) EipResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipResourcePtrOutput)
}

type EipResourceOutput struct{ *pulumi.OutputState }

func (EipResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EipResource)(nil)).Elem()
}

func (o EipResourceOutput) ToEipResourceOutput() EipResourceOutput {
	return o
}

func (o EipResourceOutput) ToEipResourceOutputWithContext(ctx context.Context) EipResourceOutput {
	return o
}

func (o EipResourceOutput) ToEipResourcePtrOutput() EipResourcePtrOutput {
	return o.ToEipResourcePtrOutputWithContext(context.Background())
}

func (o EipResourceOutput) ToEipResourcePtrOutputWithContext(ctx context.Context) EipResourcePtrOutput {
	return o.ApplyT(func(v EipResource) *EipResource {
		return &v
	}).(EipResourcePtrOutput)
}

// The ID of the resource with EIP attached.
func (o EipResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of resource with EIP attached. Possible values are `instance` as instance, `lb` as load balancer.
func (o EipResourceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipResource) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EipResourcePtrOutput struct{ *pulumi.OutputState }

func (EipResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EipResource)(nil)).Elem()
}

func (o EipResourcePtrOutput) ToEipResourcePtrOutput() EipResourcePtrOutput {
	return o
}

func (o EipResourcePtrOutput) ToEipResourcePtrOutputWithContext(ctx context.Context) EipResourcePtrOutput {
	return o
}

func (o EipResourcePtrOutput) Elem() EipResourceOutput {
	return o.ApplyT(func(v *EipResource) EipResource { return *v }).(EipResourceOutput)
}

// The ID of the resource with EIP attached.
func (o EipResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of resource with EIP attached. Possible values are `instance` as instance, `lb` as load balancer.
func (o EipResourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipResource) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SecurityGroupRule struct {
	// The cidr block of source.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Authorization policy. Possible values are: `accept`, `drop`.
	Policy *string `pulumi:"policy"`
	// The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).
	PortRange *string `pulumi:"portRange"`
	// Rule priority. Possible values are: `high`, `medium`, `low`.
	Priority *string `pulumi:"priority"`
	// The protocol. Possible values are: `tcp`, `udp`, `icmp`, `gre`.
	Protocol *string `pulumi:"protocol"`
}

type SecurityGroupRuleInput interface {
	pulumi.Input

	ToSecurityGroupRuleOutput() SecurityGroupRuleOutput
	ToSecurityGroupRuleOutputWithContext(context.Context) SecurityGroupRuleOutput
}

type SecurityGroupRuleArgs struct {
	// The cidr block of source.
	CidrBlock pulumi.StringPtrInput `pulumi:"cidrBlock"`
	// Authorization policy. Possible values are: `accept`, `drop`.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// Rule priority. Possible values are: `high`, `medium`, `low`.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The protocol. Possible values are: `tcp`, `udp`, `icmp`, `gre`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (SecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleArgs) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return i.ToSecurityGroupRuleOutputWithContext(context.Background())
}

func (i SecurityGroupRuleArgs) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleOutput)
}

type SecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput
	ToSecurityGroupRuleArrayOutputWithContext(context.Context) SecurityGroupRuleArrayOutput
}

type SecurityGroupRuleArray []SecurityGroupRuleInput

func (SecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRule)(nil)).Elem()
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return i.ToSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRuleArray) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRuleArrayOutput)
}

type SecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutput() SecurityGroupRuleOutput {
	return o
}

func (o SecurityGroupRuleOutput) ToSecurityGroupRuleOutputWithContext(ctx context.Context) SecurityGroupRuleOutput {
	return o
}

// The cidr block of source.
func (o SecurityGroupRuleOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRule) *string { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// Authorization policy. Possible values are: `accept`, `drop`.
func (o SecurityGroupRuleOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRule) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).
func (o SecurityGroupRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// Rule priority. Possible values are: `high`, `medium`, `low`.
func (o SecurityGroupRuleOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRule) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The protocol. Possible values are: `tcp`, `udp`, `icmp`, `gre`.
func (o SecurityGroupRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type SecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRule)(nil)).Elem()
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutput() SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) ToSecurityGroupRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRuleArrayOutput {
	return o
}

func (o SecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupRule {
		return vs[0].([]SecurityGroupRule)[vs[1].(int)]
	}).(SecurityGroupRuleOutput)
}

type LookupEipsEip struct {
	// Maximum bandwidth to the elastic public network, measured in Mbps.
	Bandwidth int `pulumi:"bandwidth"`
	// The charge mode of Elastic IP. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth.
	ChargeMode string `pulumi:"chargeMode"`
	// The charge type of Elastic IP. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour.
	ChargeType string `pulumi:"chargeType"`
	// The creation time of Elastic IP, formatted in RFC3339 time string.
	CreateTime string `pulumi:"createTime"`
	// The expiration time for Elastic IP, formatted in RFC3339 time string.
	ExpireTime string `pulumi:"expireTime"`
	// It is a nested type which documented below.
	IpSets []LookupEipsEipIpSet `pulumi:"ipSets"`
	// The name of Elastic IP.
	Name string `pulumi:"name"`
	// The remarks of Elastic IP.
	Remark string `pulumi:"remark"`
	// Elastic IP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.
	Status string `pulumi:"status"`
	// A tag assigned to Elastic IP.
	Tag string `pulumi:"tag"`
}

type LookupEipsEipInput interface {
	pulumi.Input

	ToLookupEipsEipOutput() LookupEipsEipOutput
	ToLookupEipsEipOutputWithContext(context.Context) LookupEipsEipOutput
}

type LookupEipsEipArgs struct {
	// Maximum bandwidth to the elastic public network, measured in Mbps.
	Bandwidth pulumi.IntInput `pulumi:"bandwidth"`
	// The charge mode of Elastic IP. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth.
	ChargeMode pulumi.StringInput `pulumi:"chargeMode"`
	// The charge type of Elastic IP. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The creation time of Elastic IP, formatted in RFC3339 time string.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The expiration time for Elastic IP, formatted in RFC3339 time string.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	// It is a nested type which documented below.
	IpSets LookupEipsEipIpSetArrayInput `pulumi:"ipSets"`
	// The name of Elastic IP.
	Name pulumi.StringInput `pulumi:"name"`
	// The remarks of Elastic IP.
	Remark pulumi.StringInput `pulumi:"remark"`
	// Elastic IP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.
	Status pulumi.StringInput `pulumi:"status"`
	// A tag assigned to Elastic IP.
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (LookupEipsEipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEipsEip)(nil)).Elem()
}

func (i LookupEipsEipArgs) ToLookupEipsEipOutput() LookupEipsEipOutput {
	return i.ToLookupEipsEipOutputWithContext(context.Background())
}

func (i LookupEipsEipArgs) ToLookupEipsEipOutputWithContext(ctx context.Context) LookupEipsEipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupEipsEipOutput)
}

type LookupEipsEipArrayInput interface {
	pulumi.Input

	ToLookupEipsEipArrayOutput() LookupEipsEipArrayOutput
	ToLookupEipsEipArrayOutputWithContext(context.Context) LookupEipsEipArrayOutput
}

type LookupEipsEipArray []LookupEipsEipInput

func (LookupEipsEipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupEipsEip)(nil)).Elem()
}

func (i LookupEipsEipArray) ToLookupEipsEipArrayOutput() LookupEipsEipArrayOutput {
	return i.ToLookupEipsEipArrayOutputWithContext(context.Background())
}

func (i LookupEipsEipArray) ToLookupEipsEipArrayOutputWithContext(ctx context.Context) LookupEipsEipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupEipsEipArrayOutput)
}

type LookupEipsEipOutput struct{ *pulumi.OutputState }

func (LookupEipsEipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEipsEip)(nil)).Elem()
}

func (o LookupEipsEipOutput) ToLookupEipsEipOutput() LookupEipsEipOutput {
	return o
}

func (o LookupEipsEipOutput) ToLookupEipsEipOutputWithContext(ctx context.Context) LookupEipsEipOutput {
	return o
}

// Maximum bandwidth to the elastic public network, measured in Mbps.
func (o LookupEipsEipOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEipsEip) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// The charge mode of Elastic IP. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth.
func (o LookupEipsEipOutput) ChargeMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipsEip) string { return v.ChargeMode }).(pulumi.StringOutput)
}

// The charge type of Elastic IP. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour.
func (o LookupEipsEipOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipsEip) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The creation time of Elastic IP, formatted in RFC3339 time string.
func (o LookupEipsEipOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipsEip) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The expiration time for Elastic IP, formatted in RFC3339 time string.
func (o LookupEipsEipOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipsEip) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// It is a nested type which documented below.
func (o LookupEipsEipOutput) IpSets() LookupEipsEipIpSetArrayOutput {
	return o.ApplyT(func(v LookupEipsEip) []LookupEipsEipIpSet { return v.IpSets }).(LookupEipsEipIpSetArrayOutput)
}

// The name of Elastic IP.
func (o LookupEipsEipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipsEip) string { return v.Name }).(pulumi.StringOutput)
}

// The remarks of Elastic IP.
func (o LookupEipsEipOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipsEip) string { return v.Remark }).(pulumi.StringOutput)
}

// Elastic IP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.
func (o LookupEipsEipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipsEip) string { return v.Status }).(pulumi.StringOutput)
}

// A tag assigned to Elastic IP.
func (o LookupEipsEipOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipsEip) string { return v.Tag }).(pulumi.StringOutput)
}

type LookupEipsEipArrayOutput struct{ *pulumi.OutputState }

func (LookupEipsEipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupEipsEip)(nil)).Elem()
}

func (o LookupEipsEipArrayOutput) ToLookupEipsEipArrayOutput() LookupEipsEipArrayOutput {
	return o
}

func (o LookupEipsEipArrayOutput) ToLookupEipsEipArrayOutputWithContext(ctx context.Context) LookupEipsEipArrayOutput {
	return o
}

func (o LookupEipsEipArrayOutput) Index(i pulumi.IntInput) LookupEipsEipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LookupEipsEip {
		return vs[0].([]LookupEipsEip)[vs[1].(int)]
	}).(LookupEipsEipOutput)
}

type LookupEipsEipIpSet struct {
	// Type of Elastic IP routes.
	InternetType string `pulumi:"internetType"`
	// Elastic IP address.
	Ip string `pulumi:"ip"`
}

type LookupEipsEipIpSetInput interface {
	pulumi.Input

	ToLookupEipsEipIpSetOutput() LookupEipsEipIpSetOutput
	ToLookupEipsEipIpSetOutputWithContext(context.Context) LookupEipsEipIpSetOutput
}

type LookupEipsEipIpSetArgs struct {
	// Type of Elastic IP routes.
	InternetType pulumi.StringInput `pulumi:"internetType"`
	// Elastic IP address.
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (LookupEipsEipIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEipsEipIpSet)(nil)).Elem()
}

func (i LookupEipsEipIpSetArgs) ToLookupEipsEipIpSetOutput() LookupEipsEipIpSetOutput {
	return i.ToLookupEipsEipIpSetOutputWithContext(context.Background())
}

func (i LookupEipsEipIpSetArgs) ToLookupEipsEipIpSetOutputWithContext(ctx context.Context) LookupEipsEipIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupEipsEipIpSetOutput)
}

type LookupEipsEipIpSetArrayInput interface {
	pulumi.Input

	ToLookupEipsEipIpSetArrayOutput() LookupEipsEipIpSetArrayOutput
	ToLookupEipsEipIpSetArrayOutputWithContext(context.Context) LookupEipsEipIpSetArrayOutput
}

type LookupEipsEipIpSetArray []LookupEipsEipIpSetInput

func (LookupEipsEipIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupEipsEipIpSet)(nil)).Elem()
}

func (i LookupEipsEipIpSetArray) ToLookupEipsEipIpSetArrayOutput() LookupEipsEipIpSetArrayOutput {
	return i.ToLookupEipsEipIpSetArrayOutputWithContext(context.Background())
}

func (i LookupEipsEipIpSetArray) ToLookupEipsEipIpSetArrayOutputWithContext(ctx context.Context) LookupEipsEipIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupEipsEipIpSetArrayOutput)
}

type LookupEipsEipIpSetOutput struct{ *pulumi.OutputState }

func (LookupEipsEipIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEipsEipIpSet)(nil)).Elem()
}

func (o LookupEipsEipIpSetOutput) ToLookupEipsEipIpSetOutput() LookupEipsEipIpSetOutput {
	return o
}

func (o LookupEipsEipIpSetOutput) ToLookupEipsEipIpSetOutputWithContext(ctx context.Context) LookupEipsEipIpSetOutput {
	return o
}

// Type of Elastic IP routes.
func (o LookupEipsEipIpSetOutput) InternetType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipsEipIpSet) string { return v.InternetType }).(pulumi.StringOutput)
}

// Elastic IP address.
func (o LookupEipsEipIpSetOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipsEipIpSet) string { return v.Ip }).(pulumi.StringOutput)
}

type LookupEipsEipIpSetArrayOutput struct{ *pulumi.OutputState }

func (LookupEipsEipIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupEipsEipIpSet)(nil)).Elem()
}

func (o LookupEipsEipIpSetArrayOutput) ToLookupEipsEipIpSetArrayOutput() LookupEipsEipIpSetArrayOutput {
	return o
}

func (o LookupEipsEipIpSetArrayOutput) ToLookupEipsEipIpSetArrayOutputWithContext(ctx context.Context) LookupEipsEipIpSetArrayOutput {
	return o
}

func (o LookupEipsEipIpSetArrayOutput) Index(i pulumi.IntInput) LookupEipsEipIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LookupEipsEipIpSet {
		return vs[0].([]LookupEipsEipIpSet)[vs[1].(int)]
	}).(LookupEipsEipIpSetOutput)
}

type LookupSecurityGroupsSecurityGroup struct {
	// The time of creation for the security group, formatted in RFC3339 time string.
	CreateTime string `pulumi:"createTime"`
	// The ID of Security Group.
	Id string `pulumi:"id"`
	// The name of Security Group.
	Name string `pulumi:"name"`
	// The remarks of the security group.
	Remark string `pulumi:"remark"`
	// It is a nested type which documented below.
	Rules []LookupSecurityGroupsSecurityGroupRule `pulumi:"rules"`
	// A tag assigned to the security group.
	Tag string `pulumi:"tag"`
	// The type of Security Group. Possible values are: `recommendWeb` as the default Web security group that UCloud recommend to users, default opened port include 80, 443, 22, 3389, `recommendNonWeb` as the default non Web security group that UCloud recommend to users, default opened port include 22, 3389, `userDefined` as the security groups defined by users. You may refer to [security group](https://docs.ucloud.cn/network/firewall/firewall.html).
	Type string `pulumi:"type"`
}

type LookupSecurityGroupsSecurityGroupInput interface {
	pulumi.Input

	ToLookupSecurityGroupsSecurityGroupOutput() LookupSecurityGroupsSecurityGroupOutput
	ToLookupSecurityGroupsSecurityGroupOutputWithContext(context.Context) LookupSecurityGroupsSecurityGroupOutput
}

type LookupSecurityGroupsSecurityGroupArgs struct {
	// The time of creation for the security group, formatted in RFC3339 time string.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ID of Security Group.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of Security Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The remarks of the security group.
	Remark pulumi.StringInput `pulumi:"remark"`
	// It is a nested type which documented below.
	Rules LookupSecurityGroupsSecurityGroupRuleArrayInput `pulumi:"rules"`
	// A tag assigned to the security group.
	Tag pulumi.StringInput `pulumi:"tag"`
	// The type of Security Group. Possible values are: `recommendWeb` as the default Web security group that UCloud recommend to users, default opened port include 80, 443, 22, 3389, `recommendNonWeb` as the default non Web security group that UCloud recommend to users, default opened port include 22, 3389, `userDefined` as the security groups defined by users. You may refer to [security group](https://docs.ucloud.cn/network/firewall/firewall.html).
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupSecurityGroupsSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityGroupsSecurityGroup)(nil)).Elem()
}

func (i LookupSecurityGroupsSecurityGroupArgs) ToLookupSecurityGroupsSecurityGroupOutput() LookupSecurityGroupsSecurityGroupOutput {
	return i.ToLookupSecurityGroupsSecurityGroupOutputWithContext(context.Background())
}

func (i LookupSecurityGroupsSecurityGroupArgs) ToLookupSecurityGroupsSecurityGroupOutputWithContext(ctx context.Context) LookupSecurityGroupsSecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupSecurityGroupsSecurityGroupOutput)
}

type LookupSecurityGroupsSecurityGroupArrayInput interface {
	pulumi.Input

	ToLookupSecurityGroupsSecurityGroupArrayOutput() LookupSecurityGroupsSecurityGroupArrayOutput
	ToLookupSecurityGroupsSecurityGroupArrayOutputWithContext(context.Context) LookupSecurityGroupsSecurityGroupArrayOutput
}

type LookupSecurityGroupsSecurityGroupArray []LookupSecurityGroupsSecurityGroupInput

func (LookupSecurityGroupsSecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupSecurityGroupsSecurityGroup)(nil)).Elem()
}

func (i LookupSecurityGroupsSecurityGroupArray) ToLookupSecurityGroupsSecurityGroupArrayOutput() LookupSecurityGroupsSecurityGroupArrayOutput {
	return i.ToLookupSecurityGroupsSecurityGroupArrayOutputWithContext(context.Background())
}

func (i LookupSecurityGroupsSecurityGroupArray) ToLookupSecurityGroupsSecurityGroupArrayOutputWithContext(ctx context.Context) LookupSecurityGroupsSecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupSecurityGroupsSecurityGroupArrayOutput)
}

type LookupSecurityGroupsSecurityGroupOutput struct{ *pulumi.OutputState }

func (LookupSecurityGroupsSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityGroupsSecurityGroup)(nil)).Elem()
}

func (o LookupSecurityGroupsSecurityGroupOutput) ToLookupSecurityGroupsSecurityGroupOutput() LookupSecurityGroupsSecurityGroupOutput {
	return o
}

func (o LookupSecurityGroupsSecurityGroupOutput) ToLookupSecurityGroupsSecurityGroupOutputWithContext(ctx context.Context) LookupSecurityGroupsSecurityGroupOutput {
	return o
}

// The time of creation for the security group, formatted in RFC3339 time string.
func (o LookupSecurityGroupsSecurityGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroup) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of Security Group.
func (o LookupSecurityGroupsSecurityGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroup) string { return v.Id }).(pulumi.StringOutput)
}

// The name of Security Group.
func (o LookupSecurityGroupsSecurityGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroup) string { return v.Name }).(pulumi.StringOutput)
}

// The remarks of the security group.
func (o LookupSecurityGroupsSecurityGroupOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroup) string { return v.Remark }).(pulumi.StringOutput)
}

// It is a nested type which documented below.
func (o LookupSecurityGroupsSecurityGroupOutput) Rules() LookupSecurityGroupsSecurityGroupRuleArrayOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroup) []LookupSecurityGroupsSecurityGroupRule { return v.Rules }).(LookupSecurityGroupsSecurityGroupRuleArrayOutput)
}

// A tag assigned to the security group.
func (o LookupSecurityGroupsSecurityGroupOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroup) string { return v.Tag }).(pulumi.StringOutput)
}

// The type of Security Group. Possible values are: `recommendWeb` as the default Web security group that UCloud recommend to users, default opened port include 80, 443, 22, 3389, `recommendNonWeb` as the default non Web security group that UCloud recommend to users, default opened port include 22, 3389, `userDefined` as the security groups defined by users. You may refer to [security group](https://docs.ucloud.cn/network/firewall/firewall.html).
func (o LookupSecurityGroupsSecurityGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroup) string { return v.Type }).(pulumi.StringOutput)
}

type LookupSecurityGroupsSecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (LookupSecurityGroupsSecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupSecurityGroupsSecurityGroup)(nil)).Elem()
}

func (o LookupSecurityGroupsSecurityGroupArrayOutput) ToLookupSecurityGroupsSecurityGroupArrayOutput() LookupSecurityGroupsSecurityGroupArrayOutput {
	return o
}

func (o LookupSecurityGroupsSecurityGroupArrayOutput) ToLookupSecurityGroupsSecurityGroupArrayOutputWithContext(ctx context.Context) LookupSecurityGroupsSecurityGroupArrayOutput {
	return o
}

func (o LookupSecurityGroupsSecurityGroupArrayOutput) Index(i pulumi.IntInput) LookupSecurityGroupsSecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LookupSecurityGroupsSecurityGroup {
		return vs[0].([]LookupSecurityGroupsSecurityGroup)[vs[1].(int)]
	}).(LookupSecurityGroupsSecurityGroupOutput)
}

type LookupSecurityGroupsSecurityGroupRule struct {
	// The cidr block of source.
	CidrBlock string `pulumi:"cidrBlock"`
	// Authorization policy. Can be either `accept` or `drop`.
	Policy string `pulumi:"policy"`
	// The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).
	PortRange string `pulumi:"portRange"`
	// Rule priority. Can be `high`, `medium`, `low`.
	Priority string `pulumi:"priority"`
	// The protocol. Can be `tcp`, `udp`, `icmp`, `gre`.
	Protocol string `pulumi:"protocol"`
}

type LookupSecurityGroupsSecurityGroupRuleInput interface {
	pulumi.Input

	ToLookupSecurityGroupsSecurityGroupRuleOutput() LookupSecurityGroupsSecurityGroupRuleOutput
	ToLookupSecurityGroupsSecurityGroupRuleOutputWithContext(context.Context) LookupSecurityGroupsSecurityGroupRuleOutput
}

type LookupSecurityGroupsSecurityGroupRuleArgs struct {
	// The cidr block of source.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// Authorization policy. Can be either `accept` or `drop`.
	Policy pulumi.StringInput `pulumi:"policy"`
	// The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).
	PortRange pulumi.StringInput `pulumi:"portRange"`
	// Rule priority. Can be `high`, `medium`, `low`.
	Priority pulumi.StringInput `pulumi:"priority"`
	// The protocol. Can be `tcp`, `udp`, `icmp`, `gre`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (LookupSecurityGroupsSecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityGroupsSecurityGroupRule)(nil)).Elem()
}

func (i LookupSecurityGroupsSecurityGroupRuleArgs) ToLookupSecurityGroupsSecurityGroupRuleOutput() LookupSecurityGroupsSecurityGroupRuleOutput {
	return i.ToLookupSecurityGroupsSecurityGroupRuleOutputWithContext(context.Background())
}

func (i LookupSecurityGroupsSecurityGroupRuleArgs) ToLookupSecurityGroupsSecurityGroupRuleOutputWithContext(ctx context.Context) LookupSecurityGroupsSecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupSecurityGroupsSecurityGroupRuleOutput)
}

type LookupSecurityGroupsSecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToLookupSecurityGroupsSecurityGroupRuleArrayOutput() LookupSecurityGroupsSecurityGroupRuleArrayOutput
	ToLookupSecurityGroupsSecurityGroupRuleArrayOutputWithContext(context.Context) LookupSecurityGroupsSecurityGroupRuleArrayOutput
}

type LookupSecurityGroupsSecurityGroupRuleArray []LookupSecurityGroupsSecurityGroupRuleInput

func (LookupSecurityGroupsSecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupSecurityGroupsSecurityGroupRule)(nil)).Elem()
}

func (i LookupSecurityGroupsSecurityGroupRuleArray) ToLookupSecurityGroupsSecurityGroupRuleArrayOutput() LookupSecurityGroupsSecurityGroupRuleArrayOutput {
	return i.ToLookupSecurityGroupsSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i LookupSecurityGroupsSecurityGroupRuleArray) ToLookupSecurityGroupsSecurityGroupRuleArrayOutputWithContext(ctx context.Context) LookupSecurityGroupsSecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupSecurityGroupsSecurityGroupRuleArrayOutput)
}

type LookupSecurityGroupsSecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (LookupSecurityGroupsSecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityGroupsSecurityGroupRule)(nil)).Elem()
}

func (o LookupSecurityGroupsSecurityGroupRuleOutput) ToLookupSecurityGroupsSecurityGroupRuleOutput() LookupSecurityGroupsSecurityGroupRuleOutput {
	return o
}

func (o LookupSecurityGroupsSecurityGroupRuleOutput) ToLookupSecurityGroupsSecurityGroupRuleOutputWithContext(ctx context.Context) LookupSecurityGroupsSecurityGroupRuleOutput {
	return o
}

// The cidr block of source.
func (o LookupSecurityGroupsSecurityGroupRuleOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroupRule) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// Authorization policy. Can be either `accept` or `drop`.
func (o LookupSecurityGroupsSecurityGroupRuleOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroupRule) string { return v.Policy }).(pulumi.StringOutput)
}

// The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).
func (o LookupSecurityGroupsSecurityGroupRuleOutput) PortRange() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroupRule) string { return v.PortRange }).(pulumi.StringOutput)
}

// Rule priority. Can be `high`, `medium`, `low`.
func (o LookupSecurityGroupsSecurityGroupRuleOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroupRule) string { return v.Priority }).(pulumi.StringOutput)
}

// The protocol. Can be `tcp`, `udp`, `icmp`, `gre`.
func (o LookupSecurityGroupsSecurityGroupRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityGroupsSecurityGroupRule) string { return v.Protocol }).(pulumi.StringOutput)
}

type LookupSecurityGroupsSecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (LookupSecurityGroupsSecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupSecurityGroupsSecurityGroupRule)(nil)).Elem()
}

func (o LookupSecurityGroupsSecurityGroupRuleArrayOutput) ToLookupSecurityGroupsSecurityGroupRuleArrayOutput() LookupSecurityGroupsSecurityGroupRuleArrayOutput {
	return o
}

func (o LookupSecurityGroupsSecurityGroupRuleArrayOutput) ToLookupSecurityGroupsSecurityGroupRuleArrayOutputWithContext(ctx context.Context) LookupSecurityGroupsSecurityGroupRuleArrayOutput {
	return o
}

func (o LookupSecurityGroupsSecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) LookupSecurityGroupsSecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LookupSecurityGroupsSecurityGroupRule {
		return vs[0].([]LookupSecurityGroupsSecurityGroupRule)[vs[1].(int)]
	}).(LookupSecurityGroupsSecurityGroupRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(EipIpSetOutput{})
	pulumi.RegisterOutputType(EipIpSetArrayOutput{})
	pulumi.RegisterOutputType(EipResourceOutput{})
	pulumi.RegisterOutputType(EipResourcePtrOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(LookupEipsEipOutput{})
	pulumi.RegisterOutputType(LookupEipsEipArrayOutput{})
	pulumi.RegisterOutputType(LookupEipsEipIpSetOutput{})
	pulumi.RegisterOutputType(LookupEipsEipIpSetArrayOutput{})
	pulumi.RegisterOutputType(LookupSecurityGroupsSecurityGroupOutput{})
	pulumi.RegisterOutputType(LookupSecurityGroupsSecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(LookupSecurityGroupsSecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(LookupSecurityGroupsSecurityGroupRuleArrayOutput{})
}
