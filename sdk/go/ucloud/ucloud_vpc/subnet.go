// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ucloud_vpc

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Subnet resource under VPC resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/r/subnet.html.markdown.
type Subnet struct {
	s *pulumi.ResourceState
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cidrBlock"] = nil
		inputs["name"] = nil
		inputs["remark"] = nil
		inputs["tag"] = nil
		inputs["vpcId"] = nil
	} else {
		inputs["cidrBlock"] = args.CidrBlock
		inputs["name"] = args.Name
		inputs["remark"] = args.Remark
		inputs["tag"] = args.Tag
		inputs["vpcId"] = args.VpcId
	}
	inputs["createTime"] = nil
	s, err := ctx.RegisterResource("ucloud:ucloud_vpc/subnet:Subnet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetState, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cidrBlock"] = state.CidrBlock
		inputs["createTime"] = state.CreateTime
		inputs["name"] = state.Name
		inputs["remark"] = state.Remark
		inputs["tag"] = state.Tag
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("ucloud:ucloud_vpc/subnet:Subnet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subnet) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subnet) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The cidr block of the desired subnet, format in "0.0.0.0/0", such as: `192.168.0.0/24`.
func (r *Subnet) CidrBlock() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cidrBlock"])
}

// The time of creation of subnet, formatted in RFC3339 time string.
func (r *Subnet) CreateTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createTime"])
}

func (r *Subnet) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The remarks of the subnet. (Default: `""`).
func (r *Subnet) Remark() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["remark"])
}

// A tag assigned to subnet, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
func (r *Subnet) Tag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tag"])
}

// The id of the VPC that the desired subnet belongs to.
func (r *Subnet) VpcId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering Subnet resources.
type SubnetState struct {
	// The cidr block of the desired subnet, format in "0.0.0.0/0", such as: `192.168.0.0/24`.
	CidrBlock interface{}
	// The time of creation of subnet, formatted in RFC3339 time string.
	CreateTime interface{}
	Name       interface{}
	// The remarks of the subnet. (Default: `""`).
	Remark interface{}
	// A tag assigned to subnet, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag interface{}
	// The id of the VPC that the desired subnet belongs to.
	VpcId interface{}
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// The cidr block of the desired subnet, format in "0.0.0.0/0", such as: `192.168.0.0/24`.
	CidrBlock interface{}
	Name      interface{}
	// The remarks of the subnet. (Default: `""`).
	Remark interface{}
	// A tag assigned to subnet, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag interface{}
	// The id of the VPC that the desired subnet belongs to.
	VpcId interface{}
}
