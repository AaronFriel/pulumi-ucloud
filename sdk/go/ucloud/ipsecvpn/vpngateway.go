// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ipsecvpn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VPN Gateway resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ipsecvpn"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooVPC, err := vpc.NewVPC(ctx, "fooVPC", &vpc.VPCArgs{
// 			Tag: pulumi.String("tf-acc"),
// 			CidrBlocks: pulumi.StringArray{
// 				pulumi.String("192.168.0.0/16"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooEIP, err := unet.NewEIP(ctx, "fooEIP", &unet.EIPArgs{
// 			Bandwidth:    pulumi.Int(1),
// 			InternetType: pulumi.String("bgp"),
// 			ChargeMode:   pulumi.String("bandwidth"),
// 			Tag:          pulumi.String("tf-acc"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ipsecvpn.NewVPNGateway(ctx, "fooVPNGateway", &ipsecvpn.VPNGatewayArgs{
// 			VpcId: fooVPC.ID(),
// 			Grade: pulumi.String("enhanced"),
// 			EipId: fooEIP.ID(),
// 			Tag:   pulumi.String("tf-acc"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VPN Gateway can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import ucloud:ipsecvpn/vPNGateway:VPNGateway example vpngw-abc123456
// ```
type VPNGateway struct {
	pulumi.CustomResourceState

	// The charge type of VPN Gateway, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType pulumi.StringOutput `pulumi:"chargeType"`
	// The creation time for VPN Gateway, formatted in RFC3339 time string.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The duration that you will buy the VPN Gateway (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).
	Duration pulumi.IntPtrOutput `pulumi:"duration"`
	// The ID of eip associate to the VPN Gateway.
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// The expiration time for VPN Gateway, formatted in RFC3339 time string.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// The type of the VPN Gateway. Possible values: `standard`, `enhanced`. `standard` recommended application scenario: Applicable to services with bidirectional peak bandwidth of 1M~50M; `enhanced` recommended application scenario: Suitable for services with bidirectional peak bandwidths of 50M~100M.
	Grade pulumi.StringOutput `pulumi:"grade"`
	Name  pulumi.StringOutput `pulumi:"name"`
	// The remarks of the VPN Gateway. (Default: `""`).
	Remark pulumi.StringOutput `pulumi:"remark"`
	// A tag assigned to VPN Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	// * ``
	Tag pulumi.StringPtrOutput `pulumi:"tag"`
	// The ID of VPC linked to the VPN Gateway.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVPNGateway registers a new resource with the given unique name, arguments, and options.
func NewVPNGateway(ctx *pulumi.Context,
	name string, args *VPNGatewayArgs, opts ...pulumi.ResourceOption) (*VPNGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EipId == nil {
		return nil, errors.New("invalid value for required argument 'EipId'")
	}
	if args.Grade == nil {
		return nil, errors.New("invalid value for required argument 'Grade'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource VPNGateway
	err := ctx.RegisterResource("ucloud:ipsecvpn/vPNGateway:VPNGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPNGateway gets an existing VPNGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPNGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPNGatewayState, opts ...pulumi.ResourceOption) (*VPNGateway, error) {
	var resource VPNGateway
	err := ctx.ReadResource("ucloud:ipsecvpn/vPNGateway:VPNGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPNGateway resources.
type vpngatewayState struct {
	// The charge type of VPN Gateway, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType *string `pulumi:"chargeType"`
	// The creation time for VPN Gateway, formatted in RFC3339 time string.
	CreateTime *string `pulumi:"createTime"`
	// The duration that you will buy the VPN Gateway (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).
	Duration *int `pulumi:"duration"`
	// The ID of eip associate to the VPN Gateway.
	EipId *string `pulumi:"eipId"`
	// The expiration time for VPN Gateway, formatted in RFC3339 time string.
	ExpireTime *string `pulumi:"expireTime"`
	// The type of the VPN Gateway. Possible values: `standard`, `enhanced`. `standard` recommended application scenario: Applicable to services with bidirectional peak bandwidth of 1M~50M; `enhanced` recommended application scenario: Suitable for services with bidirectional peak bandwidths of 50M~100M.
	Grade *string `pulumi:"grade"`
	Name  *string `pulumi:"name"`
	// The remarks of the VPN Gateway. (Default: `""`).
	Remark *string `pulumi:"remark"`
	// A tag assigned to VPN Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	// * ``
	Tag *string `pulumi:"tag"`
	// The ID of VPC linked to the VPN Gateway.
	VpcId *string `pulumi:"vpcId"`
}

type VPNGatewayState struct {
	// The charge type of VPN Gateway, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType pulumi.StringPtrInput
	// The creation time for VPN Gateway, formatted in RFC3339 time string.
	CreateTime pulumi.StringPtrInput
	// The duration that you will buy the VPN Gateway (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).
	Duration pulumi.IntPtrInput
	// The ID of eip associate to the VPN Gateway.
	EipId pulumi.StringPtrInput
	// The expiration time for VPN Gateway, formatted in RFC3339 time string.
	ExpireTime pulumi.StringPtrInput
	// The type of the VPN Gateway. Possible values: `standard`, `enhanced`. `standard` recommended application scenario: Applicable to services with bidirectional peak bandwidth of 1M~50M; `enhanced` recommended application scenario: Suitable for services with bidirectional peak bandwidths of 50M~100M.
	Grade pulumi.StringPtrInput
	Name  pulumi.StringPtrInput
	// The remarks of the VPN Gateway. (Default: `""`).
	Remark pulumi.StringPtrInput
	// A tag assigned to VPN Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	// * ``
	Tag pulumi.StringPtrInput
	// The ID of VPC linked to the VPN Gateway.
	VpcId pulumi.StringPtrInput
}

func (VPNGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpngatewayState)(nil)).Elem()
}

type vpngatewayArgs struct {
	// The charge type of VPN Gateway, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType *string `pulumi:"chargeType"`
	// The duration that you will buy the VPN Gateway (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).
	Duration *int `pulumi:"duration"`
	// The ID of eip associate to the VPN Gateway.
	EipId string `pulumi:"eipId"`
	// The type of the VPN Gateway. Possible values: `standard`, `enhanced`. `standard` recommended application scenario: Applicable to services with bidirectional peak bandwidth of 1M~50M; `enhanced` recommended application scenario: Suitable for services with bidirectional peak bandwidths of 50M~100M.
	Grade string  `pulumi:"grade"`
	Name  *string `pulumi:"name"`
	// The remarks of the VPN Gateway. (Default: `""`).
	Remark *string `pulumi:"remark"`
	// A tag assigned to VPN Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	// * ``
	Tag *string `pulumi:"tag"`
	// The ID of VPC linked to the VPN Gateway.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VPNGateway resource.
type VPNGatewayArgs struct {
	// The charge type of VPN Gateway, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType pulumi.StringPtrInput
	// The duration that you will buy the VPN Gateway (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).
	Duration pulumi.IntPtrInput
	// The ID of eip associate to the VPN Gateway.
	EipId pulumi.StringInput
	// The type of the VPN Gateway. Possible values: `standard`, `enhanced`. `standard` recommended application scenario: Applicable to services with bidirectional peak bandwidth of 1M~50M; `enhanced` recommended application scenario: Suitable for services with bidirectional peak bandwidths of 50M~100M.
	Grade pulumi.StringInput
	Name  pulumi.StringPtrInput
	// The remarks of the VPN Gateway. (Default: `""`).
	Remark pulumi.StringPtrInput
	// A tag assigned to VPN Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	// * ``
	Tag pulumi.StringPtrInput
	// The ID of VPC linked to the VPN Gateway.
	VpcId pulumi.StringInput
}

func (VPNGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpngatewayArgs)(nil)).Elem()
}

type VPNGatewayInput interface {
	pulumi.Input

	ToVPNGatewayOutput() VPNGatewayOutput
	ToVPNGatewayOutputWithContext(ctx context.Context) VPNGatewayOutput
}

func (*VPNGateway) ElementType() reflect.Type {
	return reflect.TypeOf((*VPNGateway)(nil))
}

func (i *VPNGateway) ToVPNGatewayOutput() VPNGatewayOutput {
	return i.ToVPNGatewayOutputWithContext(context.Background())
}

func (i *VPNGateway) ToVPNGatewayOutputWithContext(ctx context.Context) VPNGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNGatewayOutput)
}

func (i *VPNGateway) ToVPNGatewayPtrOutput() VPNGatewayPtrOutput {
	return i.ToVPNGatewayPtrOutputWithContext(context.Background())
}

func (i *VPNGateway) ToVPNGatewayPtrOutputWithContext(ctx context.Context) VPNGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNGatewayPtrOutput)
}

type VPNGatewayPtrInput interface {
	pulumi.Input

	ToVPNGatewayPtrOutput() VPNGatewayPtrOutput
	ToVPNGatewayPtrOutputWithContext(ctx context.Context) VPNGatewayPtrOutput
}

type vpngatewayPtrType VPNGatewayArgs

func (*vpngatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VPNGateway)(nil))
}

func (i *vpngatewayPtrType) ToVPNGatewayPtrOutput() VPNGatewayPtrOutput {
	return i.ToVPNGatewayPtrOutputWithContext(context.Background())
}

func (i *vpngatewayPtrType) ToVPNGatewayPtrOutputWithContext(ctx context.Context) VPNGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNGatewayPtrOutput)
}

// VPNGatewayArrayInput is an input type that accepts VPNGatewayArray and VPNGatewayArrayOutput values.
// You can construct a concrete instance of `VPNGatewayArrayInput` via:
//
//          VPNGatewayArray{ VPNGatewayArgs{...} }
type VPNGatewayArrayInput interface {
	pulumi.Input

	ToVPNGatewayArrayOutput() VPNGatewayArrayOutput
	ToVPNGatewayArrayOutputWithContext(context.Context) VPNGatewayArrayOutput
}

type VPNGatewayArray []VPNGatewayInput

func (VPNGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*VPNGateway)(nil))
}

func (i VPNGatewayArray) ToVPNGatewayArrayOutput() VPNGatewayArrayOutput {
	return i.ToVPNGatewayArrayOutputWithContext(context.Background())
}

func (i VPNGatewayArray) ToVPNGatewayArrayOutputWithContext(ctx context.Context) VPNGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNGatewayArrayOutput)
}

// VPNGatewayMapInput is an input type that accepts VPNGatewayMap and VPNGatewayMapOutput values.
// You can construct a concrete instance of `VPNGatewayMapInput` via:
//
//          VPNGatewayMap{ "key": VPNGatewayArgs{...} }
type VPNGatewayMapInput interface {
	pulumi.Input

	ToVPNGatewayMapOutput() VPNGatewayMapOutput
	ToVPNGatewayMapOutputWithContext(context.Context) VPNGatewayMapOutput
}

type VPNGatewayMap map[string]VPNGatewayInput

func (VPNGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*VPNGateway)(nil))
}

func (i VPNGatewayMap) ToVPNGatewayMapOutput() VPNGatewayMapOutput {
	return i.ToVPNGatewayMapOutputWithContext(context.Background())
}

func (i VPNGatewayMap) ToVPNGatewayMapOutputWithContext(ctx context.Context) VPNGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNGatewayMapOutput)
}

type VPNGatewayOutput struct {
	*pulumi.OutputState
}

func (VPNGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VPNGateway)(nil))
}

func (o VPNGatewayOutput) ToVPNGatewayOutput() VPNGatewayOutput {
	return o
}

func (o VPNGatewayOutput) ToVPNGatewayOutputWithContext(ctx context.Context) VPNGatewayOutput {
	return o
}

func (o VPNGatewayOutput) ToVPNGatewayPtrOutput() VPNGatewayPtrOutput {
	return o.ToVPNGatewayPtrOutputWithContext(context.Background())
}

func (o VPNGatewayOutput) ToVPNGatewayPtrOutputWithContext(ctx context.Context) VPNGatewayPtrOutput {
	return o.ApplyT(func(v VPNGateway) *VPNGateway {
		return &v
	}).(VPNGatewayPtrOutput)
}

type VPNGatewayPtrOutput struct {
	*pulumi.OutputState
}

func (VPNGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VPNGateway)(nil))
}

func (o VPNGatewayPtrOutput) ToVPNGatewayPtrOutput() VPNGatewayPtrOutput {
	return o
}

func (o VPNGatewayPtrOutput) ToVPNGatewayPtrOutputWithContext(ctx context.Context) VPNGatewayPtrOutput {
	return o
}

type VPNGatewayArrayOutput struct{ *pulumi.OutputState }

func (VPNGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VPNGateway)(nil))
}

func (o VPNGatewayArrayOutput) ToVPNGatewayArrayOutput() VPNGatewayArrayOutput {
	return o
}

func (o VPNGatewayArrayOutput) ToVPNGatewayArrayOutputWithContext(ctx context.Context) VPNGatewayArrayOutput {
	return o
}

func (o VPNGatewayArrayOutput) Index(i pulumi.IntInput) VPNGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VPNGateway {
		return vs[0].([]VPNGateway)[vs[1].(int)]
	}).(VPNGatewayOutput)
}

type VPNGatewayMapOutput struct{ *pulumi.OutputState }

func (VPNGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VPNGateway)(nil))
}

func (o VPNGatewayMapOutput) ToVPNGatewayMapOutput() VPNGatewayMapOutput {
	return o
}

func (o VPNGatewayMapOutput) ToVPNGatewayMapOutputWithContext(ctx context.Context) VPNGatewayMapOutput {
	return o
}

func (o VPNGatewayMapOutput) MapIndex(k pulumi.StringInput) VPNGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VPNGateway {
		return vs[0].(map[string]VPNGateway)[vs[1].(string)]
	}).(VPNGatewayOutput)
}

func init() {
	pulumi.RegisterOutputType(VPNGatewayOutput{})
	pulumi.RegisterOutputType(VPNGatewayPtrOutput{})
	pulumi.RegisterOutputType(VPNGatewayArrayOutput{})
	pulumi.RegisterOutputType(VPNGatewayMapOutput{})
}
