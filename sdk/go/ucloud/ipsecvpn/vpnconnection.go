// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ipsecvpn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a IPSec VPN Gateway Connection resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ipsecvpn"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooVPC, err := vpc.NewVPC(ctx, "fooVPC", &vpc.VPCArgs{
// 			Tag: pulumi.String("tf-acc"),
// 			CidrBlocks: pulumi.StringArray{
// 				pulumi.String("192.168.0.0/16"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
// 			Tag:       pulumi.String("tf-acc"),
// 			CidrBlock: pulumi.String("192.168.1.0/24"),
// 			VpcId:     fooVPC.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooEIP, err := unet.NewEIP(ctx, "fooEIP", &unet.EIPArgs{
// 			Bandwidth:    pulumi.Int(1),
// 			InternetType: pulumi.String("bgp"),
// 			ChargeMode:   pulumi.String("bandwidth"),
// 			Tag:          pulumi.String("tf-acc"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooVPNGateway, err := ipsecvpn.NewVPNGateway(ctx, "fooVPNGateway", &ipsecvpn.VPNGatewayArgs{
// 			VpcId: fooVPC.ID(),
// 			Grade: pulumi.String("standard"),
// 			EipId: fooEIP.ID(),
// 			Tag:   pulumi.String("tf-acc"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooVPNCustomerGateway, err := ipsecvpn.NewVPNCustomerGateway(ctx, "fooVPNCustomerGateway", &ipsecvpn.VPNCustomerGatewayArgs{
// 			IpAddress: pulumi.String("10.0.0.1"),
// 			Tag:       pulumi.String("tf-acc"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ipsecvpn.NewVPNConnection(ctx, "fooVPNConnection", &ipsecvpn.VPNConnectionArgs{
// 			VpnGatewayId:      fooVPNGateway.ID(),
// 			CustomerGatewayId: fooVPNCustomerGateway.ID(),
// 			VpcId:             fooVPC.ID(),
// 			Tag:               pulumi.String("tf-acc"),
// 			Remark:            pulumi.String("test"),
// 			IkeConfig: &ipsecvpn.VPNConnectionIkeConfigArgs{
// 				PreSharedKey: pulumi.String("test_2019"),
// 			},
// 			IpsecConfig: &ipsecvpn.VPNConnectionIpsecConfigArgs{
// 				LocalSubnetIds: pulumi.StringArray{
// 					fooSubnet.ID(),
// 				},
// 				RemoteSubnets: pulumi.StringArray{
// 					pulumi.String("10.0.0.0/24"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VPN Connection can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import ucloud:ipsecvpn/vPNConnection:VPNConnection example vpntunnel-abc123456
// ```
type VPNConnection struct {
	pulumi.CustomResourceState

	// The creation time for VPN Gateway Connection, formatted in RFC3339 time string.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The grade of the VPN Gateway
	CustomerGatewayId pulumi.StringOutput `pulumi:"customerGatewayId"`
	// The configurations of IKE negotiation. Each ikeConfig supports fields documented below.
	IkeConfig VPNConnectionIkeConfigOutput `pulumi:"ikeConfig"`
	// The configurations of IPSec negotiation. Each ipsecConfig supports fields documented below.
	IpsecConfig VPNConnectionIpsecConfigOutput `pulumi:"ipsecConfig"`
	Name        pulumi.StringOutput            `pulumi:"name"`
	// The remarks of the VPN Gateway Connection. (Default: `""`).
	Remark pulumi.StringOutput `pulumi:"remark"`
	// A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrOutput `pulumi:"tag"`
	// The ID of VPC linked to the VPN Gateway Connection.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The ID of  the VPN Customer Gateway.
	VpnGatewayId pulumi.StringOutput `pulumi:"vpnGatewayId"`
}

// NewVPNConnection registers a new resource with the given unique name, arguments, and options.
func NewVPNConnection(ctx *pulumi.Context,
	name string, args *VPNConnectionArgs, opts ...pulumi.ResourceOption) (*VPNConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomerGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'CustomerGatewayId'")
	}
	if args.IkeConfig == nil {
		return nil, errors.New("invalid value for required argument 'IkeConfig'")
	}
	if args.IpsecConfig == nil {
		return nil, errors.New("invalid value for required argument 'IpsecConfig'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VpnGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VpnGatewayId'")
	}
	var resource VPNConnection
	err := ctx.RegisterResource("ucloud:ipsecvpn/vPNConnection:VPNConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPNConnection gets an existing VPNConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPNConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPNConnectionState, opts ...pulumi.ResourceOption) (*VPNConnection, error) {
	var resource VPNConnection
	err := ctx.ReadResource("ucloud:ipsecvpn/vPNConnection:VPNConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPNConnection resources.
type vpnconnectionState struct {
	// The creation time for VPN Gateway Connection, formatted in RFC3339 time string.
	CreateTime *string `pulumi:"createTime"`
	// The grade of the VPN Gateway
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// The configurations of IKE negotiation. Each ikeConfig supports fields documented below.
	IkeConfig *VPNConnectionIkeConfig `pulumi:"ikeConfig"`
	// The configurations of IPSec negotiation. Each ipsecConfig supports fields documented below.
	IpsecConfig *VPNConnectionIpsecConfig `pulumi:"ipsecConfig"`
	Name        *string                   `pulumi:"name"`
	// The remarks of the VPN Gateway Connection. (Default: `""`).
	Remark *string `pulumi:"remark"`
	// A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag *string `pulumi:"tag"`
	// The ID of VPC linked to the VPN Gateway Connection.
	VpcId *string `pulumi:"vpcId"`
	// The ID of  the VPN Customer Gateway.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

type VPNConnectionState struct {
	// The creation time for VPN Gateway Connection, formatted in RFC3339 time string.
	CreateTime pulumi.StringPtrInput
	// The grade of the VPN Gateway
	CustomerGatewayId pulumi.StringPtrInput
	// The configurations of IKE negotiation. Each ikeConfig supports fields documented below.
	IkeConfig VPNConnectionIkeConfigPtrInput
	// The configurations of IPSec negotiation. Each ipsecConfig supports fields documented below.
	IpsecConfig VPNConnectionIpsecConfigPtrInput
	Name        pulumi.StringPtrInput
	// The remarks of the VPN Gateway Connection. (Default: `""`).
	Remark pulumi.StringPtrInput
	// A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrInput
	// The ID of VPC linked to the VPN Gateway Connection.
	VpcId pulumi.StringPtrInput
	// The ID of  the VPN Customer Gateway.
	VpnGatewayId pulumi.StringPtrInput
}

func (VPNConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnconnectionState)(nil)).Elem()
}

type vpnconnectionArgs struct {
	// The grade of the VPN Gateway
	CustomerGatewayId string `pulumi:"customerGatewayId"`
	// The configurations of IKE negotiation. Each ikeConfig supports fields documented below.
	IkeConfig VPNConnectionIkeConfig `pulumi:"ikeConfig"`
	// The configurations of IPSec negotiation. Each ipsecConfig supports fields documented below.
	IpsecConfig VPNConnectionIpsecConfig `pulumi:"ipsecConfig"`
	Name        *string                  `pulumi:"name"`
	// The remarks of the VPN Gateway Connection. (Default: `""`).
	Remark *string `pulumi:"remark"`
	// A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag *string `pulumi:"tag"`
	// The ID of VPC linked to the VPN Gateway Connection.
	VpcId string `pulumi:"vpcId"`
	// The ID of  the VPN Customer Gateway.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a VPNConnection resource.
type VPNConnectionArgs struct {
	// The grade of the VPN Gateway
	CustomerGatewayId pulumi.StringInput
	// The configurations of IKE negotiation. Each ikeConfig supports fields documented below.
	IkeConfig VPNConnectionIkeConfigInput
	// The configurations of IPSec negotiation. Each ipsecConfig supports fields documented below.
	IpsecConfig VPNConnectionIpsecConfigInput
	Name        pulumi.StringPtrInput
	// The remarks of the VPN Gateway Connection. (Default: `""`).
	Remark pulumi.StringPtrInput
	// A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrInput
	// The ID of VPC linked to the VPN Gateway Connection.
	VpcId pulumi.StringInput
	// The ID of  the VPN Customer Gateway.
	VpnGatewayId pulumi.StringInput
}

func (VPNConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnconnectionArgs)(nil)).Elem()
}

type VPNConnectionInput interface {
	pulumi.Input

	ToVPNConnectionOutput() VPNConnectionOutput
	ToVPNConnectionOutputWithContext(ctx context.Context) VPNConnectionOutput
}

func (*VPNConnection) ElementType() reflect.Type {
	return reflect.TypeOf((*VPNConnection)(nil))
}

func (i *VPNConnection) ToVPNConnectionOutput() VPNConnectionOutput {
	return i.ToVPNConnectionOutputWithContext(context.Background())
}

func (i *VPNConnection) ToVPNConnectionOutputWithContext(ctx context.Context) VPNConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNConnectionOutput)
}

func (i *VPNConnection) ToVPNConnectionPtrOutput() VPNConnectionPtrOutput {
	return i.ToVPNConnectionPtrOutputWithContext(context.Background())
}

func (i *VPNConnection) ToVPNConnectionPtrOutputWithContext(ctx context.Context) VPNConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNConnectionPtrOutput)
}

type VPNConnectionPtrInput interface {
	pulumi.Input

	ToVPNConnectionPtrOutput() VPNConnectionPtrOutput
	ToVPNConnectionPtrOutputWithContext(ctx context.Context) VPNConnectionPtrOutput
}

type vpnconnectionPtrType VPNConnectionArgs

func (*vpnconnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VPNConnection)(nil))
}

func (i *vpnconnectionPtrType) ToVPNConnectionPtrOutput() VPNConnectionPtrOutput {
	return i.ToVPNConnectionPtrOutputWithContext(context.Background())
}

func (i *vpnconnectionPtrType) ToVPNConnectionPtrOutputWithContext(ctx context.Context) VPNConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNConnectionPtrOutput)
}

// VPNConnectionArrayInput is an input type that accepts VPNConnectionArray and VPNConnectionArrayOutput values.
// You can construct a concrete instance of `VPNConnectionArrayInput` via:
//
//          VPNConnectionArray{ VPNConnectionArgs{...} }
type VPNConnectionArrayInput interface {
	pulumi.Input

	ToVPNConnectionArrayOutput() VPNConnectionArrayOutput
	ToVPNConnectionArrayOutputWithContext(context.Context) VPNConnectionArrayOutput
}

type VPNConnectionArray []VPNConnectionInput

func (VPNConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*VPNConnection)(nil))
}

func (i VPNConnectionArray) ToVPNConnectionArrayOutput() VPNConnectionArrayOutput {
	return i.ToVPNConnectionArrayOutputWithContext(context.Background())
}

func (i VPNConnectionArray) ToVPNConnectionArrayOutputWithContext(ctx context.Context) VPNConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNConnectionArrayOutput)
}

// VPNConnectionMapInput is an input type that accepts VPNConnectionMap and VPNConnectionMapOutput values.
// You can construct a concrete instance of `VPNConnectionMapInput` via:
//
//          VPNConnectionMap{ "key": VPNConnectionArgs{...} }
type VPNConnectionMapInput interface {
	pulumi.Input

	ToVPNConnectionMapOutput() VPNConnectionMapOutput
	ToVPNConnectionMapOutputWithContext(context.Context) VPNConnectionMapOutput
}

type VPNConnectionMap map[string]VPNConnectionInput

func (VPNConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*VPNConnection)(nil))
}

func (i VPNConnectionMap) ToVPNConnectionMapOutput() VPNConnectionMapOutput {
	return i.ToVPNConnectionMapOutputWithContext(context.Background())
}

func (i VPNConnectionMap) ToVPNConnectionMapOutputWithContext(ctx context.Context) VPNConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPNConnectionMapOutput)
}

type VPNConnectionOutput struct {
	*pulumi.OutputState
}

func (VPNConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VPNConnection)(nil))
}

func (o VPNConnectionOutput) ToVPNConnectionOutput() VPNConnectionOutput {
	return o
}

func (o VPNConnectionOutput) ToVPNConnectionOutputWithContext(ctx context.Context) VPNConnectionOutput {
	return o
}

func (o VPNConnectionOutput) ToVPNConnectionPtrOutput() VPNConnectionPtrOutput {
	return o.ToVPNConnectionPtrOutputWithContext(context.Background())
}

func (o VPNConnectionOutput) ToVPNConnectionPtrOutputWithContext(ctx context.Context) VPNConnectionPtrOutput {
	return o.ApplyT(func(v VPNConnection) *VPNConnection {
		return &v
	}).(VPNConnectionPtrOutput)
}

type VPNConnectionPtrOutput struct {
	*pulumi.OutputState
}

func (VPNConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VPNConnection)(nil))
}

func (o VPNConnectionPtrOutput) ToVPNConnectionPtrOutput() VPNConnectionPtrOutput {
	return o
}

func (o VPNConnectionPtrOutput) ToVPNConnectionPtrOutputWithContext(ctx context.Context) VPNConnectionPtrOutput {
	return o
}

type VPNConnectionArrayOutput struct{ *pulumi.OutputState }

func (VPNConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VPNConnection)(nil))
}

func (o VPNConnectionArrayOutput) ToVPNConnectionArrayOutput() VPNConnectionArrayOutput {
	return o
}

func (o VPNConnectionArrayOutput) ToVPNConnectionArrayOutputWithContext(ctx context.Context) VPNConnectionArrayOutput {
	return o
}

func (o VPNConnectionArrayOutput) Index(i pulumi.IntInput) VPNConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VPNConnection {
		return vs[0].([]VPNConnection)[vs[1].(int)]
	}).(VPNConnectionOutput)
}

type VPNConnectionMapOutput struct{ *pulumi.OutputState }

func (VPNConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VPNConnection)(nil))
}

func (o VPNConnectionMapOutput) ToVPNConnectionMapOutput() VPNConnectionMapOutput {
	return o
}

func (o VPNConnectionMapOutput) ToVPNConnectionMapOutputWithContext(ctx context.Context) VPNConnectionMapOutput {
	return o
}

func (o VPNConnectionMapOutput) MapIndex(k pulumi.StringInput) VPNConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VPNConnection {
		return vs[0].(map[string]VPNConnection)[vs[1].(string)]
	}).(VPNConnectionOutput)
}

func init() {
	pulumi.RegisterOutputType(VPNConnectionOutput{})
	pulumi.RegisterOutputType(VPNConnectionPtrOutput{})
	pulumi.RegisterOutputType(VPNConnectionArrayOutput{})
	pulumi.RegisterOutputType(VPNConnectionMapOutput{})
}
