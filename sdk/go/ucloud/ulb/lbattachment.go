// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ulb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Load Balancer Attachment resource for attaching Load Balancer to UHost Instance, etc.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ulb"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "cn-bj2-04"
// 		opt1 := "^CentOS 6.5 64"
// 		opt2 := "base"
// 		defaultImage, err := uhost.GetImage(ctx, &uhost.GetImageArgs{
// 			AvailabilityZone: &opt0,
// 			NameRegex:        &opt1,
// 			ImageType:        &opt2,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		webLB, err := ulb.NewLB(ctx, "webLB", &ulb.LBArgs{
// 			Tag: pulumi.String("tf-example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		defaultLBListener, err := ulb.NewLBListener(ctx, "defaultLBListener", &ulb.LBListenerArgs{
// 			LoadBalancerId: webLB.ID(),
// 			Protocol:       pulumi.String("http"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		webInstance, err := uhost.NewInstance(ctx, "webInstance", &uhost.InstanceArgs{
// 			InstanceType:     pulumi.String("n-basic-2"),
// 			AvailabilityZone: pulumi.String("cn-bj2-04"),
// 			RootPassword:     pulumi.String("wA1234567"),
// 			ImageId:          pulumi.String(defaultImage.Images[0].Id),
// 			Tag:              pulumi.String("tf-example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ulb.NewLBAttachment(ctx, "example", &ulb.LBAttachmentArgs{
// 			LoadBalancerId: webLB.ID(),
// 			ListenerId:     defaultLBListener.ID(),
// 			ResourceId:     webInstance.ID(),
// 			Port:           pulumi.Int(80),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// LB Listener can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import ucloud:ulb/lBAttachment:LBAttachment example backend-abcdefg
// ```
type LBAttachment struct {
	pulumi.CustomResourceState

	// The ID of a listener server.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// The ID of a load balancer.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `requestProxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packetsTransmit`, the port of the backend server must be consistent with the LB listening port.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The private ip address for backend servers.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// The ID of a backend server.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// , attribute `resourceType` is deprecated for optimizing parameters.
	//
	// Deprecated: attribute `resource_type` is deprecated for optimizing parameters
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewLBAttachment registers a new resource with the given unique name, arguments, and options.
func NewLBAttachment(ctx *pulumi.Context,
	name string, args *LBAttachmentArgs, opts ...pulumi.ResourceOption) (*LBAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	var resource LBAttachment
	err := ctx.RegisterResource("ucloud:ulb/lBAttachment:LBAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLBAttachment gets an existing LBAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLBAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LBAttachmentState, opts ...pulumi.ResourceOption) (*LBAttachment, error) {
	var resource LBAttachment
	err := ctx.ReadResource("ucloud:ulb/lBAttachment:LBAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LBAttachment resources.
type lbattachmentState struct {
	// The ID of a listener server.
	ListenerId *string `pulumi:"listenerId"`
	// The ID of a load balancer.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `requestProxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packetsTransmit`, the port of the backend server must be consistent with the LB listening port.
	Port *int `pulumi:"port"`
	// The private ip address for backend servers.
	PrivateIp *string `pulumi:"privateIp"`
	// The ID of a backend server.
	ResourceId *string `pulumi:"resourceId"`
	// , attribute `resourceType` is deprecated for optimizing parameters.
	//
	// Deprecated: attribute `resource_type` is deprecated for optimizing parameters
	ResourceType *string `pulumi:"resourceType"`
	// The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
	Status *string `pulumi:"status"`
}

type LBAttachmentState struct {
	// The ID of a listener server.
	ListenerId pulumi.StringPtrInput
	// The ID of a load balancer.
	LoadBalancerId pulumi.StringPtrInput
	// The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `requestProxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packetsTransmit`, the port of the backend server must be consistent with the LB listening port.
	Port pulumi.IntPtrInput
	// The private ip address for backend servers.
	PrivateIp pulumi.StringPtrInput
	// The ID of a backend server.
	ResourceId pulumi.StringPtrInput
	// , attribute `resourceType` is deprecated for optimizing parameters.
	//
	// Deprecated: attribute `resource_type` is deprecated for optimizing parameters
	ResourceType pulumi.StringPtrInput
	// The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
	Status pulumi.StringPtrInput
}

func (LBAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbattachmentState)(nil)).Elem()
}

type lbattachmentArgs struct {
	// The ID of a listener server.
	ListenerId string `pulumi:"listenerId"`
	// The ID of a load balancer.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `requestProxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packetsTransmit`, the port of the backend server must be consistent with the LB listening port.
	Port *int `pulumi:"port"`
	// The ID of a backend server.
	ResourceId string `pulumi:"resourceId"`
	// , attribute `resourceType` is deprecated for optimizing parameters.
	//
	// Deprecated: attribute `resource_type` is deprecated for optimizing parameters
	ResourceType *string `pulumi:"resourceType"`
}

// The set of arguments for constructing a LBAttachment resource.
type LBAttachmentArgs struct {
	// The ID of a listener server.
	ListenerId pulumi.StringInput
	// The ID of a load balancer.
	LoadBalancerId pulumi.StringInput
	// The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `requestProxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packetsTransmit`, the port of the backend server must be consistent with the LB listening port.
	Port pulumi.IntPtrInput
	// The ID of a backend server.
	ResourceId pulumi.StringInput
	// , attribute `resourceType` is deprecated for optimizing parameters.
	//
	// Deprecated: attribute `resource_type` is deprecated for optimizing parameters
	ResourceType pulumi.StringPtrInput
}

func (LBAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbattachmentArgs)(nil)).Elem()
}

type LBAttachmentInput interface {
	pulumi.Input

	ToLBAttachmentOutput() LBAttachmentOutput
	ToLBAttachmentOutputWithContext(ctx context.Context) LBAttachmentOutput
}

func (*LBAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((*LBAttachment)(nil))
}

func (i *LBAttachment) ToLBAttachmentOutput() LBAttachmentOutput {
	return i.ToLBAttachmentOutputWithContext(context.Background())
}

func (i *LBAttachment) ToLBAttachmentOutputWithContext(ctx context.Context) LBAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBAttachmentOutput)
}

func (i *LBAttachment) ToLBAttachmentPtrOutput() LBAttachmentPtrOutput {
	return i.ToLBAttachmentPtrOutputWithContext(context.Background())
}

func (i *LBAttachment) ToLBAttachmentPtrOutputWithContext(ctx context.Context) LBAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBAttachmentPtrOutput)
}

type LBAttachmentPtrInput interface {
	pulumi.Input

	ToLBAttachmentPtrOutput() LBAttachmentPtrOutput
	ToLBAttachmentPtrOutputWithContext(ctx context.Context) LBAttachmentPtrOutput
}

type lbattachmentPtrType LBAttachmentArgs

func (*lbattachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LBAttachment)(nil))
}

func (i *lbattachmentPtrType) ToLBAttachmentPtrOutput() LBAttachmentPtrOutput {
	return i.ToLBAttachmentPtrOutputWithContext(context.Background())
}

func (i *lbattachmentPtrType) ToLBAttachmentPtrOutputWithContext(ctx context.Context) LBAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBAttachmentPtrOutput)
}

// LBAttachmentArrayInput is an input type that accepts LBAttachmentArray and LBAttachmentArrayOutput values.
// You can construct a concrete instance of `LBAttachmentArrayInput` via:
//
//          LBAttachmentArray{ LBAttachmentArgs{...} }
type LBAttachmentArrayInput interface {
	pulumi.Input

	ToLBAttachmentArrayOutput() LBAttachmentArrayOutput
	ToLBAttachmentArrayOutputWithContext(context.Context) LBAttachmentArrayOutput
}

type LBAttachmentArray []LBAttachmentInput

func (LBAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LBAttachment)(nil))
}

func (i LBAttachmentArray) ToLBAttachmentArrayOutput() LBAttachmentArrayOutput {
	return i.ToLBAttachmentArrayOutputWithContext(context.Background())
}

func (i LBAttachmentArray) ToLBAttachmentArrayOutputWithContext(ctx context.Context) LBAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBAttachmentArrayOutput)
}

// LBAttachmentMapInput is an input type that accepts LBAttachmentMap and LBAttachmentMapOutput values.
// You can construct a concrete instance of `LBAttachmentMapInput` via:
//
//          LBAttachmentMap{ "key": LBAttachmentArgs{...} }
type LBAttachmentMapInput interface {
	pulumi.Input

	ToLBAttachmentMapOutput() LBAttachmentMapOutput
	ToLBAttachmentMapOutputWithContext(context.Context) LBAttachmentMapOutput
}

type LBAttachmentMap map[string]LBAttachmentInput

func (LBAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LBAttachment)(nil))
}

func (i LBAttachmentMap) ToLBAttachmentMapOutput() LBAttachmentMapOutput {
	return i.ToLBAttachmentMapOutputWithContext(context.Background())
}

func (i LBAttachmentMap) ToLBAttachmentMapOutputWithContext(ctx context.Context) LBAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBAttachmentMapOutput)
}

type LBAttachmentOutput struct {
	*pulumi.OutputState
}

func (LBAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LBAttachment)(nil))
}

func (o LBAttachmentOutput) ToLBAttachmentOutput() LBAttachmentOutput {
	return o
}

func (o LBAttachmentOutput) ToLBAttachmentOutputWithContext(ctx context.Context) LBAttachmentOutput {
	return o
}

func (o LBAttachmentOutput) ToLBAttachmentPtrOutput() LBAttachmentPtrOutput {
	return o.ToLBAttachmentPtrOutputWithContext(context.Background())
}

func (o LBAttachmentOutput) ToLBAttachmentPtrOutputWithContext(ctx context.Context) LBAttachmentPtrOutput {
	return o.ApplyT(func(v LBAttachment) *LBAttachment {
		return &v
	}).(LBAttachmentPtrOutput)
}

type LBAttachmentPtrOutput struct {
	*pulumi.OutputState
}

func (LBAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LBAttachment)(nil))
}

func (o LBAttachmentPtrOutput) ToLBAttachmentPtrOutput() LBAttachmentPtrOutput {
	return o
}

func (o LBAttachmentPtrOutput) ToLBAttachmentPtrOutputWithContext(ctx context.Context) LBAttachmentPtrOutput {
	return o
}

type LBAttachmentArrayOutput struct{ *pulumi.OutputState }

func (LBAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LBAttachment)(nil))
}

func (o LBAttachmentArrayOutput) ToLBAttachmentArrayOutput() LBAttachmentArrayOutput {
	return o
}

func (o LBAttachmentArrayOutput) ToLBAttachmentArrayOutputWithContext(ctx context.Context) LBAttachmentArrayOutput {
	return o
}

func (o LBAttachmentArrayOutput) Index(i pulumi.IntInput) LBAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LBAttachment {
		return vs[0].([]LBAttachment)[vs[1].(int)]
	}).(LBAttachmentOutput)
}

type LBAttachmentMapOutput struct{ *pulumi.OutputState }

func (LBAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LBAttachment)(nil))
}

func (o LBAttachmentMapOutput) ToLBAttachmentMapOutput() LBAttachmentMapOutput {
	return o
}

func (o LBAttachmentMapOutput) ToLBAttachmentMapOutputWithContext(ctx context.Context) LBAttachmentMapOutput {
	return o
}

func (o LBAttachmentMapOutput) MapIndex(k pulumi.StringInput) LBAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LBAttachment {
		return vs[0].(map[string]LBAttachment)[vs[1].(string)]
	}).(LBAttachmentOutput)
}

func init() {
	pulumi.RegisterOutputType(LBAttachmentOutput{})
	pulumi.RegisterOutputType(LBAttachmentPtrOutput{})
	pulumi.RegisterOutputType(LBAttachmentArrayOutput{})
	pulumi.RegisterOutputType(LBAttachmentMapOutput{})
}
