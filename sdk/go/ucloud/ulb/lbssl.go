// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ulb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Load Balancer SSL certificate resource.
type LBSsl struct {
	pulumi.CustomResourceState

	// The content of the CA certificate about ssl certificate.
	CaCert pulumi.StringPtrOutput `pulumi:"caCert"`
	// The time of creation for lb ssl, formatted in RFC3339 time string.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	Name       pulumi.StringOutput `pulumi:"name"`
	// The content of the private key about ssl certificate.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// The content of the user certificate about ssl certificate.
	UserCert pulumi.StringOutput `pulumi:"userCert"`
}

// NewLBSsl registers a new resource with the given unique name, arguments, and options.
func NewLBSsl(ctx *pulumi.Context,
	name string, args *LBSslArgs, opts ...pulumi.ResourceOption) (*LBSsl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.UserCert == nil {
		return nil, errors.New("invalid value for required argument 'UserCert'")
	}
	var resource LBSsl
	err := ctx.RegisterResource("ucloud:ulb/lBSsl:LBSsl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLBSsl gets an existing LBSsl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLBSsl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LBSslState, opts ...pulumi.ResourceOption) (*LBSsl, error) {
	var resource LBSsl
	err := ctx.ReadResource("ucloud:ulb/lBSsl:LBSsl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LBSsl resources.
type lbsslState struct {
	// The content of the CA certificate about ssl certificate.
	CaCert *string `pulumi:"caCert"`
	// The time of creation for lb ssl, formatted in RFC3339 time string.
	CreateTime *string `pulumi:"createTime"`
	Name       *string `pulumi:"name"`
	// The content of the private key about ssl certificate.
	PrivateKey *string `pulumi:"privateKey"`
	// The content of the user certificate about ssl certificate.
	UserCert *string `pulumi:"userCert"`
}

type LBSslState struct {
	// The content of the CA certificate about ssl certificate.
	CaCert pulumi.StringPtrInput
	// The time of creation for lb ssl, formatted in RFC3339 time string.
	CreateTime pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	// The content of the private key about ssl certificate.
	PrivateKey pulumi.StringPtrInput
	// The content of the user certificate about ssl certificate.
	UserCert pulumi.StringPtrInput
}

func (LBSslState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbsslState)(nil)).Elem()
}

type lbsslArgs struct {
	// The content of the CA certificate about ssl certificate.
	CaCert *string `pulumi:"caCert"`
	Name   *string `pulumi:"name"`
	// The content of the private key about ssl certificate.
	PrivateKey string `pulumi:"privateKey"`
	// The content of the user certificate about ssl certificate.
	UserCert string `pulumi:"userCert"`
}

// The set of arguments for constructing a LBSsl resource.
type LBSslArgs struct {
	// The content of the CA certificate about ssl certificate.
	CaCert pulumi.StringPtrInput
	Name   pulumi.StringPtrInput
	// The content of the private key about ssl certificate.
	PrivateKey pulumi.StringInput
	// The content of the user certificate about ssl certificate.
	UserCert pulumi.StringInput
}

func (LBSslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbsslArgs)(nil)).Elem()
}

type LBSslInput interface {
	pulumi.Input

	ToLBSslOutput() LBSslOutput
	ToLBSslOutputWithContext(ctx context.Context) LBSslOutput
}

func (*LBSsl) ElementType() reflect.Type {
	return reflect.TypeOf((*LBSsl)(nil))
}

func (i *LBSsl) ToLBSslOutput() LBSslOutput {
	return i.ToLBSslOutputWithContext(context.Background())
}

func (i *LBSsl) ToLBSslOutputWithContext(ctx context.Context) LBSslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBSslOutput)
}

func (i *LBSsl) ToLBSslPtrOutput() LBSslPtrOutput {
	return i.ToLBSslPtrOutputWithContext(context.Background())
}

func (i *LBSsl) ToLBSslPtrOutputWithContext(ctx context.Context) LBSslPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBSslPtrOutput)
}

type LBSslPtrInput interface {
	pulumi.Input

	ToLBSslPtrOutput() LBSslPtrOutput
	ToLBSslPtrOutputWithContext(ctx context.Context) LBSslPtrOutput
}

type lbsslPtrType LBSslArgs

func (*lbsslPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LBSsl)(nil))
}

func (i *lbsslPtrType) ToLBSslPtrOutput() LBSslPtrOutput {
	return i.ToLBSslPtrOutputWithContext(context.Background())
}

func (i *lbsslPtrType) ToLBSslPtrOutputWithContext(ctx context.Context) LBSslPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBSslPtrOutput)
}

// LBSslArrayInput is an input type that accepts LBSslArray and LBSslArrayOutput values.
// You can construct a concrete instance of `LBSslArrayInput` via:
//
//          LBSslArray{ LBSslArgs{...} }
type LBSslArrayInput interface {
	pulumi.Input

	ToLBSslArrayOutput() LBSslArrayOutput
	ToLBSslArrayOutputWithContext(context.Context) LBSslArrayOutput
}

type LBSslArray []LBSslInput

func (LBSslArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LBSsl)(nil))
}

func (i LBSslArray) ToLBSslArrayOutput() LBSslArrayOutput {
	return i.ToLBSslArrayOutputWithContext(context.Background())
}

func (i LBSslArray) ToLBSslArrayOutputWithContext(ctx context.Context) LBSslArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBSslArrayOutput)
}

// LBSslMapInput is an input type that accepts LBSslMap and LBSslMapOutput values.
// You can construct a concrete instance of `LBSslMapInput` via:
//
//          LBSslMap{ "key": LBSslArgs{...} }
type LBSslMapInput interface {
	pulumi.Input

	ToLBSslMapOutput() LBSslMapOutput
	ToLBSslMapOutputWithContext(context.Context) LBSslMapOutput
}

type LBSslMap map[string]LBSslInput

func (LBSslMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LBSsl)(nil))
}

func (i LBSslMap) ToLBSslMapOutput() LBSslMapOutput {
	return i.ToLBSslMapOutputWithContext(context.Background())
}

func (i LBSslMap) ToLBSslMapOutputWithContext(ctx context.Context) LBSslMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBSslMapOutput)
}

type LBSslOutput struct {
	*pulumi.OutputState
}

func (LBSslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LBSsl)(nil))
}

func (o LBSslOutput) ToLBSslOutput() LBSslOutput {
	return o
}

func (o LBSslOutput) ToLBSslOutputWithContext(ctx context.Context) LBSslOutput {
	return o
}

func (o LBSslOutput) ToLBSslPtrOutput() LBSslPtrOutput {
	return o.ToLBSslPtrOutputWithContext(context.Background())
}

func (o LBSslOutput) ToLBSslPtrOutputWithContext(ctx context.Context) LBSslPtrOutput {
	return o.ApplyT(func(v LBSsl) *LBSsl {
		return &v
	}).(LBSslPtrOutput)
}

type LBSslPtrOutput struct {
	*pulumi.OutputState
}

func (LBSslPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LBSsl)(nil))
}

func (o LBSslPtrOutput) ToLBSslPtrOutput() LBSslPtrOutput {
	return o
}

func (o LBSslPtrOutput) ToLBSslPtrOutputWithContext(ctx context.Context) LBSslPtrOutput {
	return o
}

type LBSslArrayOutput struct{ *pulumi.OutputState }

func (LBSslArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LBSsl)(nil))
}

func (o LBSslArrayOutput) ToLBSslArrayOutput() LBSslArrayOutput {
	return o
}

func (o LBSslArrayOutput) ToLBSslArrayOutputWithContext(ctx context.Context) LBSslArrayOutput {
	return o
}

func (o LBSslArrayOutput) Index(i pulumi.IntInput) LBSslOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LBSsl {
		return vs[0].([]LBSsl)[vs[1].(int)]
	}).(LBSslOutput)
}

type LBSslMapOutput struct{ *pulumi.OutputState }

func (LBSslMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LBSsl)(nil))
}

func (o LBSslMapOutput) ToLBSslMapOutput() LBSslMapOutput {
	return o
}

func (o LBSslMapOutput) ToLBSslMapOutputWithContext(ctx context.Context) LBSslMapOutput {
	return o
}

func (o LBSslMapOutput) MapIndex(k pulumi.StringInput) LBSslOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LBSsl {
		return vs[0].(map[string]LBSsl)[vs[1].(string)]
	}).(LBSslOutput)
}

func init() {
	pulumi.RegisterOutputType(LBSslOutput{})
	pulumi.RegisterOutputType(LBSslPtrOutput{})
	pulumi.RegisterOutputType(LBSslArrayOutput{})
	pulumi.RegisterOutputType(LBSslMapOutput{})
}
