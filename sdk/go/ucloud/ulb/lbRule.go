// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ulb

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Load Balancer Rule resource to add content forwarding policies for Load Balancer backend resource.
//
// > **Note** The Load Balancer Rule can only be define while the `protocol` of lb listener is one of HTTP and HTTPS. In addition, should set one of `domain` and `path` if defined.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/r/lb_rule.html.markdown.
type LbRule struct {
	pulumi.CustomResourceState

	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds pulumi.StringArrayOutput `pulumi:"backendIds"`
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// The ID of a listener server.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// The ID of a load balancer.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path pulumi.StringPtrOutput `pulumi:"path"`
}

// NewLbRule registers a new resource with the given unique name, arguments, and options.
func NewLbRule(ctx *pulumi.Context,
	name string, args *LbRuleArgs, opts ...pulumi.ResourceOption) (*LbRule, error) {
	if args == nil || args.BackendIds == nil {
		return nil, errors.New("missing required argument 'BackendIds'")
	}
	if args == nil || args.ListenerId == nil {
		return nil, errors.New("missing required argument 'ListenerId'")
	}
	if args == nil || args.LoadBalancerId == nil {
		return nil, errors.New("missing required argument 'LoadBalancerId'")
	}
	if args == nil {
		args = &LbRuleArgs{}
	}
	var resource LbRule
	err := ctx.RegisterResource("ucloud:ulb/lbRule:LbRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbRule gets an existing LbRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbRuleState, opts ...pulumi.ResourceOption) (*LbRule, error) {
	var resource LbRule
	err := ctx.ReadResource("ucloud:ulb/lbRule:LbRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbRule resources.
type lbRuleState struct {
	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds []string `pulumi:"backendIds"`
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain *string `pulumi:"domain"`
	// The ID of a listener server.
	ListenerId *string `pulumi:"listenerId"`
	// The ID of a load balancer.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path *string `pulumi:"path"`
}

type LbRuleState struct {
	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds pulumi.StringArrayInput
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain pulumi.StringPtrInput
	// The ID of a listener server.
	ListenerId pulumi.StringPtrInput
	// The ID of a load balancer.
	LoadBalancerId pulumi.StringPtrInput
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path pulumi.StringPtrInput
}

func (LbRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbRuleState)(nil)).Elem()
}

type lbRuleArgs struct {
	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds []string `pulumi:"backendIds"`
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain *string `pulumi:"domain"`
	// The ID of a listener server.
	ListenerId string `pulumi:"listenerId"`
	// The ID of a load balancer.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path *string `pulumi:"path"`
}

// The set of arguments for constructing a LbRule resource.
type LbRuleArgs struct {
	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds pulumi.StringArrayInput
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain pulumi.StringPtrInput
	// The ID of a listener server.
	ListenerId pulumi.StringInput
	// The ID of a load balancer.
	LoadBalancerId pulumi.StringInput
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path pulumi.StringPtrInput
}

func (LbRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbRuleArgs)(nil)).Elem()
}
