// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ulb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Load Balancer Rule resource to add content forwarding policies for Load Balancer backend resource.
//
// > **Note** The Load Balancer Rule can only be define while the `protocol` of lb listener is one of HTTP and HTTPS. In addition, should set one of `domain` and `path` if defined.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/r/lb_rule.html.markdown.
type LbRule struct {
	s *pulumi.ResourceState
}

// NewLbRule registers a new resource with the given unique name, arguments, and options.
func NewLbRule(ctx *pulumi.Context,
	name string, args *LbRuleArgs, opts ...pulumi.ResourceOpt) (*LbRule, error) {
	if args == nil || args.BackendIds == nil {
		return nil, errors.New("missing required argument 'BackendIds'")
	}
	if args == nil || args.ListenerId == nil {
		return nil, errors.New("missing required argument 'ListenerId'")
	}
	if args == nil || args.LoadBalancerId == nil {
		return nil, errors.New("missing required argument 'LoadBalancerId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backendIds"] = nil
		inputs["domain"] = nil
		inputs["listenerId"] = nil
		inputs["loadBalancerId"] = nil
		inputs["path"] = nil
	} else {
		inputs["backendIds"] = args.BackendIds
		inputs["domain"] = args.Domain
		inputs["listenerId"] = args.ListenerId
		inputs["loadBalancerId"] = args.LoadBalancerId
		inputs["path"] = args.Path
	}
	s, err := ctx.RegisterResource("ucloud:ulb/lbRule:LbRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LbRule{s: s}, nil
}

// GetLbRule gets an existing LbRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LbRuleState, opts ...pulumi.ResourceOpt) (*LbRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backendIds"] = state.BackendIds
		inputs["domain"] = state.Domain
		inputs["listenerId"] = state.ListenerId
		inputs["loadBalancerId"] = state.LoadBalancerId
		inputs["path"] = state.Path
	}
	s, err := ctx.ReadResource("ucloud:ulb/lbRule:LbRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LbRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LbRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LbRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
func (r *LbRule) BackendIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["backendIds"])
}

// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
func (r *LbRule) Domain() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["domain"])
}

// The ID of a listener server.
func (r *LbRule) ListenerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["listenerId"])
}

// The ID of a load balancer.
func (r *LbRule) LoadBalancerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancerId"])
}

// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
func (r *LbRule) Path() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["path"])
}

// Input properties used for looking up and filtering LbRule resources.
type LbRuleState struct {
	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds interface{}
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain interface{}
	// The ID of a listener server.
	ListenerId interface{}
	// The ID of a load balancer.
	LoadBalancerId interface{}
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path interface{}
}

// The set of arguments for constructing a LbRule resource.
type LbRuleArgs struct {
	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds interface{}
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain interface{}
	// The ID of a listener server.
	ListenerId interface{}
	// The ID of a load balancer.
	LoadBalancerId interface{}
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path interface{}
}
