// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ulb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Load Balancer SSL attachment resource for attaching SSL certificate to Load Balancer Listener.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/r/lb_ssl_attachment.html.markdown.
type LbSslAttachment struct {
	s *pulumi.ResourceState
}

// NewLbSslAttachment registers a new resource with the given unique name, arguments, and options.
func NewLbSslAttachment(ctx *pulumi.Context,
	name string, args *LbSslAttachmentArgs, opts ...pulumi.ResourceOpt) (*LbSslAttachment, error) {
	if args == nil || args.ListenerId == nil {
		return nil, errors.New("missing required argument 'ListenerId'")
	}
	if args == nil || args.LoadBalancerId == nil {
		return nil, errors.New("missing required argument 'LoadBalancerId'")
	}
	if args == nil || args.SslId == nil {
		return nil, errors.New("missing required argument 'SslId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["listenerId"] = nil
		inputs["loadBalancerId"] = nil
		inputs["sslId"] = nil
	} else {
		inputs["listenerId"] = args.ListenerId
		inputs["loadBalancerId"] = args.LoadBalancerId
		inputs["sslId"] = args.SslId
	}
	s, err := ctx.RegisterResource("ucloud:ulb/lbSslAttachment:LbSslAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LbSslAttachment{s: s}, nil
}

// GetLbSslAttachment gets an existing LbSslAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbSslAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LbSslAttachmentState, opts ...pulumi.ResourceOpt) (*LbSslAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["listenerId"] = state.ListenerId
		inputs["loadBalancerId"] = state.LoadBalancerId
		inputs["sslId"] = state.SslId
	}
	s, err := ctx.ReadResource("ucloud:ulb/lbSslAttachment:LbSslAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LbSslAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LbSslAttachment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LbSslAttachment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of listener servers.
func (r *LbSslAttachment) ListenerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["listenerId"])
}

func (r *LbSslAttachment) LoadBalancerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancerId"])
}

// The ID of SSL certificate.
func (r *LbSslAttachment) SslId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sslId"])
}

// Input properties used for looking up and filtering LbSslAttachment resources.
type LbSslAttachmentState struct {
	// The ID of listener servers.
	ListenerId     interface{}
	LoadBalancerId interface{}
	// The ID of SSL certificate.
	SslId interface{}
}

// The set of arguments for constructing a LbSslAttachment resource.
type LbSslAttachmentArgs struct {
	// The ID of listener servers.
	ListenerId     interface{}
	LoadBalancerId interface{}
	// The ID of SSL certificate.
	SslId interface{}
}
