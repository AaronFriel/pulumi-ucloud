// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package ulb

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Load Balancer SSL attachment resource for attaching SSL certificate to Load Balancer Listener.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/r/lb_ssl_attachment.html.markdown.
type LbSslAttachment struct {
	pulumi.CustomResourceState

	// The ID of listener servers.
	ListenerId     pulumi.StringOutput `pulumi:"listenerId"`
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// The ID of SSL certificate.
	SslId pulumi.StringOutput `pulumi:"sslId"`
}

// NewLbSslAttachment registers a new resource with the given unique name, arguments, and options.
func NewLbSslAttachment(ctx *pulumi.Context,
	name string, args *LbSslAttachmentArgs, opts ...pulumi.ResourceOption) (*LbSslAttachment, error) {
	if args == nil || args.ListenerId == nil {
		return nil, errors.New("missing required argument 'ListenerId'")
	}
	if args == nil || args.LoadBalancerId == nil {
		return nil, errors.New("missing required argument 'LoadBalancerId'")
	}
	if args == nil || args.SslId == nil {
		return nil, errors.New("missing required argument 'SslId'")
	}
	if args == nil {
		args = &LbSslAttachmentArgs{}
	}
	var resource LbSslAttachment
	err := ctx.RegisterResource("ucloud:ulb/lbSslAttachment:LbSslAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbSslAttachment gets an existing LbSslAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbSslAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbSslAttachmentState, opts ...pulumi.ResourceOption) (*LbSslAttachment, error) {
	var resource LbSslAttachment
	err := ctx.ReadResource("ucloud:ulb/lbSslAttachment:LbSslAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbSslAttachment resources.
type lbSslAttachmentState struct {
	// The ID of listener servers.
	ListenerId     *string `pulumi:"listenerId"`
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The ID of SSL certificate.
	SslId *string `pulumi:"sslId"`
}

type LbSslAttachmentState struct {
	// The ID of listener servers.
	ListenerId     pulumi.StringPtrInput
	LoadBalancerId pulumi.StringPtrInput
	// The ID of SSL certificate.
	SslId pulumi.StringPtrInput
}

func (LbSslAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbSslAttachmentState)(nil)).Elem()
}

type lbSslAttachmentArgs struct {
	// The ID of listener servers.
	ListenerId     string `pulumi:"listenerId"`
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The ID of SSL certificate.
	SslId string `pulumi:"sslId"`
}

// The set of arguments for constructing a LbSslAttachment resource.
type LbSslAttachmentArgs struct {
	// The ID of listener servers.
	ListenerId     pulumi.StringInput
	LoadBalancerId pulumi.StringInput
	// The ID of SSL certificate.
	SslId pulumi.StringInput
}

func (LbSslAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbSslAttachmentArgs)(nil)).Elem()
}
