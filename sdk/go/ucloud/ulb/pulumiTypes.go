// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ulb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LBIpSet struct {
	// Type of Elastic IP routes.
	InternetType *string `pulumi:"internetType"`
	// Elastic IP address.
	Ip *string `pulumi:"ip"`
}

// LBIpSetInput is an input type that accepts LBIpSetArgs and LBIpSetOutput values.
// You can construct a concrete instance of `LBIpSetInput` via:
//
//          LBIpSetArgs{...}
type LBIpSetInput interface {
	pulumi.Input

	ToLBIpSetOutput() LBIpSetOutput
	ToLBIpSetOutputWithContext(context.Context) LBIpSetOutput
}

type LBIpSetArgs struct {
	// Type of Elastic IP routes.
	InternetType pulumi.StringPtrInput `pulumi:"internetType"`
	// Elastic IP address.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (LBIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LBIpSet)(nil)).Elem()
}

func (i LBIpSetArgs) ToLBIpSetOutput() LBIpSetOutput {
	return i.ToLBIpSetOutputWithContext(context.Background())
}

func (i LBIpSetArgs) ToLBIpSetOutputWithContext(ctx context.Context) LBIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBIpSetOutput)
}

// LBIpSetArrayInput is an input type that accepts LBIpSetArray and LBIpSetArrayOutput values.
// You can construct a concrete instance of `LBIpSetArrayInput` via:
//
//          LBIpSetArray{ LBIpSetArgs{...} }
type LBIpSetArrayInput interface {
	pulumi.Input

	ToLBIpSetArrayOutput() LBIpSetArrayOutput
	ToLBIpSetArrayOutputWithContext(context.Context) LBIpSetArrayOutput
}

type LBIpSetArray []LBIpSetInput

func (LBIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LBIpSet)(nil)).Elem()
}

func (i LBIpSetArray) ToLBIpSetArrayOutput() LBIpSetArrayOutput {
	return i.ToLBIpSetArrayOutputWithContext(context.Background())
}

func (i LBIpSetArray) ToLBIpSetArrayOutputWithContext(ctx context.Context) LBIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBIpSetArrayOutput)
}

type LBIpSetOutput struct{ *pulumi.OutputState }

func (LBIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LBIpSet)(nil)).Elem()
}

func (o LBIpSetOutput) ToLBIpSetOutput() LBIpSetOutput {
	return o
}

func (o LBIpSetOutput) ToLBIpSetOutputWithContext(ctx context.Context) LBIpSetOutput {
	return o
}

// Type of Elastic IP routes.
func (o LBIpSetOutput) InternetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LBIpSet) *string { return v.InternetType }).(pulumi.StringPtrOutput)
}

// Elastic IP address.
func (o LBIpSetOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LBIpSet) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type LBIpSetArrayOutput struct{ *pulumi.OutputState }

func (LBIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LBIpSet)(nil)).Elem()
}

func (o LBIpSetArrayOutput) ToLBIpSetArrayOutput() LBIpSetArrayOutput {
	return o
}

func (o LBIpSetArrayOutput) ToLBIpSetArrayOutputWithContext(ctx context.Context) LBIpSetArrayOutput {
	return o
}

func (o LBIpSetArrayOutput) Index(i pulumi.IntInput) LBIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LBIpSet {
		return vs[0].([]LBIpSet)[vs[1].(int)]
	}).(LBIpSetOutput)
}

type GetLBAttachmentLbAttachment struct {
	// The ID of LB Attachment.
	Id string `pulumi:"id"`
	// Port opened on the backend server to receive requests, range: 1-65535.
	Port int `pulumi:"port"`
	// The private ip address for backend servers.
	PrivateIp string `pulumi:"privateIp"`
	// The ID of a backend server.
	ResourceId string `pulumi:"resourceId"`
	// The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
	Status string `pulumi:"status"`
}

// GetLBAttachmentLbAttachmentInput is an input type that accepts GetLBAttachmentLbAttachmentArgs and GetLBAttachmentLbAttachmentOutput values.
// You can construct a concrete instance of `GetLBAttachmentLbAttachmentInput` via:
//
//          GetLBAttachmentLbAttachmentArgs{...}
type GetLBAttachmentLbAttachmentInput interface {
	pulumi.Input

	ToGetLBAttachmentLbAttachmentOutput() GetLBAttachmentLbAttachmentOutput
	ToGetLBAttachmentLbAttachmentOutputWithContext(context.Context) GetLBAttachmentLbAttachmentOutput
}

type GetLBAttachmentLbAttachmentArgs struct {
	// The ID of LB Attachment.
	Id pulumi.StringInput `pulumi:"id"`
	// Port opened on the backend server to receive requests, range: 1-65535.
	Port pulumi.IntInput `pulumi:"port"`
	// The private ip address for backend servers.
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// The ID of a backend server.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetLBAttachmentLbAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBAttachmentLbAttachment)(nil)).Elem()
}

func (i GetLBAttachmentLbAttachmentArgs) ToGetLBAttachmentLbAttachmentOutput() GetLBAttachmentLbAttachmentOutput {
	return i.ToGetLBAttachmentLbAttachmentOutputWithContext(context.Background())
}

func (i GetLBAttachmentLbAttachmentArgs) ToGetLBAttachmentLbAttachmentOutputWithContext(ctx context.Context) GetLBAttachmentLbAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBAttachmentLbAttachmentOutput)
}

// GetLBAttachmentLbAttachmentArrayInput is an input type that accepts GetLBAttachmentLbAttachmentArray and GetLBAttachmentLbAttachmentArrayOutput values.
// You can construct a concrete instance of `GetLBAttachmentLbAttachmentArrayInput` via:
//
//          GetLBAttachmentLbAttachmentArray{ GetLBAttachmentLbAttachmentArgs{...} }
type GetLBAttachmentLbAttachmentArrayInput interface {
	pulumi.Input

	ToGetLBAttachmentLbAttachmentArrayOutput() GetLBAttachmentLbAttachmentArrayOutput
	ToGetLBAttachmentLbAttachmentArrayOutputWithContext(context.Context) GetLBAttachmentLbAttachmentArrayOutput
}

type GetLBAttachmentLbAttachmentArray []GetLBAttachmentLbAttachmentInput

func (GetLBAttachmentLbAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBAttachmentLbAttachment)(nil)).Elem()
}

func (i GetLBAttachmentLbAttachmentArray) ToGetLBAttachmentLbAttachmentArrayOutput() GetLBAttachmentLbAttachmentArrayOutput {
	return i.ToGetLBAttachmentLbAttachmentArrayOutputWithContext(context.Background())
}

func (i GetLBAttachmentLbAttachmentArray) ToGetLBAttachmentLbAttachmentArrayOutputWithContext(ctx context.Context) GetLBAttachmentLbAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBAttachmentLbAttachmentArrayOutput)
}

type GetLBAttachmentLbAttachmentOutput struct{ *pulumi.OutputState }

func (GetLBAttachmentLbAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBAttachmentLbAttachment)(nil)).Elem()
}

func (o GetLBAttachmentLbAttachmentOutput) ToGetLBAttachmentLbAttachmentOutput() GetLBAttachmentLbAttachmentOutput {
	return o
}

func (o GetLBAttachmentLbAttachmentOutput) ToGetLBAttachmentLbAttachmentOutputWithContext(ctx context.Context) GetLBAttachmentLbAttachmentOutput {
	return o
}

// The ID of LB Attachment.
func (o GetLBAttachmentLbAttachmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBAttachmentLbAttachment) string { return v.Id }).(pulumi.StringOutput)
}

// Port opened on the backend server to receive requests, range: 1-65535.
func (o GetLBAttachmentLbAttachmentOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetLBAttachmentLbAttachment) int { return v.Port }).(pulumi.IntOutput)
}

// The private ip address for backend servers.
func (o GetLBAttachmentLbAttachmentOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBAttachmentLbAttachment) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The ID of a backend server.
func (o GetLBAttachmentLbAttachmentOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBAttachmentLbAttachment) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
func (o GetLBAttachmentLbAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBAttachmentLbAttachment) string { return v.Status }).(pulumi.StringOutput)
}

type GetLBAttachmentLbAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GetLBAttachmentLbAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBAttachmentLbAttachment)(nil)).Elem()
}

func (o GetLBAttachmentLbAttachmentArrayOutput) ToGetLBAttachmentLbAttachmentArrayOutput() GetLBAttachmentLbAttachmentArrayOutput {
	return o
}

func (o GetLBAttachmentLbAttachmentArrayOutput) ToGetLBAttachmentLbAttachmentArrayOutputWithContext(ctx context.Context) GetLBAttachmentLbAttachmentArrayOutput {
	return o
}

func (o GetLBAttachmentLbAttachmentArrayOutput) Index(i pulumi.IntInput) GetLBAttachmentLbAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLBAttachmentLbAttachment {
		return vs[0].([]GetLBAttachmentLbAttachment)[vs[1].(int)]
	}).(GetLBAttachmentLbAttachmentOutput)
}

type GetLBLb struct {
	// The creation time of Load Balancer, formatted in RFC3339 time string.
	CreateTime string `pulumi:"createTime"`
	// The ID of Load Balancer.
	Id string `pulumi:"id"`
	// Indicate whether the load balancer is intranet.
	Internal bool           `pulumi:"internal"`
	IpSets   []GetLBLbIpSet `pulumi:"ipSets"`
	// The name of Load Balancer.
	Name string `pulumi:"name"`
	// The IP address of intranet IP.
	PrivateIp string `pulumi:"privateIp"`
	// The remarks of Load Balancer.
	Remark string `pulumi:"remark"`
	// The ID of subnet that intrant load balancer belongs to.
	SubnetId string `pulumi:"subnetId"`
	// A tag assigned to Load Balancer.
	Tag string `pulumi:"tag"`
	// The ID of the VPC linked to the Load Balancers.
	VpcId string `pulumi:"vpcId"`
}

// GetLBLbInput is an input type that accepts GetLBLbArgs and GetLBLbOutput values.
// You can construct a concrete instance of `GetLBLbInput` via:
//
//          GetLBLbArgs{...}
type GetLBLbInput interface {
	pulumi.Input

	ToGetLBLbOutput() GetLBLbOutput
	ToGetLBLbOutputWithContext(context.Context) GetLBLbOutput
}

type GetLBLbArgs struct {
	// The creation time of Load Balancer, formatted in RFC3339 time string.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ID of Load Balancer.
	Id pulumi.StringInput `pulumi:"id"`
	// Indicate whether the load balancer is intranet.
	Internal pulumi.BoolInput       `pulumi:"internal"`
	IpSets   GetLBLbIpSetArrayInput `pulumi:"ipSets"`
	// The name of Load Balancer.
	Name pulumi.StringInput `pulumi:"name"`
	// The IP address of intranet IP.
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// The remarks of Load Balancer.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The ID of subnet that intrant load balancer belongs to.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A tag assigned to Load Balancer.
	Tag pulumi.StringInput `pulumi:"tag"`
	// The ID of the VPC linked to the Load Balancers.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetLBLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBLb)(nil)).Elem()
}

func (i GetLBLbArgs) ToGetLBLbOutput() GetLBLbOutput {
	return i.ToGetLBLbOutputWithContext(context.Background())
}

func (i GetLBLbArgs) ToGetLBLbOutputWithContext(ctx context.Context) GetLBLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBLbOutput)
}

// GetLBLbArrayInput is an input type that accepts GetLBLbArray and GetLBLbArrayOutput values.
// You can construct a concrete instance of `GetLBLbArrayInput` via:
//
//          GetLBLbArray{ GetLBLbArgs{...} }
type GetLBLbArrayInput interface {
	pulumi.Input

	ToGetLBLbArrayOutput() GetLBLbArrayOutput
	ToGetLBLbArrayOutputWithContext(context.Context) GetLBLbArrayOutput
}

type GetLBLbArray []GetLBLbInput

func (GetLBLbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBLb)(nil)).Elem()
}

func (i GetLBLbArray) ToGetLBLbArrayOutput() GetLBLbArrayOutput {
	return i.ToGetLBLbArrayOutputWithContext(context.Background())
}

func (i GetLBLbArray) ToGetLBLbArrayOutputWithContext(ctx context.Context) GetLBLbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBLbArrayOutput)
}

type GetLBLbOutput struct{ *pulumi.OutputState }

func (GetLBLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBLb)(nil)).Elem()
}

func (o GetLBLbOutput) ToGetLBLbOutput() GetLBLbOutput {
	return o
}

func (o GetLBLbOutput) ToGetLBLbOutputWithContext(ctx context.Context) GetLBLbOutput {
	return o
}

// The creation time of Load Balancer, formatted in RFC3339 time string.
func (o GetLBLbOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBLb) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of Load Balancer.
func (o GetLBLbOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBLb) string { return v.Id }).(pulumi.StringOutput)
}

// Indicate whether the load balancer is intranet.
func (o GetLBLbOutput) Internal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLBLb) bool { return v.Internal }).(pulumi.BoolOutput)
}

func (o GetLBLbOutput) IpSets() GetLBLbIpSetArrayOutput {
	return o.ApplyT(func(v GetLBLb) []GetLBLbIpSet { return v.IpSets }).(GetLBLbIpSetArrayOutput)
}

// The name of Load Balancer.
func (o GetLBLbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBLb) string { return v.Name }).(pulumi.StringOutput)
}

// The IP address of intranet IP.
func (o GetLBLbOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBLb) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The remarks of Load Balancer.
func (o GetLBLbOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBLb) string { return v.Remark }).(pulumi.StringOutput)
}

// The ID of subnet that intrant load balancer belongs to.
func (o GetLBLbOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBLb) string { return v.SubnetId }).(pulumi.StringOutput)
}

// A tag assigned to Load Balancer.
func (o GetLBLbOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBLb) string { return v.Tag }).(pulumi.StringOutput)
}

// The ID of the VPC linked to the Load Balancers.
func (o GetLBLbOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBLb) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetLBLbArrayOutput struct{ *pulumi.OutputState }

func (GetLBLbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBLb)(nil)).Elem()
}

func (o GetLBLbArrayOutput) ToGetLBLbArrayOutput() GetLBLbArrayOutput {
	return o
}

func (o GetLBLbArrayOutput) ToGetLBLbArrayOutputWithContext(ctx context.Context) GetLBLbArrayOutput {
	return o
}

func (o GetLBLbArrayOutput) Index(i pulumi.IntInput) GetLBLbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLBLb {
		return vs[0].([]GetLBLb)[vs[1].(int)]
	}).(GetLBLbOutput)
}

type GetLBLbIpSet struct {
	// Type of Load Balancer routes.
	InternetType string `pulumi:"internetType"`
	// Load Balancer address.
	Ip string `pulumi:"ip"`
}

// GetLBLbIpSetInput is an input type that accepts GetLBLbIpSetArgs and GetLBLbIpSetOutput values.
// You can construct a concrete instance of `GetLBLbIpSetInput` via:
//
//          GetLBLbIpSetArgs{...}
type GetLBLbIpSetInput interface {
	pulumi.Input

	ToGetLBLbIpSetOutput() GetLBLbIpSetOutput
	ToGetLBLbIpSetOutputWithContext(context.Context) GetLBLbIpSetOutput
}

type GetLBLbIpSetArgs struct {
	// Type of Load Balancer routes.
	InternetType pulumi.StringInput `pulumi:"internetType"`
	// Load Balancer address.
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (GetLBLbIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBLbIpSet)(nil)).Elem()
}

func (i GetLBLbIpSetArgs) ToGetLBLbIpSetOutput() GetLBLbIpSetOutput {
	return i.ToGetLBLbIpSetOutputWithContext(context.Background())
}

func (i GetLBLbIpSetArgs) ToGetLBLbIpSetOutputWithContext(ctx context.Context) GetLBLbIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBLbIpSetOutput)
}

// GetLBLbIpSetArrayInput is an input type that accepts GetLBLbIpSetArray and GetLBLbIpSetArrayOutput values.
// You can construct a concrete instance of `GetLBLbIpSetArrayInput` via:
//
//          GetLBLbIpSetArray{ GetLBLbIpSetArgs{...} }
type GetLBLbIpSetArrayInput interface {
	pulumi.Input

	ToGetLBLbIpSetArrayOutput() GetLBLbIpSetArrayOutput
	ToGetLBLbIpSetArrayOutputWithContext(context.Context) GetLBLbIpSetArrayOutput
}

type GetLBLbIpSetArray []GetLBLbIpSetInput

func (GetLBLbIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBLbIpSet)(nil)).Elem()
}

func (i GetLBLbIpSetArray) ToGetLBLbIpSetArrayOutput() GetLBLbIpSetArrayOutput {
	return i.ToGetLBLbIpSetArrayOutputWithContext(context.Background())
}

func (i GetLBLbIpSetArray) ToGetLBLbIpSetArrayOutputWithContext(ctx context.Context) GetLBLbIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBLbIpSetArrayOutput)
}

type GetLBLbIpSetOutput struct{ *pulumi.OutputState }

func (GetLBLbIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBLbIpSet)(nil)).Elem()
}

func (o GetLBLbIpSetOutput) ToGetLBLbIpSetOutput() GetLBLbIpSetOutput {
	return o
}

func (o GetLBLbIpSetOutput) ToGetLBLbIpSetOutputWithContext(ctx context.Context) GetLBLbIpSetOutput {
	return o
}

// Type of Load Balancer routes.
func (o GetLBLbIpSetOutput) InternetType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBLbIpSet) string { return v.InternetType }).(pulumi.StringOutput)
}

// Load Balancer address.
func (o GetLBLbIpSetOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBLbIpSet) string { return v.Ip }).(pulumi.StringOutput)
}

type GetLBLbIpSetArrayOutput struct{ *pulumi.OutputState }

func (GetLBLbIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBLbIpSet)(nil)).Elem()
}

func (o GetLBLbIpSetArrayOutput) ToGetLBLbIpSetArrayOutput() GetLBLbIpSetArrayOutput {
	return o
}

func (o GetLBLbIpSetArrayOutput) ToGetLBLbIpSetArrayOutputWithContext(ctx context.Context) GetLBLbIpSetArrayOutput {
	return o
}

func (o GetLBLbIpSetArrayOutput) Index(i pulumi.IntInput) GetLBLbIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLBLbIpSet {
		return vs[0].([]GetLBLbIpSet)[vs[1].(int)]
	}).(GetLBLbIpSetOutput)
}

type GetLBListenersLbListener struct {
	// Health check domain checking.
	Domain string `pulumi:"domain"`
	// Health check method. Possible values are `port` as port checking and `path` as http checking.
	HealthCheckType string `pulumi:"healthCheckType"`
	// The ID of LB Listener.
	Id string `pulumi:"id"`
	// Amount of time in seconds to wait for the response for in between two sessions if `listenType` is `requestProxy`, range: 0-86400. Amount of time in seconds to wait for one session if `listenType` is `packetsTransmit`, range: 60-900. The session will be closed as soon as no response if it is `0`.
	IdleTimeout int `pulumi:"idleTimeout"`
	// The type of LB Listener. Possible values are `requestProxy` and `packetsTransmit`.
	ListenType string `pulumi:"listenType"`
	// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`.
	// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
	// - The `rundrobin`, `source` and `weightRoundrobin` and `leastconn` are vaild if `listenType` is `requestProxy`.
	Method string `pulumi:"method"`
	// The name of LB Listener.
	Name string `pulumi:"name"`
	// Health check path checking.
	Path string `pulumi:"path"`
	// Indicate whether the persistence session is enabled, it is invaild if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
	Persistence string `pulumi:"persistence"`
	// The type of session persistence of LB Listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated string and `userDefined` as cutom string. (Default: `none`).
	PersistenceType string `pulumi:"persistenceType"`
	// Port opened on the LB Listener to receive requests, range: 1-65535.
	Port int `pulumi:"port"`
	// LB Listener protocol. Possible values: `http`, `https` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
	Protocol string `pulumi:"protocol"`
	// LB Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.
	Status string `pulumi:"status"`
}

// GetLBListenersLbListenerInput is an input type that accepts GetLBListenersLbListenerArgs and GetLBListenersLbListenerOutput values.
// You can construct a concrete instance of `GetLBListenersLbListenerInput` via:
//
//          GetLBListenersLbListenerArgs{...}
type GetLBListenersLbListenerInput interface {
	pulumi.Input

	ToGetLBListenersLbListenerOutput() GetLBListenersLbListenerOutput
	ToGetLBListenersLbListenerOutputWithContext(context.Context) GetLBListenersLbListenerOutput
}

type GetLBListenersLbListenerArgs struct {
	// Health check domain checking.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Health check method. Possible values are `port` as port checking and `path` as http checking.
	HealthCheckType pulumi.StringInput `pulumi:"healthCheckType"`
	// The ID of LB Listener.
	Id pulumi.StringInput `pulumi:"id"`
	// Amount of time in seconds to wait for the response for in between two sessions if `listenType` is `requestProxy`, range: 0-86400. Amount of time in seconds to wait for one session if `listenType` is `packetsTransmit`, range: 60-900. The session will be closed as soon as no response if it is `0`.
	IdleTimeout pulumi.IntInput `pulumi:"idleTimeout"`
	// The type of LB Listener. Possible values are `requestProxy` and `packetsTransmit`.
	ListenType pulumi.StringInput `pulumi:"listenType"`
	// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`.
	// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
	// - The `rundrobin`, `source` and `weightRoundrobin` and `leastconn` are vaild if `listenType` is `requestProxy`.
	Method pulumi.StringInput `pulumi:"method"`
	// The name of LB Listener.
	Name pulumi.StringInput `pulumi:"name"`
	// Health check path checking.
	Path pulumi.StringInput `pulumi:"path"`
	// Indicate whether the persistence session is enabled, it is invaild if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
	Persistence pulumi.StringInput `pulumi:"persistence"`
	// The type of session persistence of LB Listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated string and `userDefined` as cutom string. (Default: `none`).
	PersistenceType pulumi.StringInput `pulumi:"persistenceType"`
	// Port opened on the LB Listener to receive requests, range: 1-65535.
	Port pulumi.IntInput `pulumi:"port"`
	// LB Listener protocol. Possible values: `http`, `https` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// LB Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetLBListenersLbListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBListenersLbListener)(nil)).Elem()
}

func (i GetLBListenersLbListenerArgs) ToGetLBListenersLbListenerOutput() GetLBListenersLbListenerOutput {
	return i.ToGetLBListenersLbListenerOutputWithContext(context.Background())
}

func (i GetLBListenersLbListenerArgs) ToGetLBListenersLbListenerOutputWithContext(ctx context.Context) GetLBListenersLbListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBListenersLbListenerOutput)
}

// GetLBListenersLbListenerArrayInput is an input type that accepts GetLBListenersLbListenerArray and GetLBListenersLbListenerArrayOutput values.
// You can construct a concrete instance of `GetLBListenersLbListenerArrayInput` via:
//
//          GetLBListenersLbListenerArray{ GetLBListenersLbListenerArgs{...} }
type GetLBListenersLbListenerArrayInput interface {
	pulumi.Input

	ToGetLBListenersLbListenerArrayOutput() GetLBListenersLbListenerArrayOutput
	ToGetLBListenersLbListenerArrayOutputWithContext(context.Context) GetLBListenersLbListenerArrayOutput
}

type GetLBListenersLbListenerArray []GetLBListenersLbListenerInput

func (GetLBListenersLbListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBListenersLbListener)(nil)).Elem()
}

func (i GetLBListenersLbListenerArray) ToGetLBListenersLbListenerArrayOutput() GetLBListenersLbListenerArrayOutput {
	return i.ToGetLBListenersLbListenerArrayOutputWithContext(context.Background())
}

func (i GetLBListenersLbListenerArray) ToGetLBListenersLbListenerArrayOutputWithContext(ctx context.Context) GetLBListenersLbListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBListenersLbListenerArrayOutput)
}

type GetLBListenersLbListenerOutput struct{ *pulumi.OutputState }

func (GetLBListenersLbListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBListenersLbListener)(nil)).Elem()
}

func (o GetLBListenersLbListenerOutput) ToGetLBListenersLbListenerOutput() GetLBListenersLbListenerOutput {
	return o
}

func (o GetLBListenersLbListenerOutput) ToGetLBListenersLbListenerOutputWithContext(ctx context.Context) GetLBListenersLbListenerOutput {
	return o
}

// Health check domain checking.
func (o GetLBListenersLbListenerOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.Domain }).(pulumi.StringOutput)
}

// Health check method. Possible values are `port` as port checking and `path` as http checking.
func (o GetLBListenersLbListenerOutput) HealthCheckType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.HealthCheckType }).(pulumi.StringOutput)
}

// The ID of LB Listener.
func (o GetLBListenersLbListenerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.Id }).(pulumi.StringOutput)
}

// Amount of time in seconds to wait for the response for in between two sessions if `listenType` is `requestProxy`, range: 0-86400. Amount of time in seconds to wait for one session if `listenType` is `packetsTransmit`, range: 60-900. The session will be closed as soon as no response if it is `0`.
func (o GetLBListenersLbListenerOutput) IdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) int { return v.IdleTimeout }).(pulumi.IntOutput)
}

// The type of LB Listener. Possible values are `requestProxy` and `packetsTransmit`.
func (o GetLBListenersLbListenerOutput) ListenType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.ListenType }).(pulumi.StringOutput)
}

// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`.
// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
// - The `rundrobin`, `source` and `weightRoundrobin` and `leastconn` are vaild if `listenType` is `requestProxy`.
func (o GetLBListenersLbListenerOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.Method }).(pulumi.StringOutput)
}

// The name of LB Listener.
func (o GetLBListenersLbListenerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.Name }).(pulumi.StringOutput)
}

// Health check path checking.
func (o GetLBListenersLbListenerOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.Path }).(pulumi.StringOutput)
}

// Indicate whether the persistence session is enabled, it is invaild if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
func (o GetLBListenersLbListenerOutput) Persistence() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.Persistence }).(pulumi.StringOutput)
}

// The type of session persistence of LB Listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated string and `userDefined` as cutom string. (Default: `none`).
func (o GetLBListenersLbListenerOutput) PersistenceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.PersistenceType }).(pulumi.StringOutput)
}

// Port opened on the LB Listener to receive requests, range: 1-65535.
func (o GetLBListenersLbListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) int { return v.Port }).(pulumi.IntOutput)
}

// LB Listener protocol. Possible values: `http`, `https` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
func (o GetLBListenersLbListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.Protocol }).(pulumi.StringOutput)
}

// LB Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.
func (o GetLBListenersLbListenerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBListenersLbListener) string { return v.Status }).(pulumi.StringOutput)
}

type GetLBListenersLbListenerArrayOutput struct{ *pulumi.OutputState }

func (GetLBListenersLbListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBListenersLbListener)(nil)).Elem()
}

func (o GetLBListenersLbListenerArrayOutput) ToGetLBListenersLbListenerArrayOutput() GetLBListenersLbListenerArrayOutput {
	return o
}

func (o GetLBListenersLbListenerArrayOutput) ToGetLBListenersLbListenerArrayOutputWithContext(ctx context.Context) GetLBListenersLbListenerArrayOutput {
	return o
}

func (o GetLBListenersLbListenerArrayOutput) Index(i pulumi.IntInput) GetLBListenersLbListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLBListenersLbListener {
		return vs[0].([]GetLBListenersLbListener)[vs[1].(int)]
	}).(GetLBListenersLbListenerOutput)
}

type GetLBRulesLbRule struct {
	// (Optional) The domain of content forward matching fields. `path` and `domain` cannot coexist.
	Domain string `pulumi:"domain"`
	// The ID of LB Rule.
	Id string `pulumi:"id"`
	// (Optional) The path of Content forward matching fields. `path` and `domain` cannot coexist.
	Path string `pulumi:"path"`
}

// GetLBRulesLbRuleInput is an input type that accepts GetLBRulesLbRuleArgs and GetLBRulesLbRuleOutput values.
// You can construct a concrete instance of `GetLBRulesLbRuleInput` via:
//
//          GetLBRulesLbRuleArgs{...}
type GetLBRulesLbRuleInput interface {
	pulumi.Input

	ToGetLBRulesLbRuleOutput() GetLBRulesLbRuleOutput
	ToGetLBRulesLbRuleOutputWithContext(context.Context) GetLBRulesLbRuleOutput
}

type GetLBRulesLbRuleArgs struct {
	// (Optional) The domain of content forward matching fields. `path` and `domain` cannot coexist.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of LB Rule.
	Id pulumi.StringInput `pulumi:"id"`
	// (Optional) The path of Content forward matching fields. `path` and `domain` cannot coexist.
	Path pulumi.StringInput `pulumi:"path"`
}

func (GetLBRulesLbRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBRulesLbRule)(nil)).Elem()
}

func (i GetLBRulesLbRuleArgs) ToGetLBRulesLbRuleOutput() GetLBRulesLbRuleOutput {
	return i.ToGetLBRulesLbRuleOutputWithContext(context.Background())
}

func (i GetLBRulesLbRuleArgs) ToGetLBRulesLbRuleOutputWithContext(ctx context.Context) GetLBRulesLbRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBRulesLbRuleOutput)
}

// GetLBRulesLbRuleArrayInput is an input type that accepts GetLBRulesLbRuleArray and GetLBRulesLbRuleArrayOutput values.
// You can construct a concrete instance of `GetLBRulesLbRuleArrayInput` via:
//
//          GetLBRulesLbRuleArray{ GetLBRulesLbRuleArgs{...} }
type GetLBRulesLbRuleArrayInput interface {
	pulumi.Input

	ToGetLBRulesLbRuleArrayOutput() GetLBRulesLbRuleArrayOutput
	ToGetLBRulesLbRuleArrayOutputWithContext(context.Context) GetLBRulesLbRuleArrayOutput
}

type GetLBRulesLbRuleArray []GetLBRulesLbRuleInput

func (GetLBRulesLbRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBRulesLbRule)(nil)).Elem()
}

func (i GetLBRulesLbRuleArray) ToGetLBRulesLbRuleArrayOutput() GetLBRulesLbRuleArrayOutput {
	return i.ToGetLBRulesLbRuleArrayOutputWithContext(context.Background())
}

func (i GetLBRulesLbRuleArray) ToGetLBRulesLbRuleArrayOutputWithContext(ctx context.Context) GetLBRulesLbRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBRulesLbRuleArrayOutput)
}

type GetLBRulesLbRuleOutput struct{ *pulumi.OutputState }

func (GetLBRulesLbRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBRulesLbRule)(nil)).Elem()
}

func (o GetLBRulesLbRuleOutput) ToGetLBRulesLbRuleOutput() GetLBRulesLbRuleOutput {
	return o
}

func (o GetLBRulesLbRuleOutput) ToGetLBRulesLbRuleOutputWithContext(ctx context.Context) GetLBRulesLbRuleOutput {
	return o
}

// (Optional) The domain of content forward matching fields. `path` and `domain` cannot coexist.
func (o GetLBRulesLbRuleOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBRulesLbRule) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of LB Rule.
func (o GetLBRulesLbRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBRulesLbRule) string { return v.Id }).(pulumi.StringOutput)
}

// (Optional) The path of Content forward matching fields. `path` and `domain` cannot coexist.
func (o GetLBRulesLbRuleOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBRulesLbRule) string { return v.Path }).(pulumi.StringOutput)
}

type GetLBRulesLbRuleArrayOutput struct{ *pulumi.OutputState }

func (GetLBRulesLbRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBRulesLbRule)(nil)).Elem()
}

func (o GetLBRulesLbRuleArrayOutput) ToGetLBRulesLbRuleArrayOutput() GetLBRulesLbRuleArrayOutput {
	return o
}

func (o GetLBRulesLbRuleArrayOutput) ToGetLBRulesLbRuleArrayOutputWithContext(ctx context.Context) GetLBRulesLbRuleArrayOutput {
	return o
}

func (o GetLBRulesLbRuleArrayOutput) Index(i pulumi.IntInput) GetLBRulesLbRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLBRulesLbRule {
		return vs[0].([]GetLBRulesLbRule)[vs[1].(int)]
	}).(GetLBRulesLbRuleOutput)
}

type GetLBSslLbSsl struct {
	// The time of creation for lb ssl, formatted in RFC3339 time string.
	CreateTime string `pulumi:"createTime"`
	// The ID of LB SSL certificate resource.
	Id string `pulumi:"id"`
	// The name of LB SSL certificate resource.
	Name string `pulumi:"name"`
}

// GetLBSslLbSslInput is an input type that accepts GetLBSslLbSslArgs and GetLBSslLbSslOutput values.
// You can construct a concrete instance of `GetLBSslLbSslInput` via:
//
//          GetLBSslLbSslArgs{...}
type GetLBSslLbSslInput interface {
	pulumi.Input

	ToGetLBSslLbSslOutput() GetLBSslLbSslOutput
	ToGetLBSslLbSslOutputWithContext(context.Context) GetLBSslLbSslOutput
}

type GetLBSslLbSslArgs struct {
	// The time of creation for lb ssl, formatted in RFC3339 time string.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The ID of LB SSL certificate resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of LB SSL certificate resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetLBSslLbSslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBSslLbSsl)(nil)).Elem()
}

func (i GetLBSslLbSslArgs) ToGetLBSslLbSslOutput() GetLBSslLbSslOutput {
	return i.ToGetLBSslLbSslOutputWithContext(context.Background())
}

func (i GetLBSslLbSslArgs) ToGetLBSslLbSslOutputWithContext(ctx context.Context) GetLBSslLbSslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBSslLbSslOutput)
}

// GetLBSslLbSslArrayInput is an input type that accepts GetLBSslLbSslArray and GetLBSslLbSslArrayOutput values.
// You can construct a concrete instance of `GetLBSslLbSslArrayInput` via:
//
//          GetLBSslLbSslArray{ GetLBSslLbSslArgs{...} }
type GetLBSslLbSslArrayInput interface {
	pulumi.Input

	ToGetLBSslLbSslArrayOutput() GetLBSslLbSslArrayOutput
	ToGetLBSslLbSslArrayOutputWithContext(context.Context) GetLBSslLbSslArrayOutput
}

type GetLBSslLbSslArray []GetLBSslLbSslInput

func (GetLBSslLbSslArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBSslLbSsl)(nil)).Elem()
}

func (i GetLBSslLbSslArray) ToGetLBSslLbSslArrayOutput() GetLBSslLbSslArrayOutput {
	return i.ToGetLBSslLbSslArrayOutputWithContext(context.Background())
}

func (i GetLBSslLbSslArray) ToGetLBSslLbSslArrayOutputWithContext(ctx context.Context) GetLBSslLbSslArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBSslLbSslArrayOutput)
}

type GetLBSslLbSslOutput struct{ *pulumi.OutputState }

func (GetLBSslLbSslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBSslLbSsl)(nil)).Elem()
}

func (o GetLBSslLbSslOutput) ToGetLBSslLbSslOutput() GetLBSslLbSslOutput {
	return o
}

func (o GetLBSslLbSslOutput) ToGetLBSslLbSslOutputWithContext(ctx context.Context) GetLBSslLbSslOutput {
	return o
}

// The time of creation for lb ssl, formatted in RFC3339 time string.
func (o GetLBSslLbSslOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBSslLbSsl) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of LB SSL certificate resource.
func (o GetLBSslLbSslOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBSslLbSsl) string { return v.Id }).(pulumi.StringOutput)
}

// The name of LB SSL certificate resource.
func (o GetLBSslLbSslOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBSslLbSsl) string { return v.Name }).(pulumi.StringOutput)
}

type GetLBSslLbSslArrayOutput struct{ *pulumi.OutputState }

func (GetLBSslLbSslArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBSslLbSsl)(nil)).Elem()
}

func (o GetLBSslLbSslArrayOutput) ToGetLBSslLbSslArrayOutput() GetLBSslLbSslArrayOutput {
	return o
}

func (o GetLBSslLbSslArrayOutput) ToGetLBSslLbSslArrayOutputWithContext(ctx context.Context) GetLBSslLbSslArrayOutput {
	return o
}

func (o GetLBSslLbSslArrayOutput) Index(i pulumi.IntInput) GetLBSslLbSslOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLBSslLbSsl {
		return vs[0].([]GetLBSslLbSsl)[vs[1].(int)]
	}).(GetLBSslLbSslOutput)
}

func init() {
	pulumi.RegisterOutputType(LBIpSetOutput{})
	pulumi.RegisterOutputType(LBIpSetArrayOutput{})
	pulumi.RegisterOutputType(GetLBAttachmentLbAttachmentOutput{})
	pulumi.RegisterOutputType(GetLBAttachmentLbAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GetLBLbOutput{})
	pulumi.RegisterOutputType(GetLBLbArrayOutput{})
	pulumi.RegisterOutputType(GetLBLbIpSetOutput{})
	pulumi.RegisterOutputType(GetLBLbIpSetArrayOutput{})
	pulumi.RegisterOutputType(GetLBListenersLbListenerOutput{})
	pulumi.RegisterOutputType(GetLBListenersLbListenerArrayOutput{})
	pulumi.RegisterOutputType(GetLBRulesLbRuleOutput{})
	pulumi.RegisterOutputType(GetLBRulesLbRuleArrayOutput{})
	pulumi.RegisterOutputType(GetLBSslLbSslOutput{})
	pulumi.RegisterOutputType(GetLBSslLbSslArrayOutput{})
}
