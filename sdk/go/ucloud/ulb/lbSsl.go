// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ulb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Load Balancer SSL certificate resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/r/lb_ssl.html.markdown.
type LbSsl struct {
	s *pulumi.ResourceState
}

// NewLbSsl registers a new resource with the given unique name, arguments, and options.
func NewLbSsl(ctx *pulumi.Context,
	name string, args *LbSslArgs, opts ...pulumi.ResourceOpt) (*LbSsl, error) {
	if args == nil || args.PrivateKey == nil {
		return nil, errors.New("missing required argument 'PrivateKey'")
	}
	if args == nil || args.UserCert == nil {
		return nil, errors.New("missing required argument 'UserCert'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["caCert"] = nil
		inputs["name"] = nil
		inputs["privateKey"] = nil
		inputs["userCert"] = nil
	} else {
		inputs["caCert"] = args.CaCert
		inputs["name"] = args.Name
		inputs["privateKey"] = args.PrivateKey
		inputs["userCert"] = args.UserCert
	}
	inputs["createTime"] = nil
	s, err := ctx.RegisterResource("ucloud:ulb/lbSsl:LbSsl", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LbSsl{s: s}, nil
}

// GetLbSsl gets an existing LbSsl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbSsl(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LbSslState, opts ...pulumi.ResourceOpt) (*LbSsl, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["caCert"] = state.CaCert
		inputs["createTime"] = state.CreateTime
		inputs["name"] = state.Name
		inputs["privateKey"] = state.PrivateKey
		inputs["userCert"] = state.UserCert
	}
	s, err := ctx.ReadResource("ucloud:ulb/lbSsl:LbSsl", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LbSsl{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LbSsl) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LbSsl) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The content of the CA certificate about ssl certificate.
func (r *LbSsl) CaCert() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["caCert"])
}

// The time of creation for lb ssl, formatted in RFC3339 time string.
func (r *LbSsl) CreateTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createTime"])
}

func (r *LbSsl) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The content of the private key about ssl certificate.
func (r *LbSsl) PrivateKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateKey"])
}

// The content of the user certificate about ssl certificate.
func (r *LbSsl) UserCert() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userCert"])
}

// Input properties used for looking up and filtering LbSsl resources.
type LbSslState struct {
	// The content of the CA certificate about ssl certificate.
	CaCert interface{}
	// The time of creation for lb ssl, formatted in RFC3339 time string.
	CreateTime interface{}
	Name       interface{}
	// The content of the private key about ssl certificate.
	PrivateKey interface{}
	// The content of the user certificate about ssl certificate.
	UserCert interface{}
}

// The set of arguments for constructing a LbSsl resource.
type LbSslArgs struct {
	// The content of the CA certificate about ssl certificate.
	CaCert interface{}
	Name   interface{}
	// The content of the private key about ssl certificate.
	PrivateKey interface{}
	// The content of the user certificate about ssl certificate.
	UserCert interface{}
}
