// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ulb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Load Balancer Listener resource.
//
// > **Note** This `listenType` only support when `protocol` is `tcp` in the extranet mode and the default value is `requestProxy`. In addition, in the extranet mode, the `listenType` is `requestProxy` if `protocol`is `http` or `https`, the `listenType` is `packetsTransmit` if `protocol`is `udp`. In the intranet mode, the `listenType` is `packetsTransmit`.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/r/lb_listener.html.markdown.
type LbListener struct {
	s *pulumi.ResourceState
}

// NewLbListener registers a new resource with the given unique name, arguments, and options.
func NewLbListener(ctx *pulumi.Context,
	name string, args *LbListenerArgs, opts ...pulumi.ResourceOpt) (*LbListener, error) {
	if args == nil || args.LoadBalancerId == nil {
		return nil, errors.New("missing required argument 'LoadBalancerId'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["domain"] = nil
		inputs["healthCheckType"] = nil
		inputs["idleTimeout"] = nil
		inputs["listenType"] = nil
		inputs["loadBalancerId"] = nil
		inputs["method"] = nil
		inputs["name"] = nil
		inputs["path"] = nil
		inputs["persistence"] = nil
		inputs["persistenceType"] = nil
		inputs["port"] = nil
		inputs["protocol"] = nil
	} else {
		inputs["domain"] = args.Domain
		inputs["healthCheckType"] = args.HealthCheckType
		inputs["idleTimeout"] = args.IdleTimeout
		inputs["listenType"] = args.ListenType
		inputs["loadBalancerId"] = args.LoadBalancerId
		inputs["method"] = args.Method
		inputs["name"] = args.Name
		inputs["path"] = args.Path
		inputs["persistence"] = args.Persistence
		inputs["persistenceType"] = args.PersistenceType
		inputs["port"] = args.Port
		inputs["protocol"] = args.Protocol
	}
	inputs["status"] = nil
	s, err := ctx.RegisterResource("ucloud:ulb/lbListener:LbListener", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LbListener{s: s}, nil
}

// GetLbListener gets an existing LbListener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbListener(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LbListenerState, opts ...pulumi.ResourceOpt) (*LbListener, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["domain"] = state.Domain
		inputs["healthCheckType"] = state.HealthCheckType
		inputs["idleTimeout"] = state.IdleTimeout
		inputs["listenType"] = state.ListenType
		inputs["loadBalancerId"] = state.LoadBalancerId
		inputs["method"] = state.Method
		inputs["name"] = state.Name
		inputs["path"] = state.Path
		inputs["persistence"] = state.Persistence
		inputs["persistenceType"] = state.PersistenceType
		inputs["port"] = state.Port
		inputs["protocol"] = state.Protocol
		inputs["status"] = state.Status
	}
	s, err := ctx.ReadResource("ucloud:ulb/lbListener:LbListener", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LbListener{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LbListener) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LbListener) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Health check domain checking.
func (r *LbListener) Domain() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["domain"])
}

// Health check method. Possible values are `port` as port checking and `path` as http checking.
func (r *LbListener) HealthCheckType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["healthCheckType"])
}

// Amount of time in seconds to wait for the response for in between two sessions if `listenType` is `requestProxy`, range: 0-86400. (Default: `60`). Amount of time in seconds to wait for one session if `listenType` is `packetsTransmit`, range: 60-900. The session will be closed as soon as no response if it is `0`.
func (r *LbListener) IdleTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["idleTimeout"])
}

// The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/guide/fu-wu-jie-dian-xiang-guan-cao-zuo/editrealserver).
func (r *LbListener) ListenType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["listenType"])
}

// The ID of load balancer instance.
func (r *LbListener) LoadBalancerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancerId"])
}

// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
// - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
func (r *LbListener) Method() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["method"])
}

func (r *LbListener) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Health check path checking.
func (r *LbListener) Path() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["path"])
}

// Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
func (r *LbListener) Persistence() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["persistence"])
}

// The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
func (r *LbListener) PersistenceType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["persistenceType"])
}

// Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
func (r *LbListener) Port() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["port"])
}

// Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
func (r *LbListener) Protocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protocol"])
}

// Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.
func (r *LbListener) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Input properties used for looking up and filtering LbListener resources.
type LbListenerState struct {
	// Health check domain checking.
	Domain interface{}
	// Health check method. Possible values are `port` as port checking and `path` as http checking.
	HealthCheckType interface{}
	// Amount of time in seconds to wait for the response for in between two sessions if `listenType` is `requestProxy`, range: 0-86400. (Default: `60`). Amount of time in seconds to wait for one session if `listenType` is `packetsTransmit`, range: 60-900. The session will be closed as soon as no response if it is `0`.
	IdleTimeout interface{}
	// The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/guide/fu-wu-jie-dian-xiang-guan-cao-zuo/editrealserver).
	ListenType interface{}
	// The ID of load balancer instance.
	LoadBalancerId interface{}
	// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
	// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
	// - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
	Method interface{}
	Name   interface{}
	// Health check path checking.
	Path interface{}
	// Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
	Persistence interface{}
	// The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
	PersistenceType interface{}
	// Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
	Port interface{}
	// Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
	Protocol interface{}
	// Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.
	Status interface{}
}

// The set of arguments for constructing a LbListener resource.
type LbListenerArgs struct {
	// Health check domain checking.
	Domain interface{}
	// Health check method. Possible values are `port` as port checking and `path` as http checking.
	HealthCheckType interface{}
	// Amount of time in seconds to wait for the response for in between two sessions if `listenType` is `requestProxy`, range: 0-86400. (Default: `60`). Amount of time in seconds to wait for one session if `listenType` is `packetsTransmit`, range: 60-900. The session will be closed as soon as no response if it is `0`.
	IdleTimeout interface{}
	// The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/guide/fu-wu-jie-dian-xiang-guan-cao-zuo/editrealserver).
	ListenType interface{}
	// The ID of load balancer instance.
	LoadBalancerId interface{}
	// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
	// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
	// - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
	Method interface{}
	Name   interface{}
	// Health check path checking.
	Path interface{}
	// Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
	Persistence interface{}
	// The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
	PersistenceType interface{}
	// Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
	Port interface{}
	// Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
	Protocol interface{}
}
