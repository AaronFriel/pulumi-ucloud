// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ulb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Load Balancer Listener resource.
//
// > **Note** This `listenType` only support when `protocol` is `tcp` in the extranet mode and the default value is `requestProxy`. In addition, in the extranet mode, the `listenType` is `requestProxy` if `protocol`is `http` or `https`, the `listenType` is `packetsTransmit` if `protocol`is `udp`. In the intranet mode, the `listenType` is `packetsTransmit`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ulb"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		web, err := ulb.NewLB(ctx, "web", &ulb.LBArgs{
// 			Tag: pulumi.String("tf-example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ulb.NewLBListener(ctx, "example", &ulb.LBListenerArgs{
// 			LoadBalancerId: web.ID(),
// 			Protocol:       pulumi.String("http"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// LB Listener can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import ucloud:ulb/lBListener:LBListener example vserver-abcdefg
// ```
type LBListener struct {
	pulumi.CustomResourceState

	// Health check domain checking.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Health check method. Possible values are `port` as port checking and `path` as http checking.
	HealthCheckType pulumi.StringOutput `pulumi:"healthCheckType"`
	// Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listenType` is `requestProxy`, range: 60-900 when `listenType` is `packetsTransmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.
	IdleTimeout pulumi.IntOutput `pulumi:"idleTimeout"`
	// The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).
	ListenType pulumi.StringOutput `pulumi:"listenType"`
	// The ID of load balancer instance.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
	// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
	// - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
	Method pulumi.StringPtrOutput `pulumi:"method"`
	Name   pulumi.StringOutput    `pulumi:"name"`
	// Health check path checking.
	Path pulumi.StringOutput `pulumi:"path"`
	// Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
	Persistence pulumi.StringOutput `pulumi:"persistence"`
	// The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
	PersistenceType pulumi.StringPtrOutput `pulumi:"persistenceType"`
	// Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
	Port pulumi.IntOutput `pulumi:"port"`
	// Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewLBListener registers a new resource with the given unique name, arguments, and options.
func NewLBListener(ctx *pulumi.Context,
	name string, args *LBListenerArgs, opts ...pulumi.ResourceOption) (*LBListener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	var resource LBListener
	err := ctx.RegisterResource("ucloud:ulb/lBListener:LBListener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLBListener gets an existing LBListener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLBListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LBListenerState, opts ...pulumi.ResourceOption) (*LBListener, error) {
	var resource LBListener
	err := ctx.ReadResource("ucloud:ulb/lBListener:LBListener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LBListener resources.
type lblistenerState struct {
	// Health check domain checking.
	Domain *string `pulumi:"domain"`
	// Health check method. Possible values are `port` as port checking and `path` as http checking.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listenType` is `requestProxy`, range: 60-900 when `listenType` is `packetsTransmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).
	ListenType *string `pulumi:"listenType"`
	// The ID of load balancer instance.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
	// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
	// - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
	Method *string `pulumi:"method"`
	Name   *string `pulumi:"name"`
	// Health check path checking.
	Path *string `pulumi:"path"`
	// Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
	Persistence *string `pulumi:"persistence"`
	// The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
	PersistenceType *string `pulumi:"persistenceType"`
	// Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
	Port *int `pulumi:"port"`
	// Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
	Protocol *string `pulumi:"protocol"`
	// Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.
	Status *string `pulumi:"status"`
}

type LBListenerState struct {
	// Health check domain checking.
	Domain pulumi.StringPtrInput
	// Health check method. Possible values are `port` as port checking and `path` as http checking.
	HealthCheckType pulumi.StringPtrInput
	// Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listenType` is `requestProxy`, range: 60-900 when `listenType` is `packetsTransmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.
	IdleTimeout pulumi.IntPtrInput
	// The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).
	ListenType pulumi.StringPtrInput
	// The ID of load balancer instance.
	LoadBalancerId pulumi.StringPtrInput
	// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
	// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
	// - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
	Method pulumi.StringPtrInput
	Name   pulumi.StringPtrInput
	// Health check path checking.
	Path pulumi.StringPtrInput
	// Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
	Persistence pulumi.StringPtrInput
	// The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
	PersistenceType pulumi.StringPtrInput
	// Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
	Port pulumi.IntPtrInput
	// Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
	Protocol pulumi.StringPtrInput
	// Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.
	Status pulumi.StringPtrInput
}

func (LBListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*lblistenerState)(nil)).Elem()
}

type lblistenerArgs struct {
	// Health check domain checking.
	Domain *string `pulumi:"domain"`
	// Health check method. Possible values are `port` as port checking and `path` as http checking.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listenType` is `requestProxy`, range: 60-900 when `listenType` is `packetsTransmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.
	IdleTimeout *int `pulumi:"idleTimeout"`
	// The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).
	ListenType *string `pulumi:"listenType"`
	// The ID of load balancer instance.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
	// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
	// - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
	Method *string `pulumi:"method"`
	Name   *string `pulumi:"name"`
	// Health check path checking.
	Path *string `pulumi:"path"`
	// Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
	Persistence *string `pulumi:"persistence"`
	// The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
	PersistenceType *string `pulumi:"persistenceType"`
	// Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
	Port *int `pulumi:"port"`
	// Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
	Protocol string `pulumi:"protocol"`
}

// The set of arguments for constructing a LBListener resource.
type LBListenerArgs struct {
	// Health check domain checking.
	Domain pulumi.StringPtrInput
	// Health check method. Possible values are `port` as port checking and `path` as http checking.
	HealthCheckType pulumi.StringPtrInput
	// Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listenType` is `requestProxy`, range: 60-900 when `listenType` is `packetsTransmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.
	IdleTimeout pulumi.IntPtrInput
	// The type of listener. Possible values are `requestProxy` and `packetsTransmit`. When `packetsTransmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).
	ListenType pulumi.StringPtrInput
	// The ID of load balancer instance.
	LoadBalancerId pulumi.StringInput
	// The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistentHash`, `sourcePort` , `consistentHashPort`, `weightRoundrobin` and `leastconn`. (Default: `roundrobin`).
	// - The `consistentHash`, `sourcePort` , `consistentHashPort`, `roundrobin`, `source` and `weightRoundrobin` are valid if `listenType` is `packetsTransmit`.
	// - The `roundrobin`, `source` and `weightRoundrobin` and `leastconn` are valid if `listenType` is `requestProxy`.
	Method pulumi.StringPtrInput
	Name   pulumi.StringPtrInput
	// Health check path checking.
	Path pulumi.StringPtrInput
	// Indicate whether the persistence session is enabled, it is invalid if `persistenceType` is `none`, an auto-generated string will be exported if `persistenceType` is `serverInsert`, a custom string will be exported if `persistenceType` is `userDefined`.
	Persistence pulumi.StringPtrInput
	// The type of session persistence of listener. Possible values are: `none` as disabled, `serverInsert` as auto-generated key and `userDefined` as customized key. (Default: `none`).
	PersistenceType pulumi.StringPtrInput
	// Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.
	Port pulumi.IntPtrInput
	// Listener protocol. Possible values: `http`, `https`, `tcp` if `listenType` is `requestProxy`, `tcp` and `udp` if `listenType` is `packetsTransmit`.
	Protocol pulumi.StringInput
}

func (LBListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lblistenerArgs)(nil)).Elem()
}

type LBListenerInput interface {
	pulumi.Input

	ToLBListenerOutput() LBListenerOutput
	ToLBListenerOutputWithContext(ctx context.Context) LBListenerOutput
}

func (*LBListener) ElementType() reflect.Type {
	return reflect.TypeOf((*LBListener)(nil))
}

func (i *LBListener) ToLBListenerOutput() LBListenerOutput {
	return i.ToLBListenerOutputWithContext(context.Background())
}

func (i *LBListener) ToLBListenerOutputWithContext(ctx context.Context) LBListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBListenerOutput)
}

func (i *LBListener) ToLBListenerPtrOutput() LBListenerPtrOutput {
	return i.ToLBListenerPtrOutputWithContext(context.Background())
}

func (i *LBListener) ToLBListenerPtrOutputWithContext(ctx context.Context) LBListenerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBListenerPtrOutput)
}

type LBListenerPtrInput interface {
	pulumi.Input

	ToLBListenerPtrOutput() LBListenerPtrOutput
	ToLBListenerPtrOutputWithContext(ctx context.Context) LBListenerPtrOutput
}

type lblistenerPtrType LBListenerArgs

func (*lblistenerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LBListener)(nil))
}

func (i *lblistenerPtrType) ToLBListenerPtrOutput() LBListenerPtrOutput {
	return i.ToLBListenerPtrOutputWithContext(context.Background())
}

func (i *lblistenerPtrType) ToLBListenerPtrOutputWithContext(ctx context.Context) LBListenerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBListenerPtrOutput)
}

// LBListenerArrayInput is an input type that accepts LBListenerArray and LBListenerArrayOutput values.
// You can construct a concrete instance of `LBListenerArrayInput` via:
//
//          LBListenerArray{ LBListenerArgs{...} }
type LBListenerArrayInput interface {
	pulumi.Input

	ToLBListenerArrayOutput() LBListenerArrayOutput
	ToLBListenerArrayOutputWithContext(context.Context) LBListenerArrayOutput
}

type LBListenerArray []LBListenerInput

func (LBListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LBListener)(nil))
}

func (i LBListenerArray) ToLBListenerArrayOutput() LBListenerArrayOutput {
	return i.ToLBListenerArrayOutputWithContext(context.Background())
}

func (i LBListenerArray) ToLBListenerArrayOutputWithContext(ctx context.Context) LBListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBListenerArrayOutput)
}

// LBListenerMapInput is an input type that accepts LBListenerMap and LBListenerMapOutput values.
// You can construct a concrete instance of `LBListenerMapInput` via:
//
//          LBListenerMap{ "key": LBListenerArgs{...} }
type LBListenerMapInput interface {
	pulumi.Input

	ToLBListenerMapOutput() LBListenerMapOutput
	ToLBListenerMapOutputWithContext(context.Context) LBListenerMapOutput
}

type LBListenerMap map[string]LBListenerInput

func (LBListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LBListener)(nil))
}

func (i LBListenerMap) ToLBListenerMapOutput() LBListenerMapOutput {
	return i.ToLBListenerMapOutputWithContext(context.Background())
}

func (i LBListenerMap) ToLBListenerMapOutputWithContext(ctx context.Context) LBListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBListenerMapOutput)
}

type LBListenerOutput struct {
	*pulumi.OutputState
}

func (LBListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LBListener)(nil))
}

func (o LBListenerOutput) ToLBListenerOutput() LBListenerOutput {
	return o
}

func (o LBListenerOutput) ToLBListenerOutputWithContext(ctx context.Context) LBListenerOutput {
	return o
}

func (o LBListenerOutput) ToLBListenerPtrOutput() LBListenerPtrOutput {
	return o.ToLBListenerPtrOutputWithContext(context.Background())
}

func (o LBListenerOutput) ToLBListenerPtrOutputWithContext(ctx context.Context) LBListenerPtrOutput {
	return o.ApplyT(func(v LBListener) *LBListener {
		return &v
	}).(LBListenerPtrOutput)
}

type LBListenerPtrOutput struct {
	*pulumi.OutputState
}

func (LBListenerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LBListener)(nil))
}

func (o LBListenerPtrOutput) ToLBListenerPtrOutput() LBListenerPtrOutput {
	return o
}

func (o LBListenerPtrOutput) ToLBListenerPtrOutputWithContext(ctx context.Context) LBListenerPtrOutput {
	return o
}

type LBListenerArrayOutput struct{ *pulumi.OutputState }

func (LBListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LBListener)(nil))
}

func (o LBListenerArrayOutput) ToLBListenerArrayOutput() LBListenerArrayOutput {
	return o
}

func (o LBListenerArrayOutput) ToLBListenerArrayOutputWithContext(ctx context.Context) LBListenerArrayOutput {
	return o
}

func (o LBListenerArrayOutput) Index(i pulumi.IntInput) LBListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LBListener {
		return vs[0].([]LBListener)[vs[1].(int)]
	}).(LBListenerOutput)
}

type LBListenerMapOutput struct{ *pulumi.OutputState }

func (LBListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LBListener)(nil))
}

func (o LBListenerMapOutput) ToLBListenerMapOutput() LBListenerMapOutput {
	return o
}

func (o LBListenerMapOutput) ToLBListenerMapOutputWithContext(ctx context.Context) LBListenerMapOutput {
	return o
}

func (o LBListenerMapOutput) MapIndex(k pulumi.StringInput) LBListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LBListener {
		return vs[0].(map[string]LBListener)[vs[1].(string)]
	}).(LBListenerOutput)
}

func init() {
	pulumi.RegisterOutputType(LBListenerOutput{})
	pulumi.RegisterOutputType(LBListenerPtrOutput{})
	pulumi.RegisterOutputType(LBListenerArrayOutput{})
	pulumi.RegisterOutputType(LBListenerMapOutput{})
}
