// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ulb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Load Balancer Rule resource to add content forwarding policies for Load Balancer backend resource.
//
// > **Note** The Load Balancer Rule can only be define while the `protocol` of lb listener is one of HTTP and HTTPS. In addition, should set one of `domain` and `path` if defined.
//
// ## Import
//
// LB Listener can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import ucloud:ulb/lBRule:LBRule example rule-abcdefg
// ```
type LBRule struct {
	pulumi.CustomResourceState

	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds pulumi.StringArrayOutput `pulumi:"backendIds"`
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// The ID of a listener server.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// The ID of a load balancer.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path pulumi.StringPtrOutput `pulumi:"path"`
}

// NewLBRule registers a new resource with the given unique name, arguments, and options.
func NewLBRule(ctx *pulumi.Context,
	name string, args *LBRuleArgs, opts ...pulumi.ResourceOption) (*LBRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendIds == nil {
		return nil, errors.New("invalid value for required argument 'BackendIds'")
	}
	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	var resource LBRule
	err := ctx.RegisterResource("ucloud:ulb/lBRule:LBRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLBRule gets an existing LBRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLBRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LBRuleState, opts ...pulumi.ResourceOption) (*LBRule, error) {
	var resource LBRule
	err := ctx.ReadResource("ucloud:ulb/lBRule:LBRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LBRule resources.
type lbruleState struct {
	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds []string `pulumi:"backendIds"`
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain *string `pulumi:"domain"`
	// The ID of a listener server.
	ListenerId *string `pulumi:"listenerId"`
	// The ID of a load balancer.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path *string `pulumi:"path"`
}

type LBRuleState struct {
	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds pulumi.StringArrayInput
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain pulumi.StringPtrInput
	// The ID of a listener server.
	ListenerId pulumi.StringPtrInput
	// The ID of a load balancer.
	LoadBalancerId pulumi.StringPtrInput
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path pulumi.StringPtrInput
}

func (LBRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbruleState)(nil)).Elem()
}

type lbruleArgs struct {
	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds []string `pulumi:"backendIds"`
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain *string `pulumi:"domain"`
	// The ID of a listener server.
	ListenerId string `pulumi:"listenerId"`
	// The ID of a load balancer.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path *string `pulumi:"path"`
}

// The set of arguments for constructing a LBRule resource.
type LBRuleArgs struct {
	// The IDs of the backend servers where rule applies, this argument is populated base on the `backendId` responded from `lbAttachment` create.
	BackendIds pulumi.StringArrayInput
	// The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Domain pulumi.StringPtrInput
	// The ID of a listener server.
	ListenerId pulumi.StringInput
	// The ID of a load balancer.
	LoadBalancerId pulumi.StringInput
	// The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
	Path pulumi.StringPtrInput
}

func (LBRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbruleArgs)(nil)).Elem()
}

type LBRuleInput interface {
	pulumi.Input

	ToLBRuleOutput() LBRuleOutput
	ToLBRuleOutputWithContext(ctx context.Context) LBRuleOutput
}

func (*LBRule) ElementType() reflect.Type {
	return reflect.TypeOf((*LBRule)(nil))
}

func (i *LBRule) ToLBRuleOutput() LBRuleOutput {
	return i.ToLBRuleOutputWithContext(context.Background())
}

func (i *LBRule) ToLBRuleOutputWithContext(ctx context.Context) LBRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBRuleOutput)
}

func (i *LBRule) ToLBRulePtrOutput() LBRulePtrOutput {
	return i.ToLBRulePtrOutputWithContext(context.Background())
}

func (i *LBRule) ToLBRulePtrOutputWithContext(ctx context.Context) LBRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBRulePtrOutput)
}

type LBRulePtrInput interface {
	pulumi.Input

	ToLBRulePtrOutput() LBRulePtrOutput
	ToLBRulePtrOutputWithContext(ctx context.Context) LBRulePtrOutput
}

type lbrulePtrType LBRuleArgs

func (*lbrulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LBRule)(nil))
}

func (i *lbrulePtrType) ToLBRulePtrOutput() LBRulePtrOutput {
	return i.ToLBRulePtrOutputWithContext(context.Background())
}

func (i *lbrulePtrType) ToLBRulePtrOutputWithContext(ctx context.Context) LBRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBRulePtrOutput)
}

// LBRuleArrayInput is an input type that accepts LBRuleArray and LBRuleArrayOutput values.
// You can construct a concrete instance of `LBRuleArrayInput` via:
//
//          LBRuleArray{ LBRuleArgs{...} }
type LBRuleArrayInput interface {
	pulumi.Input

	ToLBRuleArrayOutput() LBRuleArrayOutput
	ToLBRuleArrayOutputWithContext(context.Context) LBRuleArrayOutput
}

type LBRuleArray []LBRuleInput

func (LBRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LBRule)(nil))
}

func (i LBRuleArray) ToLBRuleArrayOutput() LBRuleArrayOutput {
	return i.ToLBRuleArrayOutputWithContext(context.Background())
}

func (i LBRuleArray) ToLBRuleArrayOutputWithContext(ctx context.Context) LBRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBRuleArrayOutput)
}

// LBRuleMapInput is an input type that accepts LBRuleMap and LBRuleMapOutput values.
// You can construct a concrete instance of `LBRuleMapInput` via:
//
//          LBRuleMap{ "key": LBRuleArgs{...} }
type LBRuleMapInput interface {
	pulumi.Input

	ToLBRuleMapOutput() LBRuleMapOutput
	ToLBRuleMapOutputWithContext(context.Context) LBRuleMapOutput
}

type LBRuleMap map[string]LBRuleInput

func (LBRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LBRule)(nil))
}

func (i LBRuleMap) ToLBRuleMapOutput() LBRuleMapOutput {
	return i.ToLBRuleMapOutputWithContext(context.Background())
}

func (i LBRuleMap) ToLBRuleMapOutputWithContext(ctx context.Context) LBRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LBRuleMapOutput)
}

type LBRuleOutput struct {
	*pulumi.OutputState
}

func (LBRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LBRule)(nil))
}

func (o LBRuleOutput) ToLBRuleOutput() LBRuleOutput {
	return o
}

func (o LBRuleOutput) ToLBRuleOutputWithContext(ctx context.Context) LBRuleOutput {
	return o
}

func (o LBRuleOutput) ToLBRulePtrOutput() LBRulePtrOutput {
	return o.ToLBRulePtrOutputWithContext(context.Background())
}

func (o LBRuleOutput) ToLBRulePtrOutputWithContext(ctx context.Context) LBRulePtrOutput {
	return o.ApplyT(func(v LBRule) *LBRule {
		return &v
	}).(LBRulePtrOutput)
}

type LBRulePtrOutput struct {
	*pulumi.OutputState
}

func (LBRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LBRule)(nil))
}

func (o LBRulePtrOutput) ToLBRulePtrOutput() LBRulePtrOutput {
	return o
}

func (o LBRulePtrOutput) ToLBRulePtrOutputWithContext(ctx context.Context) LBRulePtrOutput {
	return o
}

type LBRuleArrayOutput struct{ *pulumi.OutputState }

func (LBRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LBRule)(nil))
}

func (o LBRuleArrayOutput) ToLBRuleArrayOutput() LBRuleArrayOutput {
	return o
}

func (o LBRuleArrayOutput) ToLBRuleArrayOutputWithContext(ctx context.Context) LBRuleArrayOutput {
	return o
}

func (o LBRuleArrayOutput) Index(i pulumi.IntInput) LBRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LBRule {
		return vs[0].([]LBRule)[vs[1].(int)]
	}).(LBRuleOutput)
}

type LBRuleMapOutput struct{ *pulumi.OutputState }

func (LBRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LBRule)(nil))
}

func (o LBRuleMapOutput) ToLBRuleMapOutput() LBRuleMapOutput {
	return o
}

func (o LBRuleMapOutput) ToLBRuleMapOutputWithContext(ctx context.Context) LBRuleMapOutput {
	return o
}

func (o LBRuleMapOutput) MapIndex(k pulumi.StringInput) LBRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LBRule {
		return vs[0].(map[string]LBRule)[vs[1].(string)]
	}).(LBRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(LBRuleOutput{})
	pulumi.RegisterOutputType(LBRulePtrOutput{})
	pulumi.RegisterOutputType(LBRuleArrayOutput{})
	pulumi.RegisterOutputType(LBRuleMapOutput{})
}
