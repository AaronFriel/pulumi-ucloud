// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package umem

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The UCloud Redis instance is a key-value online storage service compatible with the Redis protocol.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/umem"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_default, err := uaccount.GetZone(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = umem.NewRedisInstance(ctx, "master", &umem.RedisInstanceArgs{
// 			AvailabilityZone: pulumi.String(_default.Zones[0].Id),
// 			InstanceType:     pulumi.String("redis-master-2"),
// 			Password:         pulumi.String("2018_Tfacc"),
// 			EngineVersion:    pulumi.String("4.0"),
// 			Tag:              pulumi.String("tf-example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = umem.NewRedisInstance(ctx, "distributed", &umem.RedisInstanceArgs{
// 			AvailabilityZone: pulumi.String(_default.Zones[0].Id),
// 			InstanceType:     pulumi.String("redis-distributed-16"),
// 			Tag:              pulumi.String("tf-example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type RedisInstance struct {
	pulumi.CustomResourceState

	// Availability zone where Redis instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The charge type of Redis instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType pulumi.StringOutput `pulumi:"chargeType"`
	// The creation time of Redis instance, formatted by RFC3339 time string.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The duration that you will buy the Redis instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).
	Duration pulumi.IntPtrOutput `pulumi:"duration"`
	// The version of engine of active-standby Redis. Possible values are: 3.0, 3.2, 4.0 and 5.0.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// The expiration time of Redis instance, formatted by RFC3339 time string.
	ExpireTime   pulumi.StringOutput `pulumi:"expireTime"`
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// ip_set is a nested type. ipSet documented below.
	IpSets RedisInstanceIpSetArrayOutput `pulumi:"ipSets"`
	Name   pulumi.StringOutput           `pulumi:"name"`
	// The password for  active-standby Redis instance which should have 6-36 characters. It must contain at least 3 items of Capital letters, small letter, numbers and special characters. The special characters include `-_`.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The status of KV Redis instance.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of subnet linked to the Redis instance.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// A tag assigned to Redis instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringOutput `pulumi:"tag"`
	// The ID of VPC linked to the Redis instance.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewRedisInstance registers a new resource with the given unique name, arguments, and options.
func NewRedisInstance(ctx *pulumi.Context,
	name string, args *RedisInstanceArgs, opts ...pulumi.ResourceOption) (*RedisInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	var resource RedisInstance
	err := ctx.RegisterResource("ucloud:umem/redisInstance:RedisInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisInstance gets an existing RedisInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisInstanceState, opts ...pulumi.ResourceOption) (*RedisInstance, error) {
	var resource RedisInstance
	err := ctx.ReadResource("ucloud:umem/redisInstance:RedisInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisInstance resources.
type redisInstanceState struct {
	// Availability zone where Redis instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The charge type of Redis instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType *string `pulumi:"chargeType"`
	// The creation time of Redis instance, formatted by RFC3339 time string.
	CreateTime *string `pulumi:"createTime"`
	// The duration that you will buy the Redis instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).
	Duration *int `pulumi:"duration"`
	// The version of engine of active-standby Redis. Possible values are: 3.0, 3.2, 4.0 and 5.0.
	EngineVersion *string `pulumi:"engineVersion"`
	// The expiration time of Redis instance, formatted by RFC3339 time string.
	ExpireTime   *string `pulumi:"expireTime"`
	InstanceType *string `pulumi:"instanceType"`
	// ip_set is a nested type. ipSet documented below.
	IpSets []RedisInstanceIpSet `pulumi:"ipSets"`
	Name   *string              `pulumi:"name"`
	// The password for  active-standby Redis instance which should have 6-36 characters. It must contain at least 3 items of Capital letters, small letter, numbers and special characters. The special characters include `-_`.
	Password *string `pulumi:"password"`
	// The status of KV Redis instance.
	Status *string `pulumi:"status"`
	// The ID of subnet linked to the Redis instance.
	SubnetId *string `pulumi:"subnetId"`
	// A tag assigned to Redis instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag *string `pulumi:"tag"`
	// The ID of VPC linked to the Redis instance.
	VpcId *string `pulumi:"vpcId"`
}

type RedisInstanceState struct {
	// Availability zone where Redis instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
	AvailabilityZone pulumi.StringPtrInput
	// The charge type of Redis instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType pulumi.StringPtrInput
	// The creation time of Redis instance, formatted by RFC3339 time string.
	CreateTime pulumi.StringPtrInput
	// The duration that you will buy the Redis instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).
	Duration pulumi.IntPtrInput
	// The version of engine of active-standby Redis. Possible values are: 3.0, 3.2, 4.0 and 5.0.
	EngineVersion pulumi.StringPtrInput
	// The expiration time of Redis instance, formatted by RFC3339 time string.
	ExpireTime   pulumi.StringPtrInput
	InstanceType pulumi.StringPtrInput
	// ip_set is a nested type. ipSet documented below.
	IpSets RedisInstanceIpSetArrayInput
	Name   pulumi.StringPtrInput
	// The password for  active-standby Redis instance which should have 6-36 characters. It must contain at least 3 items of Capital letters, small letter, numbers and special characters. The special characters include `-_`.
	Password pulumi.StringPtrInput
	// The status of KV Redis instance.
	Status pulumi.StringPtrInput
	// The ID of subnet linked to the Redis instance.
	SubnetId pulumi.StringPtrInput
	// A tag assigned to Redis instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrInput
	// The ID of VPC linked to the Redis instance.
	VpcId pulumi.StringPtrInput
}

func (RedisInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisInstanceState)(nil)).Elem()
}

type redisInstanceArgs struct {
	// Availability zone where Redis instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The charge type of Redis instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType *string `pulumi:"chargeType"`
	// The duration that you will buy the Redis instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).
	Duration *int `pulumi:"duration"`
	// The version of engine of active-standby Redis. Possible values are: 3.0, 3.2, 4.0 and 5.0.
	EngineVersion *string `pulumi:"engineVersion"`
	InstanceType  string  `pulumi:"instanceType"`
	Name          *string `pulumi:"name"`
	// The password for  active-standby Redis instance which should have 6-36 characters. It must contain at least 3 items of Capital letters, small letter, numbers and special characters. The special characters include `-_`.
	Password *string `pulumi:"password"`
	// The ID of subnet linked to the Redis instance.
	SubnetId *string `pulumi:"subnetId"`
	// A tag assigned to Redis instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag *string `pulumi:"tag"`
	// The ID of VPC linked to the Redis instance.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a RedisInstance resource.
type RedisInstanceArgs struct {
	// Availability zone where Redis instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
	AvailabilityZone pulumi.StringInput
	// The charge type of Redis instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
	ChargeType pulumi.StringPtrInput
	// The duration that you will buy the Redis instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).
	Duration pulumi.IntPtrInput
	// The version of engine of active-standby Redis. Possible values are: 3.0, 3.2, 4.0 and 5.0.
	EngineVersion pulumi.StringPtrInput
	InstanceType  pulumi.StringInput
	Name          pulumi.StringPtrInput
	// The password for  active-standby Redis instance which should have 6-36 characters. It must contain at least 3 items of Capital letters, small letter, numbers and special characters. The special characters include `-_`.
	Password pulumi.StringPtrInput
	// The ID of subnet linked to the Redis instance.
	SubnetId pulumi.StringPtrInput
	// A tag assigned to Redis instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrInput
	// The ID of VPC linked to the Redis instance.
	VpcId pulumi.StringPtrInput
}

func (RedisInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisInstanceArgs)(nil)).Elem()
}

type RedisInstanceInput interface {
	pulumi.Input

	ToRedisInstanceOutput() RedisInstanceOutput
	ToRedisInstanceOutputWithContext(ctx context.Context) RedisInstanceOutput
}

func (*RedisInstance) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisInstance)(nil))
}

func (i *RedisInstance) ToRedisInstanceOutput() RedisInstanceOutput {
	return i.ToRedisInstanceOutputWithContext(context.Background())
}

func (i *RedisInstance) ToRedisInstanceOutputWithContext(ctx context.Context) RedisInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceOutput)
}

func (i *RedisInstance) ToRedisInstancePtrOutput() RedisInstancePtrOutput {
	return i.ToRedisInstancePtrOutputWithContext(context.Background())
}

func (i *RedisInstance) ToRedisInstancePtrOutputWithContext(ctx context.Context) RedisInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstancePtrOutput)
}

type RedisInstancePtrInput interface {
	pulumi.Input

	ToRedisInstancePtrOutput() RedisInstancePtrOutput
	ToRedisInstancePtrOutputWithContext(ctx context.Context) RedisInstancePtrOutput
}

type redisInstancePtrType RedisInstanceArgs

func (*redisInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisInstance)(nil))
}

func (i *redisInstancePtrType) ToRedisInstancePtrOutput() RedisInstancePtrOutput {
	return i.ToRedisInstancePtrOutputWithContext(context.Background())
}

func (i *redisInstancePtrType) ToRedisInstancePtrOutputWithContext(ctx context.Context) RedisInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstancePtrOutput)
}

// RedisInstanceArrayInput is an input type that accepts RedisInstanceArray and RedisInstanceArrayOutput values.
// You can construct a concrete instance of `RedisInstanceArrayInput` via:
//
//          RedisInstanceArray{ RedisInstanceArgs{...} }
type RedisInstanceArrayInput interface {
	pulumi.Input

	ToRedisInstanceArrayOutput() RedisInstanceArrayOutput
	ToRedisInstanceArrayOutputWithContext(context.Context) RedisInstanceArrayOutput
}

type RedisInstanceArray []RedisInstanceInput

func (RedisInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*RedisInstance)(nil))
}

func (i RedisInstanceArray) ToRedisInstanceArrayOutput() RedisInstanceArrayOutput {
	return i.ToRedisInstanceArrayOutputWithContext(context.Background())
}

func (i RedisInstanceArray) ToRedisInstanceArrayOutputWithContext(ctx context.Context) RedisInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceArrayOutput)
}

// RedisInstanceMapInput is an input type that accepts RedisInstanceMap and RedisInstanceMapOutput values.
// You can construct a concrete instance of `RedisInstanceMapInput` via:
//
//          RedisInstanceMap{ "key": RedisInstanceArgs{...} }
type RedisInstanceMapInput interface {
	pulumi.Input

	ToRedisInstanceMapOutput() RedisInstanceMapOutput
	ToRedisInstanceMapOutputWithContext(context.Context) RedisInstanceMapOutput
}

type RedisInstanceMap map[string]RedisInstanceInput

func (RedisInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*RedisInstance)(nil))
}

func (i RedisInstanceMap) ToRedisInstanceMapOutput() RedisInstanceMapOutput {
	return i.ToRedisInstanceMapOutputWithContext(context.Background())
}

func (i RedisInstanceMap) ToRedisInstanceMapOutputWithContext(ctx context.Context) RedisInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceMapOutput)
}

type RedisInstanceOutput struct {
	*pulumi.OutputState
}

func (RedisInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisInstance)(nil))
}

func (o RedisInstanceOutput) ToRedisInstanceOutput() RedisInstanceOutput {
	return o
}

func (o RedisInstanceOutput) ToRedisInstanceOutputWithContext(ctx context.Context) RedisInstanceOutput {
	return o
}

func (o RedisInstanceOutput) ToRedisInstancePtrOutput() RedisInstancePtrOutput {
	return o.ToRedisInstancePtrOutputWithContext(context.Background())
}

func (o RedisInstanceOutput) ToRedisInstancePtrOutputWithContext(ctx context.Context) RedisInstancePtrOutput {
	return o.ApplyT(func(v RedisInstance) *RedisInstance {
		return &v
	}).(RedisInstancePtrOutput)
}

type RedisInstancePtrOutput struct {
	*pulumi.OutputState
}

func (RedisInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisInstance)(nil))
}

func (o RedisInstancePtrOutput) ToRedisInstancePtrOutput() RedisInstancePtrOutput {
	return o
}

func (o RedisInstancePtrOutput) ToRedisInstancePtrOutputWithContext(ctx context.Context) RedisInstancePtrOutput {
	return o
}

type RedisInstanceArrayOutput struct{ *pulumi.OutputState }

func (RedisInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisInstance)(nil))
}

func (o RedisInstanceArrayOutput) ToRedisInstanceArrayOutput() RedisInstanceArrayOutput {
	return o
}

func (o RedisInstanceArrayOutput) ToRedisInstanceArrayOutputWithContext(ctx context.Context) RedisInstanceArrayOutput {
	return o
}

func (o RedisInstanceArrayOutput) Index(i pulumi.IntInput) RedisInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisInstance {
		return vs[0].([]RedisInstance)[vs[1].(int)]
	}).(RedisInstanceOutput)
}

type RedisInstanceMapOutput struct{ *pulumi.OutputState }

func (RedisInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RedisInstance)(nil))
}

func (o RedisInstanceMapOutput) ToRedisInstanceMapOutput() RedisInstanceMapOutput {
	return o
}

func (o RedisInstanceMapOutput) ToRedisInstanceMapOutputWithContext(ctx context.Context) RedisInstanceMapOutput {
	return o
}

func (o RedisInstanceMapOutput) MapIndex(k pulumi.StringInput) RedisInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RedisInstance {
		return vs[0].(map[string]RedisInstance)[vs[1].(string)]
	}).(RedisInstanceOutput)
}

func init() {
	pulumi.RegisterOutputType(RedisInstanceOutput{})
	pulumi.RegisterOutputType(RedisInstancePtrOutput{})
	pulumi.RegisterOutputType(RedisInstanceArrayOutput{})
	pulumi.RegisterOutputType(RedisInstanceMapOutput{})
}
