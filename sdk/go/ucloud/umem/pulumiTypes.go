// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package umem

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MemcachedInstanceIpSet struct {
	// The virtual ip of Memcache instance.
	Ip *string `pulumi:"ip"`
	// The port on which Memcache instance accepts connections, it is 6379 by default.
	Port *int `pulumi:"port"`
}

// MemcachedInstanceIpSetInput is an input type that accepts MemcachedInstanceIpSetArgs and MemcachedInstanceIpSetOutput values.
// You can construct a concrete instance of `MemcachedInstanceIpSetInput` via:
//
//          MemcachedInstanceIpSetArgs{...}
type MemcachedInstanceIpSetInput interface {
	pulumi.Input

	ToMemcachedInstanceIpSetOutput() MemcachedInstanceIpSetOutput
	ToMemcachedInstanceIpSetOutputWithContext(context.Context) MemcachedInstanceIpSetOutput
}

type MemcachedInstanceIpSetArgs struct {
	// The virtual ip of Memcache instance.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The port on which Memcache instance accepts connections, it is 6379 by default.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (MemcachedInstanceIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedInstanceIpSet)(nil)).Elem()
}

func (i MemcachedInstanceIpSetArgs) ToMemcachedInstanceIpSetOutput() MemcachedInstanceIpSetOutput {
	return i.ToMemcachedInstanceIpSetOutputWithContext(context.Background())
}

func (i MemcachedInstanceIpSetArgs) ToMemcachedInstanceIpSetOutputWithContext(ctx context.Context) MemcachedInstanceIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedInstanceIpSetOutput)
}

// MemcachedInstanceIpSetArrayInput is an input type that accepts MemcachedInstanceIpSetArray and MemcachedInstanceIpSetArrayOutput values.
// You can construct a concrete instance of `MemcachedInstanceIpSetArrayInput` via:
//
//          MemcachedInstanceIpSetArray{ MemcachedInstanceIpSetArgs{...} }
type MemcachedInstanceIpSetArrayInput interface {
	pulumi.Input

	ToMemcachedInstanceIpSetArrayOutput() MemcachedInstanceIpSetArrayOutput
	ToMemcachedInstanceIpSetArrayOutputWithContext(context.Context) MemcachedInstanceIpSetArrayOutput
}

type MemcachedInstanceIpSetArray []MemcachedInstanceIpSetInput

func (MemcachedInstanceIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcachedInstanceIpSet)(nil)).Elem()
}

func (i MemcachedInstanceIpSetArray) ToMemcachedInstanceIpSetArrayOutput() MemcachedInstanceIpSetArrayOutput {
	return i.ToMemcachedInstanceIpSetArrayOutputWithContext(context.Background())
}

func (i MemcachedInstanceIpSetArray) ToMemcachedInstanceIpSetArrayOutputWithContext(ctx context.Context) MemcachedInstanceIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcachedInstanceIpSetArrayOutput)
}

type MemcachedInstanceIpSetOutput struct{ *pulumi.OutputState }

func (MemcachedInstanceIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcachedInstanceIpSet)(nil)).Elem()
}

func (o MemcachedInstanceIpSetOutput) ToMemcachedInstanceIpSetOutput() MemcachedInstanceIpSetOutput {
	return o
}

func (o MemcachedInstanceIpSetOutput) ToMemcachedInstanceIpSetOutputWithContext(ctx context.Context) MemcachedInstanceIpSetOutput {
	return o
}

// The virtual ip of Memcache instance.
func (o MemcachedInstanceIpSetOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MemcachedInstanceIpSet) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The port on which Memcache instance accepts connections, it is 6379 by default.
func (o MemcachedInstanceIpSetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MemcachedInstanceIpSet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type MemcachedInstanceIpSetArrayOutput struct{ *pulumi.OutputState }

func (MemcachedInstanceIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcachedInstanceIpSet)(nil)).Elem()
}

func (o MemcachedInstanceIpSetArrayOutput) ToMemcachedInstanceIpSetArrayOutput() MemcachedInstanceIpSetArrayOutput {
	return o
}

func (o MemcachedInstanceIpSetArrayOutput) ToMemcachedInstanceIpSetArrayOutputWithContext(ctx context.Context) MemcachedInstanceIpSetArrayOutput {
	return o
}

func (o MemcachedInstanceIpSetArrayOutput) Index(i pulumi.IntInput) MemcachedInstanceIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MemcachedInstanceIpSet {
		return vs[0].([]MemcachedInstanceIpSet)[vs[1].(int)]
	}).(MemcachedInstanceIpSetOutput)
}

type RedisInstanceIpSet struct {
	// The virtual ip of Redis instance.
	Ip *string `pulumi:"ip"`
	// The port on which Redis instance accepts connections, it is 6379 by default.
	Port *int `pulumi:"port"`
}

// RedisInstanceIpSetInput is an input type that accepts RedisInstanceIpSetArgs and RedisInstanceIpSetOutput values.
// You can construct a concrete instance of `RedisInstanceIpSetInput` via:
//
//          RedisInstanceIpSetArgs{...}
type RedisInstanceIpSetInput interface {
	pulumi.Input

	ToRedisInstanceIpSetOutput() RedisInstanceIpSetOutput
	ToRedisInstanceIpSetOutputWithContext(context.Context) RedisInstanceIpSetOutput
}

type RedisInstanceIpSetArgs struct {
	// The virtual ip of Redis instance.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The port on which Redis instance accepts connections, it is 6379 by default.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (RedisInstanceIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisInstanceIpSet)(nil)).Elem()
}

func (i RedisInstanceIpSetArgs) ToRedisInstanceIpSetOutput() RedisInstanceIpSetOutput {
	return i.ToRedisInstanceIpSetOutputWithContext(context.Background())
}

func (i RedisInstanceIpSetArgs) ToRedisInstanceIpSetOutputWithContext(ctx context.Context) RedisInstanceIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceIpSetOutput)
}

// RedisInstanceIpSetArrayInput is an input type that accepts RedisInstanceIpSetArray and RedisInstanceIpSetArrayOutput values.
// You can construct a concrete instance of `RedisInstanceIpSetArrayInput` via:
//
//          RedisInstanceIpSetArray{ RedisInstanceIpSetArgs{...} }
type RedisInstanceIpSetArrayInput interface {
	pulumi.Input

	ToRedisInstanceIpSetArrayOutput() RedisInstanceIpSetArrayOutput
	ToRedisInstanceIpSetArrayOutputWithContext(context.Context) RedisInstanceIpSetArrayOutput
}

type RedisInstanceIpSetArray []RedisInstanceIpSetInput

func (RedisInstanceIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisInstanceIpSet)(nil)).Elem()
}

func (i RedisInstanceIpSetArray) ToRedisInstanceIpSetArrayOutput() RedisInstanceIpSetArrayOutput {
	return i.ToRedisInstanceIpSetArrayOutputWithContext(context.Background())
}

func (i RedisInstanceIpSetArray) ToRedisInstanceIpSetArrayOutputWithContext(ctx context.Context) RedisInstanceIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceIpSetArrayOutput)
}

type RedisInstanceIpSetOutput struct{ *pulumi.OutputState }

func (RedisInstanceIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisInstanceIpSet)(nil)).Elem()
}

func (o RedisInstanceIpSetOutput) ToRedisInstanceIpSetOutput() RedisInstanceIpSetOutput {
	return o
}

func (o RedisInstanceIpSetOutput) ToRedisInstanceIpSetOutputWithContext(ctx context.Context) RedisInstanceIpSetOutput {
	return o
}

// The virtual ip of Redis instance.
func (o RedisInstanceIpSetOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceIpSet) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The port on which Redis instance accepts connections, it is 6379 by default.
func (o RedisInstanceIpSetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisInstanceIpSet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type RedisInstanceIpSetArrayOutput struct{ *pulumi.OutputState }

func (RedisInstanceIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisInstanceIpSet)(nil)).Elem()
}

func (o RedisInstanceIpSetArrayOutput) ToRedisInstanceIpSetArrayOutput() RedisInstanceIpSetArrayOutput {
	return o
}

func (o RedisInstanceIpSetArrayOutput) ToRedisInstanceIpSetArrayOutputWithContext(ctx context.Context) RedisInstanceIpSetArrayOutput {
	return o
}

func (o RedisInstanceIpSetArrayOutput) Index(i pulumi.IntInput) RedisInstanceIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisInstanceIpSet {
		return vs[0].([]RedisInstanceIpSet)[vs[1].(int)]
	}).(RedisInstanceIpSetOutput)
}

func init() {
	pulumi.RegisterOutputType(MemcachedInstanceIpSetOutput{})
	pulumi.RegisterOutputType(MemcachedInstanceIpSetArrayOutput{})
	pulumi.RegisterOutputType(RedisInstanceIpSetOutput{})
	pulumi.RegisterOutputType(RedisInstanceIpSetArrayOutput{})
}
