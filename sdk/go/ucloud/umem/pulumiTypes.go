// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package umem

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type MemcacheInstanceIpSet struct {
	// The virtual ip of Memcache instance.
	Ip *string `pulumi:"ip"`
	// The port on which Memcache instance accepts connections, it is 6379 by default.
	Port *int `pulumi:"port"`
}

type MemcacheInstanceIpSetInput interface {
	pulumi.Input

	ToMemcacheInstanceIpSetOutput() MemcacheInstanceIpSetOutput
	ToMemcacheInstanceIpSetOutputWithContext(context.Context) MemcacheInstanceIpSetOutput
}

type MemcacheInstanceIpSetArgs struct {
	// The virtual ip of Memcache instance.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The port on which Memcache instance accepts connections, it is 6379 by default.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (MemcacheInstanceIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheInstanceIpSet)(nil)).Elem()
}

func (i MemcacheInstanceIpSetArgs) ToMemcacheInstanceIpSetOutput() MemcacheInstanceIpSetOutput {
	return i.ToMemcacheInstanceIpSetOutputWithContext(context.Background())
}

func (i MemcacheInstanceIpSetArgs) ToMemcacheInstanceIpSetOutputWithContext(ctx context.Context) MemcacheInstanceIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheInstanceIpSetOutput)
}

type MemcacheInstanceIpSetArrayInput interface {
	pulumi.Input

	ToMemcacheInstanceIpSetArrayOutput() MemcacheInstanceIpSetArrayOutput
	ToMemcacheInstanceIpSetArrayOutputWithContext(context.Context) MemcacheInstanceIpSetArrayOutput
}

type MemcacheInstanceIpSetArray []MemcacheInstanceIpSetInput

func (MemcacheInstanceIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcacheInstanceIpSet)(nil)).Elem()
}

func (i MemcacheInstanceIpSetArray) ToMemcacheInstanceIpSetArrayOutput() MemcacheInstanceIpSetArrayOutput {
	return i.ToMemcacheInstanceIpSetArrayOutputWithContext(context.Background())
}

func (i MemcacheInstanceIpSetArray) ToMemcacheInstanceIpSetArrayOutputWithContext(ctx context.Context) MemcacheInstanceIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheInstanceIpSetArrayOutput)
}

type MemcacheInstanceIpSetOutput struct{ *pulumi.OutputState }

func (MemcacheInstanceIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheInstanceIpSet)(nil)).Elem()
}

func (o MemcacheInstanceIpSetOutput) ToMemcacheInstanceIpSetOutput() MemcacheInstanceIpSetOutput {
	return o
}

func (o MemcacheInstanceIpSetOutput) ToMemcacheInstanceIpSetOutputWithContext(ctx context.Context) MemcacheInstanceIpSetOutput {
	return o
}

// The virtual ip of Memcache instance.
func (o MemcacheInstanceIpSetOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MemcacheInstanceIpSet) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The port on which Memcache instance accepts connections, it is 6379 by default.
func (o MemcacheInstanceIpSetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MemcacheInstanceIpSet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type MemcacheInstanceIpSetArrayOutput struct{ *pulumi.OutputState }

func (MemcacheInstanceIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemcacheInstanceIpSet)(nil)).Elem()
}

func (o MemcacheInstanceIpSetArrayOutput) ToMemcacheInstanceIpSetArrayOutput() MemcacheInstanceIpSetArrayOutput {
	return o
}

func (o MemcacheInstanceIpSetArrayOutput) ToMemcacheInstanceIpSetArrayOutputWithContext(ctx context.Context) MemcacheInstanceIpSetArrayOutput {
	return o
}

func (o MemcacheInstanceIpSetArrayOutput) Index(i pulumi.IntInput) MemcacheInstanceIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MemcacheInstanceIpSet {
		return vs[0].([]MemcacheInstanceIpSet)[vs[1].(int)]
	}).(MemcacheInstanceIpSetOutput)
}

type RedisInstanceIpSet struct {
	// The virtual ip of Redis instance.
	Ip *string `pulumi:"ip"`
	// The port on which Redis instance accepts connections, it is 6379 by default.
	Port *int `pulumi:"port"`
}

type RedisInstanceIpSetInput interface {
	pulumi.Input

	ToRedisInstanceIpSetOutput() RedisInstanceIpSetOutput
	ToRedisInstanceIpSetOutputWithContext(context.Context) RedisInstanceIpSetOutput
}

type RedisInstanceIpSetArgs struct {
	// The virtual ip of Redis instance.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The port on which Redis instance accepts connections, it is 6379 by default.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (RedisInstanceIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisInstanceIpSet)(nil)).Elem()
}

func (i RedisInstanceIpSetArgs) ToRedisInstanceIpSetOutput() RedisInstanceIpSetOutput {
	return i.ToRedisInstanceIpSetOutputWithContext(context.Background())
}

func (i RedisInstanceIpSetArgs) ToRedisInstanceIpSetOutputWithContext(ctx context.Context) RedisInstanceIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceIpSetOutput)
}

type RedisInstanceIpSetArrayInput interface {
	pulumi.Input

	ToRedisInstanceIpSetArrayOutput() RedisInstanceIpSetArrayOutput
	ToRedisInstanceIpSetArrayOutputWithContext(context.Context) RedisInstanceIpSetArrayOutput
}

type RedisInstanceIpSetArray []RedisInstanceIpSetInput

func (RedisInstanceIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisInstanceIpSet)(nil)).Elem()
}

func (i RedisInstanceIpSetArray) ToRedisInstanceIpSetArrayOutput() RedisInstanceIpSetArrayOutput {
	return i.ToRedisInstanceIpSetArrayOutputWithContext(context.Background())
}

func (i RedisInstanceIpSetArray) ToRedisInstanceIpSetArrayOutputWithContext(ctx context.Context) RedisInstanceIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisInstanceIpSetArrayOutput)
}

type RedisInstanceIpSetOutput struct{ *pulumi.OutputState }

func (RedisInstanceIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisInstanceIpSet)(nil)).Elem()
}

func (o RedisInstanceIpSetOutput) ToRedisInstanceIpSetOutput() RedisInstanceIpSetOutput {
	return o
}

func (o RedisInstanceIpSetOutput) ToRedisInstanceIpSetOutputWithContext(ctx context.Context) RedisInstanceIpSetOutput {
	return o
}

// The virtual ip of Redis instance.
func (o RedisInstanceIpSetOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisInstanceIpSet) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The port on which Redis instance accepts connections, it is 6379 by default.
func (o RedisInstanceIpSetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisInstanceIpSet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type RedisInstanceIpSetArrayOutput struct{ *pulumi.OutputState }

func (RedisInstanceIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisInstanceIpSet)(nil)).Elem()
}

func (o RedisInstanceIpSetArrayOutput) ToRedisInstanceIpSetArrayOutput() RedisInstanceIpSetArrayOutput {
	return o
}

func (o RedisInstanceIpSetArrayOutput) ToRedisInstanceIpSetArrayOutputWithContext(ctx context.Context) RedisInstanceIpSetArrayOutput {
	return o
}

func (o RedisInstanceIpSetArrayOutput) Index(i pulumi.IntInput) RedisInstanceIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisInstanceIpSet {
		return vs[0].([]RedisInstanceIpSet)[vs[1].(int)]
	}).(RedisInstanceIpSetOutput)
}

func init() {
	pulumi.RegisterOutputType(MemcacheInstanceIpSetOutput{})
	pulumi.RegisterOutputType(MemcacheInstanceIpSetArrayOutput{})
	pulumi.RegisterOutputType(RedisInstanceIpSetOutput{})
	pulumi.RegisterOutputType(RedisInstanceIpSetArrayOutput{})
}
