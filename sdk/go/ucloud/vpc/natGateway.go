// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Nat Gateway resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooVPC, err := vpc.NewVPC(ctx, "fooVPC", &vpc.VPCArgs{
// 			Tag: pulumi.String("tf-acc"),
// 			CidrBlocks: pulumi.StringArray{
// 				pulumi.String("192.168.0.0/16"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
// 			Tag:       pulumi.String("tf-acc"),
// 			CidrBlock: pulumi.String("192.168.1.0/24"),
// 			VpcId:     fooVPC.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooEIP, err := unet.NewEIP(ctx, "fooEIP", &unet.EIPArgs{
// 			Bandwidth:    pulumi.Int(1),
// 			InternetType: pulumi.String("bgp"),
// 			ChargeMode:   pulumi.String("bandwidth"),
// 			Tag:          pulumi.String("tf-acc"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		opt0 := "recommend_web"
// 		fooSecurityGroup, err := unet.LookupSecurityGroup(ctx, &unet.LookupSecurityGroupArgs{
// 			Type: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = vpc.NewNATGateway(ctx, "fooNATGateway", &vpc.NATGatewayArgs{
// 			VpcId: fooVPC.ID(),
// 			SubnetIds: pulumi.StringArray{
// 				fooSubnet.ID(),
// 			},
// 			EipId:         fooEIP.ID(),
// 			Tag:           pulumi.String("tf-acc"),
// 			SecurityGroup: pulumi.String(fooSecurityGroup.SecurityGroups[0].Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Nat Gateway can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import ucloud:vpc/nATGateway:NATGateway example natgw-abc123456
// ```
type NATGateway struct {
	pulumi.CustomResourceState

	// The time of creation of Nat Gateway, formatted in RFC3339 time string.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The ID of eip associate to the Nat Gateway.
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// The boolean value to Controls whether or not start the whitelist mode.
	EnableWhiteList pulumi.BoolOutput   `pulumi:"enableWhiteList"`
	Name            pulumi.StringOutput `pulumi:"name"`
	// The remarks of the Nat Gateway. (Default: `""`).
	Remark pulumi.StringOutput `pulumi:"remark"`
	// The ID of the associated security group.
	SecurityGroup pulumi.StringOutput `pulumi:"securityGroup"`
	// The list of subnet ID under the VPC.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	// * ``
	Tag pulumi.StringPtrOutput `pulumi:"tag"`
	// The ID of VPC linked to the Nat Gateway.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The white list of instance under the Nat Gateway.
	WhiteLists pulumi.StringArrayOutput `pulumi:"whiteLists"`
}

// NewNATGateway registers a new resource with the given unique name, arguments, and options.
func NewNATGateway(ctx *pulumi.Context,
	name string, args *NATGatewayArgs, opts ...pulumi.ResourceOption) (*NATGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EipId == nil {
		return nil, errors.New("invalid value for required argument 'EipId'")
	}
	if args.EnableWhiteList == nil {
		return nil, errors.New("invalid value for required argument 'EnableWhiteList'")
	}
	if args.SecurityGroup == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroup'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource NATGateway
	err := ctx.RegisterResource("ucloud:vpc/nATGateway:NATGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNATGateway gets an existing NATGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNATGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NATGatewayState, opts ...pulumi.ResourceOption) (*NATGateway, error) {
	var resource NATGateway
	err := ctx.ReadResource("ucloud:vpc/nATGateway:NATGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NATGateway resources.
type natgatewayState struct {
	// The time of creation of Nat Gateway, formatted in RFC3339 time string.
	CreateTime *string `pulumi:"createTime"`
	// The ID of eip associate to the Nat Gateway.
	EipId *string `pulumi:"eipId"`
	// The boolean value to Controls whether or not start the whitelist mode.
	EnableWhiteList *bool   `pulumi:"enableWhiteList"`
	Name            *string `pulumi:"name"`
	// The remarks of the Nat Gateway. (Default: `""`).
	Remark *string `pulumi:"remark"`
	// The ID of the associated security group.
	SecurityGroup *string `pulumi:"securityGroup"`
	// The list of subnet ID under the VPC.
	SubnetIds []string `pulumi:"subnetIds"`
	// A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	// * ``
	Tag *string `pulumi:"tag"`
	// The ID of VPC linked to the Nat Gateway.
	VpcId *string `pulumi:"vpcId"`
	// The white list of instance under the Nat Gateway.
	WhiteLists []string `pulumi:"whiteLists"`
}

type NATGatewayState struct {
	// The time of creation of Nat Gateway, formatted in RFC3339 time string.
	CreateTime pulumi.StringPtrInput
	// The ID of eip associate to the Nat Gateway.
	EipId pulumi.StringPtrInput
	// The boolean value to Controls whether or not start the whitelist mode.
	EnableWhiteList pulumi.BoolPtrInput
	Name            pulumi.StringPtrInput
	// The remarks of the Nat Gateway. (Default: `""`).
	Remark pulumi.StringPtrInput
	// The ID of the associated security group.
	SecurityGroup pulumi.StringPtrInput
	// The list of subnet ID under the VPC.
	SubnetIds pulumi.StringArrayInput
	// A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	// * ``
	Tag pulumi.StringPtrInput
	// The ID of VPC linked to the Nat Gateway.
	VpcId pulumi.StringPtrInput
	// The white list of instance under the Nat Gateway.
	WhiteLists pulumi.StringArrayInput
}

func (NATGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*natgatewayState)(nil)).Elem()
}

type natgatewayArgs struct {
	// The ID of eip associate to the Nat Gateway.
	EipId string `pulumi:"eipId"`
	// The boolean value to Controls whether or not start the whitelist mode.
	EnableWhiteList bool    `pulumi:"enableWhiteList"`
	Name            *string `pulumi:"name"`
	// The remarks of the Nat Gateway. (Default: `""`).
	Remark *string `pulumi:"remark"`
	// The ID of the associated security group.
	SecurityGroup string `pulumi:"securityGroup"`
	// The list of subnet ID under the VPC.
	SubnetIds []string `pulumi:"subnetIds"`
	// A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	// * ``
	Tag *string `pulumi:"tag"`
	// The ID of VPC linked to the Nat Gateway.
	VpcId string `pulumi:"vpcId"`
	// The white list of instance under the Nat Gateway.
	WhiteLists []string `pulumi:"whiteLists"`
}

// The set of arguments for constructing a NATGateway resource.
type NATGatewayArgs struct {
	// The ID of eip associate to the Nat Gateway.
	EipId pulumi.StringInput
	// The boolean value to Controls whether or not start the whitelist mode.
	EnableWhiteList pulumi.BoolInput
	Name            pulumi.StringPtrInput
	// The remarks of the Nat Gateway. (Default: `""`).
	Remark pulumi.StringPtrInput
	// The ID of the associated security group.
	SecurityGroup pulumi.StringInput
	// The list of subnet ID under the VPC.
	SubnetIds pulumi.StringArrayInput
	// A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	// * ``
	Tag pulumi.StringPtrInput
	// The ID of VPC linked to the Nat Gateway.
	VpcId pulumi.StringInput
	// The white list of instance under the Nat Gateway.
	WhiteLists pulumi.StringArrayInput
}

func (NATGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natgatewayArgs)(nil)).Elem()
}

type NATGatewayInput interface {
	pulumi.Input

	ToNATGatewayOutput() NATGatewayOutput
	ToNATGatewayOutputWithContext(ctx context.Context) NATGatewayOutput
}

func (*NATGateway) ElementType() reflect.Type {
	return reflect.TypeOf((*NATGateway)(nil))
}

func (i *NATGateway) ToNATGatewayOutput() NATGatewayOutput {
	return i.ToNATGatewayOutputWithContext(context.Background())
}

func (i *NATGateway) ToNATGatewayOutputWithContext(ctx context.Context) NATGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATGatewayOutput)
}

func (i *NATGateway) ToNATGatewayPtrOutput() NATGatewayPtrOutput {
	return i.ToNATGatewayPtrOutputWithContext(context.Background())
}

func (i *NATGateway) ToNATGatewayPtrOutputWithContext(ctx context.Context) NATGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATGatewayPtrOutput)
}

type NATGatewayPtrInput interface {
	pulumi.Input

	ToNATGatewayPtrOutput() NATGatewayPtrOutput
	ToNATGatewayPtrOutputWithContext(ctx context.Context) NATGatewayPtrOutput
}

type natgatewayPtrType NATGatewayArgs

func (*natgatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NATGateway)(nil))
}

func (i *natgatewayPtrType) ToNATGatewayPtrOutput() NATGatewayPtrOutput {
	return i.ToNATGatewayPtrOutputWithContext(context.Background())
}

func (i *natgatewayPtrType) ToNATGatewayPtrOutputWithContext(ctx context.Context) NATGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATGatewayPtrOutput)
}

// NATGatewayArrayInput is an input type that accepts NATGatewayArray and NATGatewayArrayOutput values.
// You can construct a concrete instance of `NATGatewayArrayInput` via:
//
//          NATGatewayArray{ NATGatewayArgs{...} }
type NATGatewayArrayInput interface {
	pulumi.Input

	ToNATGatewayArrayOutput() NATGatewayArrayOutput
	ToNATGatewayArrayOutputWithContext(context.Context) NATGatewayArrayOutput
}

type NATGatewayArray []NATGatewayInput

func (NATGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*NATGateway)(nil))
}

func (i NATGatewayArray) ToNATGatewayArrayOutput() NATGatewayArrayOutput {
	return i.ToNATGatewayArrayOutputWithContext(context.Background())
}

func (i NATGatewayArray) ToNATGatewayArrayOutputWithContext(ctx context.Context) NATGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATGatewayArrayOutput)
}

// NATGatewayMapInput is an input type that accepts NATGatewayMap and NATGatewayMapOutput values.
// You can construct a concrete instance of `NATGatewayMapInput` via:
//
//          NATGatewayMap{ "key": NATGatewayArgs{...} }
type NATGatewayMapInput interface {
	pulumi.Input

	ToNATGatewayMapOutput() NATGatewayMapOutput
	ToNATGatewayMapOutputWithContext(context.Context) NATGatewayMapOutput
}

type NATGatewayMap map[string]NATGatewayInput

func (NATGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*NATGateway)(nil))
}

func (i NATGatewayMap) ToNATGatewayMapOutput() NATGatewayMapOutput {
	return i.ToNATGatewayMapOutputWithContext(context.Background())
}

func (i NATGatewayMap) ToNATGatewayMapOutputWithContext(ctx context.Context) NATGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATGatewayMapOutput)
}

type NATGatewayOutput struct {
	*pulumi.OutputState
}

func (NATGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NATGateway)(nil))
}

func (o NATGatewayOutput) ToNATGatewayOutput() NATGatewayOutput {
	return o
}

func (o NATGatewayOutput) ToNATGatewayOutputWithContext(ctx context.Context) NATGatewayOutput {
	return o
}

func (o NATGatewayOutput) ToNATGatewayPtrOutput() NATGatewayPtrOutput {
	return o.ToNATGatewayPtrOutputWithContext(context.Background())
}

func (o NATGatewayOutput) ToNATGatewayPtrOutputWithContext(ctx context.Context) NATGatewayPtrOutput {
	return o.ApplyT(func(v NATGateway) *NATGateway {
		return &v
	}).(NATGatewayPtrOutput)
}

type NATGatewayPtrOutput struct {
	*pulumi.OutputState
}

func (NATGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NATGateway)(nil))
}

func (o NATGatewayPtrOutput) ToNATGatewayPtrOutput() NATGatewayPtrOutput {
	return o
}

func (o NATGatewayPtrOutput) ToNATGatewayPtrOutputWithContext(ctx context.Context) NATGatewayPtrOutput {
	return o
}

type NATGatewayArrayOutput struct{ *pulumi.OutputState }

func (NATGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NATGateway)(nil))
}

func (o NATGatewayArrayOutput) ToNATGatewayArrayOutput() NATGatewayArrayOutput {
	return o
}

func (o NATGatewayArrayOutput) ToNATGatewayArrayOutputWithContext(ctx context.Context) NATGatewayArrayOutput {
	return o
}

func (o NATGatewayArrayOutput) Index(i pulumi.IntInput) NATGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NATGateway {
		return vs[0].([]NATGateway)[vs[1].(int)]
	}).(NATGatewayOutput)
}

type NATGatewayMapOutput struct{ *pulumi.OutputState }

func (NATGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NATGateway)(nil))
}

func (o NATGatewayMapOutput) ToNATGatewayMapOutput() NATGatewayMapOutput {
	return o
}

func (o NATGatewayMapOutput) ToNATGatewayMapOutputWithContext(ctx context.Context) NATGatewayMapOutput {
	return o
}

func (o NATGatewayMapOutput) MapIndex(k pulumi.StringInput) NATGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NATGateway {
		return vs[0].(map[string]NATGateway)[vs[1].(string)]
	}).(NATGatewayOutput)
}

func init() {
	pulumi.RegisterOutputType(NATGatewayOutput{})
	pulumi.RegisterOutputType(NATGatewayPtrOutput{})
	pulumi.RegisterOutputType(NATGatewayArrayOutput{})
	pulumi.RegisterOutputType(NATGatewayMapOutput{})
}
