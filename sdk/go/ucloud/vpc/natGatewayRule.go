// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Nat Gateway resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet"
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooVPC, err := vpc.NewVPC(ctx, "fooVPC", &vpc.VPCArgs{
// 			Tag: pulumi.String("tf-acc"),
// 			CidrBlocks: pulumi.StringArray{
// 				pulumi.String("192.168.0.0/16"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
// 			Tag:       pulumi.String("tf-acc"),
// 			CidrBlock: pulumi.String("192.168.1.0/24"),
// 			VpcId:     fooVPC.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooEIP, err := unet.NewEIP(ctx, "fooEIP", &unet.EIPArgs{
// 			Bandwidth:    pulumi.Int(1),
// 			InternetType: pulumi.String("bgp"),
// 			ChargeMode:   pulumi.String("bandwidth"),
// 			Tag:          pulumi.String("tf-acc"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		opt0 := "recommend_web"
// 		fooSecurityGroup, err := unet.LookupSecurityGroup(ctx, &unet.LookupSecurityGroupArgs{
// 			Type: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultZone, err := uaccount.GetZone(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt1 := defaultZone.Zones[0].Id
// 		opt2 := "^CentOS 7.[1-2] 64"
// 		opt3 := "base"
// 		defaultImage, err := uhost.GetImage(ctx, &uhost.GetImageArgs{
// 			AvailabilityZone: &opt1,
// 			NameRegex:        &opt2,
// 			ImageType:        &opt3,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		fooInstance, err := uhost.NewInstance(ctx, "fooInstance", &uhost.InstanceArgs{
// 			VpcId:            fooVPC.ID(),
// 			SubnetId:         fooSubnet.ID(),
// 			AvailabilityZone: pulumi.String(defaultZone.Zones[0].Id),
// 			ImageId:          pulumi.String(defaultImage.Images[0].Id),
// 			InstanceType:     pulumi.String("n-basic-1"),
// 			ChargeType:       pulumi.String("dynamic"),
// 			Tag:              pulumi.String("tf-acc"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooNATGateway, err := vpc.NewNATGateway(ctx, "fooNATGateway", &vpc.NATGatewayArgs{
// 			VpcId: fooVPC.ID(),
// 			SubnetIds: pulumi.StringArray{
// 				fooSubnet.ID(),
// 			},
// 			EipId:           fooEIP.ID(),
// 			Tag:             pulumi.String("tf-acc"),
// 			EnableWhiteList: pulumi.Bool(false),
// 			SecurityGroup:   pulumi.String(fooSecurityGroup.SecurityGroups[0].Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = vpc.NewNATGatewayRule(ctx, "fooNATGatewayRule", &vpc.NATGatewayRuleArgs{
// 			NatGatewayId: fooNATGateway.ID(),
// 			Protocol:     pulumi.String("tcp"),
// 			SrcEipId:     fooEIP.ID(),
// 			SrcPortRange: pulumi.String("88"),
// 			DstIp:        fooInstance.PrivateIp,
// 			DstPortRange: pulumi.String("80"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = vpc.NewNATGatewayRule(ctx, "bar", &vpc.NATGatewayRuleArgs{
// 			NatGatewayId: fooNATGateway.ID(),
// 			Protocol:     pulumi.String("tcp"),
// 			SrcEipId:     fooEIP.ID(),
// 			SrcPortRange: pulumi.String("90-100"),
// 			DstIp:        fooInstance.PrivateIp,
// 			DstPortRange: pulumi.String("90-100"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type NATGatewayRule struct {
	pulumi.CustomResourceState

	// The private ip of instance bound to the jNAT gateway.
	DstIp pulumi.StringOutput `pulumi:"dstIp"`
	// The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
	DstPortRange pulumi.StringOutput `pulumi:"dstPortRange"`
	Name         pulumi.StringOutput `pulumi:"name"`
	// The ID of the Nat Gateway.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`
	// The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The ID of eip associate to the Nat Gateway.
	SrcEipId pulumi.StringOutput `pulumi:"srcEipId"`
	// The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
	SrcPortRange pulumi.StringOutput `pulumi:"srcPortRange"`
}

// NewNATGatewayRule registers a new resource with the given unique name, arguments, and options.
func NewNATGatewayRule(ctx *pulumi.Context,
	name string, args *NATGatewayRuleArgs, opts ...pulumi.ResourceOption) (*NATGatewayRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DstIp == nil {
		return nil, errors.New("invalid value for required argument 'DstIp'")
	}
	if args.DstPortRange == nil {
		return nil, errors.New("invalid value for required argument 'DstPortRange'")
	}
	if args.NatGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatGatewayId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SrcEipId == nil {
		return nil, errors.New("invalid value for required argument 'SrcEipId'")
	}
	if args.SrcPortRange == nil {
		return nil, errors.New("invalid value for required argument 'SrcPortRange'")
	}
	var resource NATGatewayRule
	err := ctx.RegisterResource("ucloud:vpc/nATGatewayRule:NATGatewayRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNATGatewayRule gets an existing NATGatewayRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNATGatewayRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NATGatewayRuleState, opts ...pulumi.ResourceOption) (*NATGatewayRule, error) {
	var resource NATGatewayRule
	err := ctx.ReadResource("ucloud:vpc/nATGatewayRule:NATGatewayRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NATGatewayRule resources.
type natgatewayRuleState struct {
	// The private ip of instance bound to the jNAT gateway.
	DstIp *string `pulumi:"dstIp"`
	// The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
	DstPortRange *string `pulumi:"dstPortRange"`
	Name         *string `pulumi:"name"`
	// The ID of the Nat Gateway.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
	Protocol *string `pulumi:"protocol"`
	// The ID of eip associate to the Nat Gateway.
	SrcEipId *string `pulumi:"srcEipId"`
	// The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
	SrcPortRange *string `pulumi:"srcPortRange"`
}

type NATGatewayRuleState struct {
	// The private ip of instance bound to the jNAT gateway.
	DstIp pulumi.StringPtrInput
	// The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
	DstPortRange pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	// The ID of the Nat Gateway.
	NatGatewayId pulumi.StringPtrInput
	// The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
	Protocol pulumi.StringPtrInput
	// The ID of eip associate to the Nat Gateway.
	SrcEipId pulumi.StringPtrInput
	// The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
	SrcPortRange pulumi.StringPtrInput
}

func (NATGatewayRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*natgatewayRuleState)(nil)).Elem()
}

type natgatewayRuleArgs struct {
	// The private ip of instance bound to the jNAT gateway.
	DstIp string `pulumi:"dstIp"`
	// The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
	DstPortRange string  `pulumi:"dstPortRange"`
	Name         *string `pulumi:"name"`
	// The ID of the Nat Gateway.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
	Protocol string `pulumi:"protocol"`
	// The ID of eip associate to the Nat Gateway.
	SrcEipId string `pulumi:"srcEipId"`
	// The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
	SrcPortRange string `pulumi:"srcPortRange"`
}

// The set of arguments for constructing a NATGatewayRule resource.
type NATGatewayRuleArgs struct {
	// The private ip of instance bound to the jNAT gateway.
	DstIp pulumi.StringInput
	// The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
	DstPortRange pulumi.StringInput
	Name         pulumi.StringPtrInput
	// The ID of the Nat Gateway.
	NatGatewayId pulumi.StringInput
	// The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
	Protocol pulumi.StringInput
	// The ID of eip associate to the Nat Gateway.
	SrcEipId pulumi.StringInput
	// The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
	SrcPortRange pulumi.StringInput
}

func (NATGatewayRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natgatewayRuleArgs)(nil)).Elem()
}

type NATGatewayRuleInput interface {
	pulumi.Input

	ToNATGatewayRuleOutput() NATGatewayRuleOutput
	ToNATGatewayRuleOutputWithContext(ctx context.Context) NATGatewayRuleOutput
}

func (*NATGatewayRule) ElementType() reflect.Type {
	return reflect.TypeOf((*NATGatewayRule)(nil))
}

func (i *NATGatewayRule) ToNATGatewayRuleOutput() NATGatewayRuleOutput {
	return i.ToNATGatewayRuleOutputWithContext(context.Background())
}

func (i *NATGatewayRule) ToNATGatewayRuleOutputWithContext(ctx context.Context) NATGatewayRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATGatewayRuleOutput)
}

func (i *NATGatewayRule) ToNATGatewayRulePtrOutput() NATGatewayRulePtrOutput {
	return i.ToNATGatewayRulePtrOutputWithContext(context.Background())
}

func (i *NATGatewayRule) ToNATGatewayRulePtrOutputWithContext(ctx context.Context) NATGatewayRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATGatewayRulePtrOutput)
}

type NATGatewayRulePtrInput interface {
	pulumi.Input

	ToNATGatewayRulePtrOutput() NATGatewayRulePtrOutput
	ToNATGatewayRulePtrOutputWithContext(ctx context.Context) NATGatewayRulePtrOutput
}

type natgatewayRulePtrType NATGatewayRuleArgs

func (*natgatewayRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NATGatewayRule)(nil))
}

func (i *natgatewayRulePtrType) ToNATGatewayRulePtrOutput() NATGatewayRulePtrOutput {
	return i.ToNATGatewayRulePtrOutputWithContext(context.Background())
}

func (i *natgatewayRulePtrType) ToNATGatewayRulePtrOutputWithContext(ctx context.Context) NATGatewayRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATGatewayRulePtrOutput)
}

// NATGatewayRuleArrayInput is an input type that accepts NATGatewayRuleArray and NATGatewayRuleArrayOutput values.
// You can construct a concrete instance of `NATGatewayRuleArrayInput` via:
//
//          NATGatewayRuleArray{ NATGatewayRuleArgs{...} }
type NATGatewayRuleArrayInput interface {
	pulumi.Input

	ToNATGatewayRuleArrayOutput() NATGatewayRuleArrayOutput
	ToNATGatewayRuleArrayOutputWithContext(context.Context) NATGatewayRuleArrayOutput
}

type NATGatewayRuleArray []NATGatewayRuleInput

func (NATGatewayRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*NATGatewayRule)(nil))
}

func (i NATGatewayRuleArray) ToNATGatewayRuleArrayOutput() NATGatewayRuleArrayOutput {
	return i.ToNATGatewayRuleArrayOutputWithContext(context.Background())
}

func (i NATGatewayRuleArray) ToNATGatewayRuleArrayOutputWithContext(ctx context.Context) NATGatewayRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATGatewayRuleArrayOutput)
}

// NATGatewayRuleMapInput is an input type that accepts NATGatewayRuleMap and NATGatewayRuleMapOutput values.
// You can construct a concrete instance of `NATGatewayRuleMapInput` via:
//
//          NATGatewayRuleMap{ "key": NATGatewayRuleArgs{...} }
type NATGatewayRuleMapInput interface {
	pulumi.Input

	ToNATGatewayRuleMapOutput() NATGatewayRuleMapOutput
	ToNATGatewayRuleMapOutputWithContext(context.Context) NATGatewayRuleMapOutput
}

type NATGatewayRuleMap map[string]NATGatewayRuleInput

func (NATGatewayRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*NATGatewayRule)(nil))
}

func (i NATGatewayRuleMap) ToNATGatewayRuleMapOutput() NATGatewayRuleMapOutput {
	return i.ToNATGatewayRuleMapOutputWithContext(context.Background())
}

func (i NATGatewayRuleMap) ToNATGatewayRuleMapOutputWithContext(ctx context.Context) NATGatewayRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATGatewayRuleMapOutput)
}

type NATGatewayRuleOutput struct {
	*pulumi.OutputState
}

func (NATGatewayRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NATGatewayRule)(nil))
}

func (o NATGatewayRuleOutput) ToNATGatewayRuleOutput() NATGatewayRuleOutput {
	return o
}

func (o NATGatewayRuleOutput) ToNATGatewayRuleOutputWithContext(ctx context.Context) NATGatewayRuleOutput {
	return o
}

func (o NATGatewayRuleOutput) ToNATGatewayRulePtrOutput() NATGatewayRulePtrOutput {
	return o.ToNATGatewayRulePtrOutputWithContext(context.Background())
}

func (o NATGatewayRuleOutput) ToNATGatewayRulePtrOutputWithContext(ctx context.Context) NATGatewayRulePtrOutput {
	return o.ApplyT(func(v NATGatewayRule) *NATGatewayRule {
		return &v
	}).(NATGatewayRulePtrOutput)
}

type NATGatewayRulePtrOutput struct {
	*pulumi.OutputState
}

func (NATGatewayRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NATGatewayRule)(nil))
}

func (o NATGatewayRulePtrOutput) ToNATGatewayRulePtrOutput() NATGatewayRulePtrOutput {
	return o
}

func (o NATGatewayRulePtrOutput) ToNATGatewayRulePtrOutputWithContext(ctx context.Context) NATGatewayRulePtrOutput {
	return o
}

type NATGatewayRuleArrayOutput struct{ *pulumi.OutputState }

func (NATGatewayRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NATGatewayRule)(nil))
}

func (o NATGatewayRuleArrayOutput) ToNATGatewayRuleArrayOutput() NATGatewayRuleArrayOutput {
	return o
}

func (o NATGatewayRuleArrayOutput) ToNATGatewayRuleArrayOutputWithContext(ctx context.Context) NATGatewayRuleArrayOutput {
	return o
}

func (o NATGatewayRuleArrayOutput) Index(i pulumi.IntInput) NATGatewayRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NATGatewayRule {
		return vs[0].([]NATGatewayRule)[vs[1].(int)]
	}).(NATGatewayRuleOutput)
}

type NATGatewayRuleMapOutput struct{ *pulumi.OutputState }

func (NATGatewayRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NATGatewayRule)(nil))
}

func (o NATGatewayRuleMapOutput) ToNATGatewayRuleMapOutput() NATGatewayRuleMapOutput {
	return o
}

func (o NATGatewayRuleMapOutput) ToNATGatewayRuleMapOutputWithContext(ctx context.Context) NATGatewayRuleMapOutput {
	return o
}

func (o NATGatewayRuleMapOutput) MapIndex(k pulumi.StringInput) NATGatewayRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NATGatewayRule {
		return vs[0].(map[string]NATGatewayRule)[vs[1].(string)]
	}).(NATGatewayRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(NATGatewayRuleOutput{})
	pulumi.RegisterOutputType(NATGatewayRulePtrOutput{})
	pulumi.RegisterOutputType(NATGatewayRuleArrayOutput{})
	pulumi.RegisterOutputType(NATGatewayRuleMapOutput{})
}
