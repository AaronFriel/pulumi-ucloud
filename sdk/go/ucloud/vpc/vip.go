// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VIP resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooVPC, err := vpc.NewVPC(ctx, "fooVPC", &vpc.VPCArgs{
// 			Tag: pulumi.String("tf-acc"),
// 			CidrBlocks: pulumi.StringArray{
// 				pulumi.String("192.168.0.0/16"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
// 			Tag:       pulumi.String("tf-acc"),
// 			CidrBlock: pulumi.String("192.168.1.0/24"),
// 			VpcId:     fooVPC.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = vpc.NewVIP(ctx, "fooVIP", &vpc.VIPArgs{
// 			VpcId:    fooVPC.ID(),
// 			SubnetId: fooSubnet.ID(),
// 			Remark:   pulumi.String("test"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VIP struct {
	pulumi.CustomResourceState

	// The time of creation for VIP, formatted in RFC3339 time string.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The ip address of the VIP.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	Name      pulumi.StringOutput `pulumi:"name"`
	// The remarks of the VIP. (Default: `""`).
	Remark pulumi.StringOutput `pulumi:"remark"`
	// The ID of subnet. If defined `vpcId`, the `subnetId` is Required.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// A tag assigned to VIP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrOutput `pulumi:"tag"`
	// The ID of VPC linked to the VIP.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVIP registers a new resource with the given unique name, arguments, and options.
func NewVIP(ctx *pulumi.Context,
	name string, args *VIPArgs, opts ...pulumi.ResourceOption) (*VIP, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource VIP
	err := ctx.RegisterResource("ucloud:vpc/vIP:VIP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVIP gets an existing VIP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVIP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VIPState, opts ...pulumi.ResourceOption) (*VIP, error) {
	var resource VIP
	err := ctx.ReadResource("ucloud:vpc/vIP:VIP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VIP resources.
type vipState struct {
	// The time of creation for VIP, formatted in RFC3339 time string.
	CreateTime *string `pulumi:"createTime"`
	// The ip address of the VIP.
	IpAddress *string `pulumi:"ipAddress"`
	Name      *string `pulumi:"name"`
	// The remarks of the VIP. (Default: `""`).
	Remark *string `pulumi:"remark"`
	// The ID of subnet. If defined `vpcId`, the `subnetId` is Required.
	SubnetId *string `pulumi:"subnetId"`
	// A tag assigned to VIP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag *string `pulumi:"tag"`
	// The ID of VPC linked to the VIP.
	VpcId *string `pulumi:"vpcId"`
}

type VIPState struct {
	// The time of creation for VIP, formatted in RFC3339 time string.
	CreateTime pulumi.StringPtrInput
	// The ip address of the VIP.
	IpAddress pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	// The remarks of the VIP. (Default: `""`).
	Remark pulumi.StringPtrInput
	// The ID of subnet. If defined `vpcId`, the `subnetId` is Required.
	SubnetId pulumi.StringPtrInput
	// A tag assigned to VIP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrInput
	// The ID of VPC linked to the VIP.
	VpcId pulumi.StringPtrInput
}

func (VIPState) ElementType() reflect.Type {
	return reflect.TypeOf((*vipState)(nil)).Elem()
}

type vipArgs struct {
	Name *string `pulumi:"name"`
	// The remarks of the VIP. (Default: `""`).
	Remark *string `pulumi:"remark"`
	// The ID of subnet. If defined `vpcId`, the `subnetId` is Required.
	SubnetId string `pulumi:"subnetId"`
	// A tag assigned to VIP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag *string `pulumi:"tag"`
	// The ID of VPC linked to the VIP.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VIP resource.
type VIPArgs struct {
	Name pulumi.StringPtrInput
	// The remarks of the VIP. (Default: `""`).
	Remark pulumi.StringPtrInput
	// The ID of subnet. If defined `vpcId`, the `subnetId` is Required.
	SubnetId pulumi.StringInput
	// A tag assigned to VIP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
	Tag pulumi.StringPtrInput
	// The ID of VPC linked to the VIP.
	VpcId pulumi.StringInput
}

func (VIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vipArgs)(nil)).Elem()
}

type VIPInput interface {
	pulumi.Input

	ToVIPOutput() VIPOutput
	ToVIPOutputWithContext(ctx context.Context) VIPOutput
}

func (*VIP) ElementType() reflect.Type {
	return reflect.TypeOf((*VIP)(nil))
}

func (i *VIP) ToVIPOutput() VIPOutput {
	return i.ToVIPOutputWithContext(context.Background())
}

func (i *VIP) ToVIPOutputWithContext(ctx context.Context) VIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VIPOutput)
}

func (i *VIP) ToVIPPtrOutput() VIPPtrOutput {
	return i.ToVIPPtrOutputWithContext(context.Background())
}

func (i *VIP) ToVIPPtrOutputWithContext(ctx context.Context) VIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VIPPtrOutput)
}

type VIPPtrInput interface {
	pulumi.Input

	ToVIPPtrOutput() VIPPtrOutput
	ToVIPPtrOutputWithContext(ctx context.Context) VIPPtrOutput
}

type vipPtrType VIPArgs

func (*vipPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VIP)(nil))
}

func (i *vipPtrType) ToVIPPtrOutput() VIPPtrOutput {
	return i.ToVIPPtrOutputWithContext(context.Background())
}

func (i *vipPtrType) ToVIPPtrOutputWithContext(ctx context.Context) VIPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VIPPtrOutput)
}

// VIPArrayInput is an input type that accepts VIPArray and VIPArrayOutput values.
// You can construct a concrete instance of `VIPArrayInput` via:
//
//          VIPArray{ VIPArgs{...} }
type VIPArrayInput interface {
	pulumi.Input

	ToVIPArrayOutput() VIPArrayOutput
	ToVIPArrayOutputWithContext(context.Context) VIPArrayOutput
}

type VIPArray []VIPInput

func (VIPArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*VIP)(nil))
}

func (i VIPArray) ToVIPArrayOutput() VIPArrayOutput {
	return i.ToVIPArrayOutputWithContext(context.Background())
}

func (i VIPArray) ToVIPArrayOutputWithContext(ctx context.Context) VIPArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VIPArrayOutput)
}

// VIPMapInput is an input type that accepts VIPMap and VIPMapOutput values.
// You can construct a concrete instance of `VIPMapInput` via:
//
//          VIPMap{ "key": VIPArgs{...} }
type VIPMapInput interface {
	pulumi.Input

	ToVIPMapOutput() VIPMapOutput
	ToVIPMapOutputWithContext(context.Context) VIPMapOutput
}

type VIPMap map[string]VIPInput

func (VIPMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*VIP)(nil))
}

func (i VIPMap) ToVIPMapOutput() VIPMapOutput {
	return i.ToVIPMapOutputWithContext(context.Background())
}

func (i VIPMap) ToVIPMapOutputWithContext(ctx context.Context) VIPMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VIPMapOutput)
}

type VIPOutput struct {
	*pulumi.OutputState
}

func (VIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VIP)(nil))
}

func (o VIPOutput) ToVIPOutput() VIPOutput {
	return o
}

func (o VIPOutput) ToVIPOutputWithContext(ctx context.Context) VIPOutput {
	return o
}

func (o VIPOutput) ToVIPPtrOutput() VIPPtrOutput {
	return o.ToVIPPtrOutputWithContext(context.Background())
}

func (o VIPOutput) ToVIPPtrOutputWithContext(ctx context.Context) VIPPtrOutput {
	return o.ApplyT(func(v VIP) *VIP {
		return &v
	}).(VIPPtrOutput)
}

type VIPPtrOutput struct {
	*pulumi.OutputState
}

func (VIPPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VIP)(nil))
}

func (o VIPPtrOutput) ToVIPPtrOutput() VIPPtrOutput {
	return o
}

func (o VIPPtrOutput) ToVIPPtrOutputWithContext(ctx context.Context) VIPPtrOutput {
	return o
}

type VIPArrayOutput struct{ *pulumi.OutputState }

func (VIPArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VIP)(nil))
}

func (o VIPArrayOutput) ToVIPArrayOutput() VIPArrayOutput {
	return o
}

func (o VIPArrayOutput) ToVIPArrayOutputWithContext(ctx context.Context) VIPArrayOutput {
	return o
}

func (o VIPArrayOutput) Index(i pulumi.IntInput) VIPOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VIP {
		return vs[0].([]VIP)[vs[1].(int)]
	}).(VIPOutput)
}

type VIPMapOutput struct{ *pulumi.OutputState }

func (VIPMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VIP)(nil))
}

func (o VIPMapOutput) ToVIPMapOutput() VIPMapOutput {
	return o
}

func (o VIPMapOutput) ToVIPMapOutputWithContext(ctx context.Context) VIPMapOutput {
	return o
}

func (o VIPMapOutput) MapIndex(k pulumi.StringInput) VIPOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VIP {
		return vs[0].(map[string]VIP)[vs[1].(string)]
	}).(VIPOutput)
}

func init() {
	pulumi.RegisterOutputType(VIPOutput{})
	pulumi.RegisterOutputType(VIPPtrOutput{})
	pulumi.RegisterOutputType(VIPArrayOutput{})
	pulumi.RegisterOutputType(VIPMapOutput{})
}
