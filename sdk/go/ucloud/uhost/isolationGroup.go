// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package uhost

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Isolation Group resource. The Isolation Group is a logical group of UHost instance, which ensure that each UHost instance within a group is on a different physical machine. Up to seven UHost instance can be added per isolation group in a single availability_zone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := uhost.NewIsolationGroup(ctx, "foo", &uhost.IsolationGroupArgs{
// 			Remark: pulumi.String("test"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Isolation Group can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import ucloud:uhost/isolationGroup:IsolationGroup example ig-abc123456
// ```
type IsolationGroup struct {
	pulumi.CustomResourceState

	Name pulumi.StringOutput `pulumi:"name"`
	// The remarks of the isolation group. (Default: `""`).
	Remark pulumi.StringOutput `pulumi:"remark"`
}

// NewIsolationGroup registers a new resource with the given unique name, arguments, and options.
func NewIsolationGroup(ctx *pulumi.Context,
	name string, args *IsolationGroupArgs, opts ...pulumi.ResourceOption) (*IsolationGroup, error) {
	if args == nil {
		args = &IsolationGroupArgs{}
	}

	var resource IsolationGroup
	err := ctx.RegisterResource("ucloud:uhost/isolationGroup:IsolationGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIsolationGroup gets an existing IsolationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIsolationGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IsolationGroupState, opts ...pulumi.ResourceOption) (*IsolationGroup, error) {
	var resource IsolationGroup
	err := ctx.ReadResource("ucloud:uhost/isolationGroup:IsolationGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IsolationGroup resources.
type isolationGroupState struct {
	Name *string `pulumi:"name"`
	// The remarks of the isolation group. (Default: `""`).
	Remark *string `pulumi:"remark"`
}

type IsolationGroupState struct {
	Name pulumi.StringPtrInput
	// The remarks of the isolation group. (Default: `""`).
	Remark pulumi.StringPtrInput
}

func (IsolationGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*isolationGroupState)(nil)).Elem()
}

type isolationGroupArgs struct {
	Name *string `pulumi:"name"`
	// The remarks of the isolation group. (Default: `""`).
	Remark *string `pulumi:"remark"`
}

// The set of arguments for constructing a IsolationGroup resource.
type IsolationGroupArgs struct {
	Name pulumi.StringPtrInput
	// The remarks of the isolation group. (Default: `""`).
	Remark pulumi.StringPtrInput
}

func (IsolationGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*isolationGroupArgs)(nil)).Elem()
}

type IsolationGroupInput interface {
	pulumi.Input

	ToIsolationGroupOutput() IsolationGroupOutput
	ToIsolationGroupOutputWithContext(ctx context.Context) IsolationGroupOutput
}

func (*IsolationGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*IsolationGroup)(nil))
}

func (i *IsolationGroup) ToIsolationGroupOutput() IsolationGroupOutput {
	return i.ToIsolationGroupOutputWithContext(context.Background())
}

func (i *IsolationGroup) ToIsolationGroupOutputWithContext(ctx context.Context) IsolationGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolationGroupOutput)
}

func (i *IsolationGroup) ToIsolationGroupPtrOutput() IsolationGroupPtrOutput {
	return i.ToIsolationGroupPtrOutputWithContext(context.Background())
}

func (i *IsolationGroup) ToIsolationGroupPtrOutputWithContext(ctx context.Context) IsolationGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolationGroupPtrOutput)
}

type IsolationGroupPtrInput interface {
	pulumi.Input

	ToIsolationGroupPtrOutput() IsolationGroupPtrOutput
	ToIsolationGroupPtrOutputWithContext(ctx context.Context) IsolationGroupPtrOutput
}

type isolationGroupPtrType IsolationGroupArgs

func (*isolationGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IsolationGroup)(nil))
}

func (i *isolationGroupPtrType) ToIsolationGroupPtrOutput() IsolationGroupPtrOutput {
	return i.ToIsolationGroupPtrOutputWithContext(context.Background())
}

func (i *isolationGroupPtrType) ToIsolationGroupPtrOutputWithContext(ctx context.Context) IsolationGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolationGroupPtrOutput)
}

// IsolationGroupArrayInput is an input type that accepts IsolationGroupArray and IsolationGroupArrayOutput values.
// You can construct a concrete instance of `IsolationGroupArrayInput` via:
//
//          IsolationGroupArray{ IsolationGroupArgs{...} }
type IsolationGroupArrayInput interface {
	pulumi.Input

	ToIsolationGroupArrayOutput() IsolationGroupArrayOutput
	ToIsolationGroupArrayOutputWithContext(context.Context) IsolationGroupArrayOutput
}

type IsolationGroupArray []IsolationGroupInput

func (IsolationGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*IsolationGroup)(nil))
}

func (i IsolationGroupArray) ToIsolationGroupArrayOutput() IsolationGroupArrayOutput {
	return i.ToIsolationGroupArrayOutputWithContext(context.Background())
}

func (i IsolationGroupArray) ToIsolationGroupArrayOutputWithContext(ctx context.Context) IsolationGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolationGroupArrayOutput)
}

// IsolationGroupMapInput is an input type that accepts IsolationGroupMap and IsolationGroupMapOutput values.
// You can construct a concrete instance of `IsolationGroupMapInput` via:
//
//          IsolationGroupMap{ "key": IsolationGroupArgs{...} }
type IsolationGroupMapInput interface {
	pulumi.Input

	ToIsolationGroupMapOutput() IsolationGroupMapOutput
	ToIsolationGroupMapOutputWithContext(context.Context) IsolationGroupMapOutput
}

type IsolationGroupMap map[string]IsolationGroupInput

func (IsolationGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*IsolationGroup)(nil))
}

func (i IsolationGroupMap) ToIsolationGroupMapOutput() IsolationGroupMapOutput {
	return i.ToIsolationGroupMapOutputWithContext(context.Background())
}

func (i IsolationGroupMap) ToIsolationGroupMapOutputWithContext(ctx context.Context) IsolationGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolationGroupMapOutput)
}

type IsolationGroupOutput struct {
	*pulumi.OutputState
}

func (IsolationGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsolationGroup)(nil))
}

func (o IsolationGroupOutput) ToIsolationGroupOutput() IsolationGroupOutput {
	return o
}

func (o IsolationGroupOutput) ToIsolationGroupOutputWithContext(ctx context.Context) IsolationGroupOutput {
	return o
}

func (o IsolationGroupOutput) ToIsolationGroupPtrOutput() IsolationGroupPtrOutput {
	return o.ToIsolationGroupPtrOutputWithContext(context.Background())
}

func (o IsolationGroupOutput) ToIsolationGroupPtrOutputWithContext(ctx context.Context) IsolationGroupPtrOutput {
	return o.ApplyT(func(v IsolationGroup) *IsolationGroup {
		return &v
	}).(IsolationGroupPtrOutput)
}

type IsolationGroupPtrOutput struct {
	*pulumi.OutputState
}

func (IsolationGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IsolationGroup)(nil))
}

func (o IsolationGroupPtrOutput) ToIsolationGroupPtrOutput() IsolationGroupPtrOutput {
	return o
}

func (o IsolationGroupPtrOutput) ToIsolationGroupPtrOutputWithContext(ctx context.Context) IsolationGroupPtrOutput {
	return o
}

type IsolationGroupArrayOutput struct{ *pulumi.OutputState }

func (IsolationGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IsolationGroup)(nil))
}

func (o IsolationGroupArrayOutput) ToIsolationGroupArrayOutput() IsolationGroupArrayOutput {
	return o
}

func (o IsolationGroupArrayOutput) ToIsolationGroupArrayOutputWithContext(ctx context.Context) IsolationGroupArrayOutput {
	return o
}

func (o IsolationGroupArrayOutput) Index(i pulumi.IntInput) IsolationGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IsolationGroup {
		return vs[0].([]IsolationGroup)[vs[1].(int)]
	}).(IsolationGroupOutput)
}

type IsolationGroupMapOutput struct{ *pulumi.OutputState }

func (IsolationGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IsolationGroup)(nil))
}

func (o IsolationGroupMapOutput) ToIsolationGroupMapOutput() IsolationGroupMapOutput {
	return o
}

func (o IsolationGroupMapOutput) ToIsolationGroupMapOutputWithContext(ctx context.Context) IsolationGroupMapOutput {
	return o
}

func (o IsolationGroupMapOutput) MapIndex(k pulumi.StringInput) IsolationGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IsolationGroup {
		return vs[0].(map[string]IsolationGroup)[vs[1].(string)]
	}).(IsolationGroupOutput)
}

func init() {
	pulumi.RegisterOutputType(IsolationGroupOutput{})
	pulumi.RegisterOutputType(IsolationGroupPtrOutput{})
	pulumi.RegisterOutputType(IsolationGroupArrayOutput{})
	pulumi.RegisterOutputType(IsolationGroupMapOutput{})
}
