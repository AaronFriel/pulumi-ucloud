// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package uhost

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type InstanceDiskSet struct {
	// The ID of disk.
	Id *string `pulumi:"id"`
	// Specifies whether boot disk or not.
	IsBoot *bool `pulumi:"isBoot"`
	// The size of disk, measured in GB (Gigabyte).
	Size *int `pulumi:"size"`
	// The type of disk.
	Type *string `pulumi:"type"`
}

type InstanceDiskSetInput interface {
	pulumi.Input

	ToInstanceDiskSetOutput() InstanceDiskSetOutput
	ToInstanceDiskSetOutputWithContext(context.Context) InstanceDiskSetOutput
}

type InstanceDiskSetArgs struct {
	// The ID of disk.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies whether boot disk or not.
	IsBoot pulumi.BoolPtrInput `pulumi:"isBoot"`
	// The size of disk, measured in GB (Gigabyte).
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The type of disk.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InstanceDiskSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDiskSet)(nil)).Elem()
}

func (i InstanceDiskSetArgs) ToInstanceDiskSetOutput() InstanceDiskSetOutput {
	return i.ToInstanceDiskSetOutputWithContext(context.Background())
}

func (i InstanceDiskSetArgs) ToInstanceDiskSetOutputWithContext(ctx context.Context) InstanceDiskSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDiskSetOutput)
}

type InstanceDiskSetArrayInput interface {
	pulumi.Input

	ToInstanceDiskSetArrayOutput() InstanceDiskSetArrayOutput
	ToInstanceDiskSetArrayOutputWithContext(context.Context) InstanceDiskSetArrayOutput
}

type InstanceDiskSetArray []InstanceDiskSetInput

func (InstanceDiskSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDiskSet)(nil)).Elem()
}

func (i InstanceDiskSetArray) ToInstanceDiskSetArrayOutput() InstanceDiskSetArrayOutput {
	return i.ToInstanceDiskSetArrayOutputWithContext(context.Background())
}

func (i InstanceDiskSetArray) ToInstanceDiskSetArrayOutputWithContext(ctx context.Context) InstanceDiskSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDiskSetArrayOutput)
}

type InstanceDiskSetOutput struct{ *pulumi.OutputState }

func (InstanceDiskSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDiskSet)(nil)).Elem()
}

func (o InstanceDiskSetOutput) ToInstanceDiskSetOutput() InstanceDiskSetOutput {
	return o
}

func (o InstanceDiskSetOutput) ToInstanceDiskSetOutputWithContext(ctx context.Context) InstanceDiskSetOutput {
	return o
}

// The ID of disk.
func (o InstanceDiskSetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDiskSet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies whether boot disk or not.
func (o InstanceDiskSetOutput) IsBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceDiskSet) *bool { return v.IsBoot }).(pulumi.BoolPtrOutput)
}

// The size of disk, measured in GB (Gigabyte).
func (o InstanceDiskSetOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceDiskSet) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The type of disk.
func (o InstanceDiskSetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDiskSet) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InstanceDiskSetArrayOutput struct{ *pulumi.OutputState }

func (InstanceDiskSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDiskSet)(nil)).Elem()
}

func (o InstanceDiskSetArrayOutput) ToInstanceDiskSetArrayOutput() InstanceDiskSetArrayOutput {
	return o
}

func (o InstanceDiskSetArrayOutput) ToInstanceDiskSetArrayOutputWithContext(ctx context.Context) InstanceDiskSetArrayOutput {
	return o
}

func (o InstanceDiskSetArrayOutput) Index(i pulumi.IntInput) InstanceDiskSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceDiskSet {
		return vs[0].([]InstanceDiskSet)[vs[1].(int)]
	}).(InstanceDiskSetOutput)
}

type InstanceIpSet struct {
	// Type of Elastic IP routes. Possible values are: `International` as international BGP IP, `BGP` as china BGP IP and `Private` as private IP.
	InternetType *string `pulumi:"internetType"`
	// Elastic IP address.
	Ip *string `pulumi:"ip"`
}

type InstanceIpSetInput interface {
	pulumi.Input

	ToInstanceIpSetOutput() InstanceIpSetOutput
	ToInstanceIpSetOutputWithContext(context.Context) InstanceIpSetOutput
}

type InstanceIpSetArgs struct {
	// Type of Elastic IP routes. Possible values are: `International` as international BGP IP, `BGP` as china BGP IP and `Private` as private IP.
	InternetType pulumi.StringPtrInput `pulumi:"internetType"`
	// Elastic IP address.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (InstanceIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIpSet)(nil)).Elem()
}

func (i InstanceIpSetArgs) ToInstanceIpSetOutput() InstanceIpSetOutput {
	return i.ToInstanceIpSetOutputWithContext(context.Background())
}

func (i InstanceIpSetArgs) ToInstanceIpSetOutputWithContext(ctx context.Context) InstanceIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIpSetOutput)
}

type InstanceIpSetArrayInput interface {
	pulumi.Input

	ToInstanceIpSetArrayOutput() InstanceIpSetArrayOutput
	ToInstanceIpSetArrayOutputWithContext(context.Context) InstanceIpSetArrayOutput
}

type InstanceIpSetArray []InstanceIpSetInput

func (InstanceIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceIpSet)(nil)).Elem()
}

func (i InstanceIpSetArray) ToInstanceIpSetArrayOutput() InstanceIpSetArrayOutput {
	return i.ToInstanceIpSetArrayOutputWithContext(context.Background())
}

func (i InstanceIpSetArray) ToInstanceIpSetArrayOutputWithContext(ctx context.Context) InstanceIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIpSetArrayOutput)
}

type InstanceIpSetOutput struct{ *pulumi.OutputState }

func (InstanceIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIpSet)(nil)).Elem()
}

func (o InstanceIpSetOutput) ToInstanceIpSetOutput() InstanceIpSetOutput {
	return o
}

func (o InstanceIpSetOutput) ToInstanceIpSetOutputWithContext(ctx context.Context) InstanceIpSetOutput {
	return o
}

// Type of Elastic IP routes. Possible values are: `International` as international BGP IP, `BGP` as china BGP IP and `Private` as private IP.
func (o InstanceIpSetOutput) InternetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIpSet) *string { return v.InternetType }).(pulumi.StringPtrOutput)
}

// Elastic IP address.
func (o InstanceIpSetOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceIpSet) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type InstanceIpSetArrayOutput struct{ *pulumi.OutputState }

func (InstanceIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceIpSet)(nil)).Elem()
}

func (o InstanceIpSetArrayOutput) ToInstanceIpSetArrayOutput() InstanceIpSetArrayOutput {
	return o
}

func (o InstanceIpSetArrayOutput) ToInstanceIpSetArrayOutputWithContext(ctx context.Context) InstanceIpSetArrayOutput {
	return o
}

func (o InstanceIpSetArrayOutput) Index(i pulumi.IntInput) InstanceIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceIpSet {
		return vs[0].([]InstanceIpSet)[vs[1].(int)]
	}).(InstanceIpSetOutput)
}

type LookupDisksDisk struct {
	// Availability zone where Disk are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour.
	ChargeType string `pulumi:"chargeType"`
	// The creation time of Disk, formatted in RFC3339 time string.
	CreateTime string `pulumi:"createTime"`
	// The size of disk. Purchase the size of disk in GB.
	DiskSize int `pulumi:"diskSize"`
	// The type of disk. Possible values are: `dataDisk`as cloud disk, `ssdDataDisk` as SSD cloud disk, `systemDisk`as system disk, `ssdSystemDisk` as SSD system disk, `rssdDataDisk` as RDMA-SSD cloud disk.
	DiskType string `pulumi:"diskType"`
	// The expiration time of disk, formatted in RFC3339 time string.
	ExpireTime string `pulumi:"expireTime"`
	// The ID of Disk.
	Id string `pulumi:"id"`
	// The name of Disk.
	Name string `pulumi:"name"`
	// The status of disk. Possible values are: `Available`, `InUse`, `Detaching`, `Initializating`, `Failed`, `Cloning`, `Restoring`, `RestoreFailed`.
	Status string `pulumi:"status"`
	// A tag assigned to Disk.
	Tag string `pulumi:"tag"`
}

type LookupDisksDiskInput interface {
	pulumi.Input

	ToLookupDisksDiskOutput() LookupDisksDiskOutput
	ToLookupDisksDiskOutputWithContext(context.Context) LookupDisksDiskOutput
}

type LookupDisksDiskArgs struct {
	// Availability zone where Disk are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// The charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The creation time of Disk, formatted in RFC3339 time string.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The size of disk. Purchase the size of disk in GB.
	DiskSize pulumi.IntInput `pulumi:"diskSize"`
	// The type of disk. Possible values are: `dataDisk`as cloud disk, `ssdDataDisk` as SSD cloud disk, `systemDisk`as system disk, `ssdSystemDisk` as SSD system disk, `rssdDataDisk` as RDMA-SSD cloud disk.
	DiskType pulumi.StringInput `pulumi:"diskType"`
	// The expiration time of disk, formatted in RFC3339 time string.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	// The ID of Disk.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of Disk.
	Name pulumi.StringInput `pulumi:"name"`
	// The status of disk. Possible values are: `Available`, `InUse`, `Detaching`, `Initializating`, `Failed`, `Cloning`, `Restoring`, `RestoreFailed`.
	Status pulumi.StringInput `pulumi:"status"`
	// A tag assigned to Disk.
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (LookupDisksDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDisksDisk)(nil)).Elem()
}

func (i LookupDisksDiskArgs) ToLookupDisksDiskOutput() LookupDisksDiskOutput {
	return i.ToLookupDisksDiskOutputWithContext(context.Background())
}

func (i LookupDisksDiskArgs) ToLookupDisksDiskOutputWithContext(ctx context.Context) LookupDisksDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupDisksDiskOutput)
}

type LookupDisksDiskArrayInput interface {
	pulumi.Input

	ToLookupDisksDiskArrayOutput() LookupDisksDiskArrayOutput
	ToLookupDisksDiskArrayOutputWithContext(context.Context) LookupDisksDiskArrayOutput
}

type LookupDisksDiskArray []LookupDisksDiskInput

func (LookupDisksDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupDisksDisk)(nil)).Elem()
}

func (i LookupDisksDiskArray) ToLookupDisksDiskArrayOutput() LookupDisksDiskArrayOutput {
	return i.ToLookupDisksDiskArrayOutputWithContext(context.Background())
}

func (i LookupDisksDiskArray) ToLookupDisksDiskArrayOutputWithContext(ctx context.Context) LookupDisksDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupDisksDiskArrayOutput)
}

type LookupDisksDiskOutput struct{ *pulumi.OutputState }

func (LookupDisksDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDisksDisk)(nil)).Elem()
}

func (o LookupDisksDiskOutput) ToLookupDisksDiskOutput() LookupDisksDiskOutput {
	return o
}

func (o LookupDisksDiskOutput) ToLookupDisksDiskOutputWithContext(ctx context.Context) LookupDisksDiskOutput {
	return o
}

// Availability zone where Disk are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
func (o LookupDisksDiskOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDisksDisk) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour.
func (o LookupDisksDiskOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDisksDisk) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The creation time of Disk, formatted in RFC3339 time string.
func (o LookupDisksDiskOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDisksDisk) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The size of disk. Purchase the size of disk in GB.
func (o LookupDisksDiskOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDisksDisk) int { return v.DiskSize }).(pulumi.IntOutput)
}

// The type of disk. Possible values are: `dataDisk`as cloud disk, `ssdDataDisk` as SSD cloud disk, `systemDisk`as system disk, `ssdSystemDisk` as SSD system disk, `rssdDataDisk` as RDMA-SSD cloud disk.
func (o LookupDisksDiskOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDisksDisk) string { return v.DiskType }).(pulumi.StringOutput)
}

// The expiration time of disk, formatted in RFC3339 time string.
func (o LookupDisksDiskOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDisksDisk) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// The ID of Disk.
func (o LookupDisksDiskOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDisksDisk) string { return v.Id }).(pulumi.StringOutput)
}

// The name of Disk.
func (o LookupDisksDiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDisksDisk) string { return v.Name }).(pulumi.StringOutput)
}

// The status of disk. Possible values are: `Available`, `InUse`, `Detaching`, `Initializating`, `Failed`, `Cloning`, `Restoring`, `RestoreFailed`.
func (o LookupDisksDiskOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDisksDisk) string { return v.Status }).(pulumi.StringOutput)
}

// A tag assigned to Disk.
func (o LookupDisksDiskOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDisksDisk) string { return v.Tag }).(pulumi.StringOutput)
}

type LookupDisksDiskArrayOutput struct{ *pulumi.OutputState }

func (LookupDisksDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupDisksDisk)(nil)).Elem()
}

func (o LookupDisksDiskArrayOutput) ToLookupDisksDiskArrayOutput() LookupDisksDiskArrayOutput {
	return o
}

func (o LookupDisksDiskArrayOutput) ToLookupDisksDiskArrayOutputWithContext(ctx context.Context) LookupDisksDiskArrayOutput {
	return o
}

func (o LookupDisksDiskArrayOutput) Index(i pulumi.IntInput) LookupDisksDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LookupDisksDisk {
		return vs[0].([]LookupDisksDisk)[vs[1].(int)]
	}).(LookupDisksDiskOutput)
}

type LookupImagesImage struct {
	// Availability zone where images are located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The time of creation for image, formatted in RFC3339 time string.
	CreateTime string `pulumi:"createTime"`
	// The description of image if any.
	Description string `pulumi:"description"`
	// To identify if any particular feature belongs to the instance, the value is `NetEnhnced` as I/O enhanced instance for now.
	Features []string `pulumi:"features"`
	// The ID of image.
	Id string `pulumi:"id"`
	// The name of image.
	Name string `pulumi:"name"`
	// The name of OS.
	OsName string `pulumi:"osName"`
	// The type of OS. Possible values are: `linux` and `windows`, all the OS types will be retrieved by default.
	OsType string `pulumi:"osType"`
	// The size of image.
	Size int `pulumi:"size"`
	// The status of image. Possible values are `Available`, `Making` and `Unavailable`.
	Status string `pulumi:"status"`
	// The type of image.
	Type string `pulumi:"type"`
}

type LookupImagesImageInput interface {
	pulumi.Input

	ToLookupImagesImageOutput() LookupImagesImageOutput
	ToLookupImagesImageOutputWithContext(context.Context) LookupImagesImageOutput
}

type LookupImagesImageArgs struct {
	// Availability zone where images are located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// The time of creation for image, formatted in RFC3339 time string.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of image if any.
	Description pulumi.StringInput `pulumi:"description"`
	// To identify if any particular feature belongs to the instance, the value is `NetEnhnced` as I/O enhanced instance for now.
	Features pulumi.StringArrayInput `pulumi:"features"`
	// The ID of image.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of image.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of OS.
	OsName pulumi.StringInput `pulumi:"osName"`
	// The type of OS. Possible values are: `linux` and `windows`, all the OS types will be retrieved by default.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The size of image.
	Size pulumi.IntInput `pulumi:"size"`
	// The status of image. Possible values are `Available`, `Making` and `Unavailable`.
	Status pulumi.StringInput `pulumi:"status"`
	// The type of image.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupImagesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImagesImage)(nil)).Elem()
}

func (i LookupImagesImageArgs) ToLookupImagesImageOutput() LookupImagesImageOutput {
	return i.ToLookupImagesImageOutputWithContext(context.Background())
}

func (i LookupImagesImageArgs) ToLookupImagesImageOutputWithContext(ctx context.Context) LookupImagesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupImagesImageOutput)
}

type LookupImagesImageArrayInput interface {
	pulumi.Input

	ToLookupImagesImageArrayOutput() LookupImagesImageArrayOutput
	ToLookupImagesImageArrayOutputWithContext(context.Context) LookupImagesImageArrayOutput
}

type LookupImagesImageArray []LookupImagesImageInput

func (LookupImagesImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupImagesImage)(nil)).Elem()
}

func (i LookupImagesImageArray) ToLookupImagesImageArrayOutput() LookupImagesImageArrayOutput {
	return i.ToLookupImagesImageArrayOutputWithContext(context.Background())
}

func (i LookupImagesImageArray) ToLookupImagesImageArrayOutputWithContext(ctx context.Context) LookupImagesImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupImagesImageArrayOutput)
}

type LookupImagesImageOutput struct{ *pulumi.OutputState }

func (LookupImagesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImagesImage)(nil)).Elem()
}

func (o LookupImagesImageOutput) ToLookupImagesImageOutput() LookupImagesImageOutput {
	return o
}

func (o LookupImagesImageOutput) ToLookupImagesImageOutputWithContext(ctx context.Context) LookupImagesImageOutput {
	return o
}

// Availability zone where images are located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
func (o LookupImagesImageOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImagesImage) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The time of creation for image, formatted in RFC3339 time string.
func (o LookupImagesImageOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImagesImage) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of image if any.
func (o LookupImagesImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImagesImage) string { return v.Description }).(pulumi.StringOutput)
}

// To identify if any particular feature belongs to the instance, the value is `NetEnhnced` as I/O enhanced instance for now.
func (o LookupImagesImageOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupImagesImage) []string { return v.Features }).(pulumi.StringArrayOutput)
}

// The ID of image.
func (o LookupImagesImageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImagesImage) string { return v.Id }).(pulumi.StringOutput)
}

// The name of image.
func (o LookupImagesImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImagesImage) string { return v.Name }).(pulumi.StringOutput)
}

// The name of OS.
func (o LookupImagesImageOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImagesImage) string { return v.OsName }).(pulumi.StringOutput)
}

// The type of OS. Possible values are: `linux` and `windows`, all the OS types will be retrieved by default.
func (o LookupImagesImageOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImagesImage) string { return v.OsType }).(pulumi.StringOutput)
}

// The size of image.
func (o LookupImagesImageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImagesImage) int { return v.Size }).(pulumi.IntOutput)
}

// The status of image. Possible values are `Available`, `Making` and `Unavailable`.
func (o LookupImagesImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImagesImage) string { return v.Status }).(pulumi.StringOutput)
}

// The type of image.
func (o LookupImagesImageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImagesImage) string { return v.Type }).(pulumi.StringOutput)
}

type LookupImagesImageArrayOutput struct{ *pulumi.OutputState }

func (LookupImagesImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupImagesImage)(nil)).Elem()
}

func (o LookupImagesImageArrayOutput) ToLookupImagesImageArrayOutput() LookupImagesImageArrayOutput {
	return o
}

func (o LookupImagesImageArrayOutput) ToLookupImagesImageArrayOutputWithContext(ctx context.Context) LookupImagesImageArrayOutput {
	return o
}

func (o LookupImagesImageArrayOutput) Index(i pulumi.IntInput) LookupImagesImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LookupImagesImage {
		return vs[0].([]LookupImagesImage)[vs[1].(int)]
	}).(LookupImagesImageOutput)
}

type LookupInstancesInstance struct {
	// Whether to renew an instance automatically or not.
	AutoRenew bool `pulumi:"autoRenew"`
	// Availability zone where instances are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The charge type of instance, possible values are: `year`, `month` and `dynamic` as pay by hour.
	ChargeType string `pulumi:"chargeType"`
	// The number of cores of virtual CPU, measureed in core.
	Cpu int `pulumi:"cpu"`
	// The time of creation for instance, formatted in RFC3339 time string.
	CreateTime string `pulumi:"createTime"`
	// It is a nested type which documented below.
	DiskSets []LookupInstancesInstanceDiskSet `pulumi:"diskSets"`
	// The expiration time for instance, formatted in RFC3339 time string.
	ExpireTime string `pulumi:"expireTime"`
	// The ID of disk.
	Id string `pulumi:"id"`
	// The type of instance.
	InstanceType string `pulumi:"instanceType"`
	// It is a nested type which documented below.
	IpSets []LookupInstancesInstanceIpSet `pulumi:"ipSets"`
	// The size of memory, measured in MB (Megabyte).
	Memory int `pulumi:"memory"`
	// The name of the instance.
	Name string `pulumi:"name"`
	// The private IP address assigned to the instance.
	PrivateIp string `pulumi:"privateIp"`
	// The remarks of instance.
	Remark string `pulumi:"remark"`
	// Instance current status. Possible values are `Initializing`, `Starting`, `Running`, `Stopping`, `Stopped`, `Install Fail` and `Rebooting`.
	Status string `pulumi:"status"`
	// The ID of subnet linked to the instance.
	SubnetId string `pulumi:"subnetId"`
	// A tag assigned to instance.
	Tag string `pulumi:"tag"`
	// The ID of VPC linked to the instance.
	VpcId string `pulumi:"vpcId"`
}

type LookupInstancesInstanceInput interface {
	pulumi.Input

	ToLookupInstancesInstanceOutput() LookupInstancesInstanceOutput
	ToLookupInstancesInstanceOutputWithContext(context.Context) LookupInstancesInstanceOutput
}

type LookupInstancesInstanceArgs struct {
	// Whether to renew an instance automatically or not.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// Availability zone where instances are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// The charge type of instance, possible values are: `year`, `month` and `dynamic` as pay by hour.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The number of cores of virtual CPU, measureed in core.
	Cpu pulumi.IntInput `pulumi:"cpu"`
	// The time of creation for instance, formatted in RFC3339 time string.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// It is a nested type which documented below.
	DiskSets LookupInstancesInstanceDiskSetArrayInput `pulumi:"diskSets"`
	// The expiration time for instance, formatted in RFC3339 time string.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	// The ID of disk.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// It is a nested type which documented below.
	IpSets LookupInstancesInstanceIpSetArrayInput `pulumi:"ipSets"`
	// The size of memory, measured in MB (Megabyte).
	Memory pulumi.IntInput `pulumi:"memory"`
	// The name of the instance.
	Name pulumi.StringInput `pulumi:"name"`
	// The private IP address assigned to the instance.
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// The remarks of instance.
	Remark pulumi.StringInput `pulumi:"remark"`
	// Instance current status. Possible values are `Initializing`, `Starting`, `Running`, `Stopping`, `Stopped`, `Install Fail` and `Rebooting`.
	Status pulumi.StringInput `pulumi:"status"`
	// The ID of subnet linked to the instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A tag assigned to instance.
	Tag pulumi.StringInput `pulumi:"tag"`
	// The ID of VPC linked to the instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (LookupInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstancesInstance)(nil)).Elem()
}

func (i LookupInstancesInstanceArgs) ToLookupInstancesInstanceOutput() LookupInstancesInstanceOutput {
	return i.ToLookupInstancesInstanceOutputWithContext(context.Background())
}

func (i LookupInstancesInstanceArgs) ToLookupInstancesInstanceOutputWithContext(ctx context.Context) LookupInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupInstancesInstanceOutput)
}

type LookupInstancesInstanceArrayInput interface {
	pulumi.Input

	ToLookupInstancesInstanceArrayOutput() LookupInstancesInstanceArrayOutput
	ToLookupInstancesInstanceArrayOutputWithContext(context.Context) LookupInstancesInstanceArrayOutput
}

type LookupInstancesInstanceArray []LookupInstancesInstanceInput

func (LookupInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupInstancesInstance)(nil)).Elem()
}

func (i LookupInstancesInstanceArray) ToLookupInstancesInstanceArrayOutput() LookupInstancesInstanceArrayOutput {
	return i.ToLookupInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i LookupInstancesInstanceArray) ToLookupInstancesInstanceArrayOutputWithContext(ctx context.Context) LookupInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupInstancesInstanceArrayOutput)
}

type LookupInstancesInstanceOutput struct{ *pulumi.OutputState }

func (LookupInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstancesInstance)(nil)).Elem()
}

func (o LookupInstancesInstanceOutput) ToLookupInstancesInstanceOutput() LookupInstancesInstanceOutput {
	return o
}

func (o LookupInstancesInstanceOutput) ToLookupInstancesInstanceOutputWithContext(ctx context.Context) LookupInstancesInstanceOutput {
	return o
}

// Whether to renew an instance automatically or not.
func (o LookupInstancesInstanceOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstancesInstance) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// Availability zone where instances are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
func (o LookupInstancesInstanceOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The charge type of instance, possible values are: `year`, `month` and `dynamic` as pay by hour.
func (o LookupInstancesInstanceOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The number of cores of virtual CPU, measureed in core.
func (o LookupInstancesInstanceOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstancesInstance) int { return v.Cpu }).(pulumi.IntOutput)
}

// The time of creation for instance, formatted in RFC3339 time string.
func (o LookupInstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// It is a nested type which documented below.
func (o LookupInstancesInstanceOutput) DiskSets() LookupInstancesInstanceDiskSetArrayOutput {
	return o.ApplyT(func(v LookupInstancesInstance) []LookupInstancesInstanceDiskSet { return v.DiskSets }).(LookupInstancesInstanceDiskSetArrayOutput)
}

// The expiration time for instance, formatted in RFC3339 time string.
func (o LookupInstancesInstanceOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// The ID of disk.
func (o LookupInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The type of instance.
func (o LookupInstancesInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.InstanceType }).(pulumi.StringOutput)
}

// It is a nested type which documented below.
func (o LookupInstancesInstanceOutput) IpSets() LookupInstancesInstanceIpSetArrayOutput {
	return o.ApplyT(func(v LookupInstancesInstance) []LookupInstancesInstanceIpSet { return v.IpSets }).(LookupInstancesInstanceIpSetArrayOutput)
}

// The size of memory, measured in MB (Megabyte).
func (o LookupInstancesInstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstancesInstance) int { return v.Memory }).(pulumi.IntOutput)
}

// The name of the instance.
func (o LookupInstancesInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.Name }).(pulumi.StringOutput)
}

// The private IP address assigned to the instance.
func (o LookupInstancesInstanceOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The remarks of instance.
func (o LookupInstancesInstanceOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.Remark }).(pulumi.StringOutput)
}

// Instance current status. Possible values are `Initializing`, `Starting`, `Running`, `Stopping`, `Stopped`, `Install Fail` and `Rebooting`.
func (o LookupInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// The ID of subnet linked to the instance.
func (o LookupInstancesInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// A tag assigned to instance.
func (o LookupInstancesInstanceOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.Tag }).(pulumi.StringOutput)
}

// The ID of VPC linked to the instance.
func (o LookupInstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

type LookupInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (LookupInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupInstancesInstance)(nil)).Elem()
}

func (o LookupInstancesInstanceArrayOutput) ToLookupInstancesInstanceArrayOutput() LookupInstancesInstanceArrayOutput {
	return o
}

func (o LookupInstancesInstanceArrayOutput) ToLookupInstancesInstanceArrayOutputWithContext(ctx context.Context) LookupInstancesInstanceArrayOutput {
	return o
}

func (o LookupInstancesInstanceArrayOutput) Index(i pulumi.IntInput) LookupInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LookupInstancesInstance {
		return vs[0].([]LookupInstancesInstance)[vs[1].(int)]
	}).(LookupInstancesInstanceOutput)
}

type LookupInstancesInstanceDiskSet struct {
	// The ID of disk.
	Id string `pulumi:"id"`
	// Specifies whether boot disk or not.
	IsBoot bool `pulumi:"isBoot"`
	// The size of disk, measured in GB (Gigabyte).
	Size int `pulumi:"size"`
	// The type of disk.
	Type string `pulumi:"type"`
}

type LookupInstancesInstanceDiskSetInput interface {
	pulumi.Input

	ToLookupInstancesInstanceDiskSetOutput() LookupInstancesInstanceDiskSetOutput
	ToLookupInstancesInstanceDiskSetOutputWithContext(context.Context) LookupInstancesInstanceDiskSetOutput
}

type LookupInstancesInstanceDiskSetArgs struct {
	// The ID of disk.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether boot disk or not.
	IsBoot pulumi.BoolInput `pulumi:"isBoot"`
	// The size of disk, measured in GB (Gigabyte).
	Size pulumi.IntInput `pulumi:"size"`
	// The type of disk.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupInstancesInstanceDiskSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstancesInstanceDiskSet)(nil)).Elem()
}

func (i LookupInstancesInstanceDiskSetArgs) ToLookupInstancesInstanceDiskSetOutput() LookupInstancesInstanceDiskSetOutput {
	return i.ToLookupInstancesInstanceDiskSetOutputWithContext(context.Background())
}

func (i LookupInstancesInstanceDiskSetArgs) ToLookupInstancesInstanceDiskSetOutputWithContext(ctx context.Context) LookupInstancesInstanceDiskSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupInstancesInstanceDiskSetOutput)
}

type LookupInstancesInstanceDiskSetArrayInput interface {
	pulumi.Input

	ToLookupInstancesInstanceDiskSetArrayOutput() LookupInstancesInstanceDiskSetArrayOutput
	ToLookupInstancesInstanceDiskSetArrayOutputWithContext(context.Context) LookupInstancesInstanceDiskSetArrayOutput
}

type LookupInstancesInstanceDiskSetArray []LookupInstancesInstanceDiskSetInput

func (LookupInstancesInstanceDiskSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupInstancesInstanceDiskSet)(nil)).Elem()
}

func (i LookupInstancesInstanceDiskSetArray) ToLookupInstancesInstanceDiskSetArrayOutput() LookupInstancesInstanceDiskSetArrayOutput {
	return i.ToLookupInstancesInstanceDiskSetArrayOutputWithContext(context.Background())
}

func (i LookupInstancesInstanceDiskSetArray) ToLookupInstancesInstanceDiskSetArrayOutputWithContext(ctx context.Context) LookupInstancesInstanceDiskSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupInstancesInstanceDiskSetArrayOutput)
}

type LookupInstancesInstanceDiskSetOutput struct{ *pulumi.OutputState }

func (LookupInstancesInstanceDiskSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstancesInstanceDiskSet)(nil)).Elem()
}

func (o LookupInstancesInstanceDiskSetOutput) ToLookupInstancesInstanceDiskSetOutput() LookupInstancesInstanceDiskSetOutput {
	return o
}

func (o LookupInstancesInstanceDiskSetOutput) ToLookupInstancesInstanceDiskSetOutputWithContext(ctx context.Context) LookupInstancesInstanceDiskSetOutput {
	return o
}

// The ID of disk.
func (o LookupInstancesInstanceDiskSetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstanceDiskSet) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether boot disk or not.
func (o LookupInstancesInstanceDiskSetOutput) IsBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstancesInstanceDiskSet) bool { return v.IsBoot }).(pulumi.BoolOutput)
}

// The size of disk, measured in GB (Gigabyte).
func (o LookupInstancesInstanceDiskSetOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstancesInstanceDiskSet) int { return v.Size }).(pulumi.IntOutput)
}

// The type of disk.
func (o LookupInstancesInstanceDiskSetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstanceDiskSet) string { return v.Type }).(pulumi.StringOutput)
}

type LookupInstancesInstanceDiskSetArrayOutput struct{ *pulumi.OutputState }

func (LookupInstancesInstanceDiskSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupInstancesInstanceDiskSet)(nil)).Elem()
}

func (o LookupInstancesInstanceDiskSetArrayOutput) ToLookupInstancesInstanceDiskSetArrayOutput() LookupInstancesInstanceDiskSetArrayOutput {
	return o
}

func (o LookupInstancesInstanceDiskSetArrayOutput) ToLookupInstancesInstanceDiskSetArrayOutputWithContext(ctx context.Context) LookupInstancesInstanceDiskSetArrayOutput {
	return o
}

func (o LookupInstancesInstanceDiskSetArrayOutput) Index(i pulumi.IntInput) LookupInstancesInstanceDiskSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LookupInstancesInstanceDiskSet {
		return vs[0].([]LookupInstancesInstanceDiskSet)[vs[1].(int)]
	}).(LookupInstancesInstanceDiskSetOutput)
}

type LookupInstancesInstanceIpSet struct {
	// Type of Elastic IP routes.
	InternetType string `pulumi:"internetType"`
	// Elastic IP address.
	Ip string `pulumi:"ip"`
}

type LookupInstancesInstanceIpSetInput interface {
	pulumi.Input

	ToLookupInstancesInstanceIpSetOutput() LookupInstancesInstanceIpSetOutput
	ToLookupInstancesInstanceIpSetOutputWithContext(context.Context) LookupInstancesInstanceIpSetOutput
}

type LookupInstancesInstanceIpSetArgs struct {
	// Type of Elastic IP routes.
	InternetType pulumi.StringInput `pulumi:"internetType"`
	// Elastic IP address.
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (LookupInstancesInstanceIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstancesInstanceIpSet)(nil)).Elem()
}

func (i LookupInstancesInstanceIpSetArgs) ToLookupInstancesInstanceIpSetOutput() LookupInstancesInstanceIpSetOutput {
	return i.ToLookupInstancesInstanceIpSetOutputWithContext(context.Background())
}

func (i LookupInstancesInstanceIpSetArgs) ToLookupInstancesInstanceIpSetOutputWithContext(ctx context.Context) LookupInstancesInstanceIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupInstancesInstanceIpSetOutput)
}

type LookupInstancesInstanceIpSetArrayInput interface {
	pulumi.Input

	ToLookupInstancesInstanceIpSetArrayOutput() LookupInstancesInstanceIpSetArrayOutput
	ToLookupInstancesInstanceIpSetArrayOutputWithContext(context.Context) LookupInstancesInstanceIpSetArrayOutput
}

type LookupInstancesInstanceIpSetArray []LookupInstancesInstanceIpSetInput

func (LookupInstancesInstanceIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupInstancesInstanceIpSet)(nil)).Elem()
}

func (i LookupInstancesInstanceIpSetArray) ToLookupInstancesInstanceIpSetArrayOutput() LookupInstancesInstanceIpSetArrayOutput {
	return i.ToLookupInstancesInstanceIpSetArrayOutputWithContext(context.Background())
}

func (i LookupInstancesInstanceIpSetArray) ToLookupInstancesInstanceIpSetArrayOutputWithContext(ctx context.Context) LookupInstancesInstanceIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupInstancesInstanceIpSetArrayOutput)
}

type LookupInstancesInstanceIpSetOutput struct{ *pulumi.OutputState }

func (LookupInstancesInstanceIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstancesInstanceIpSet)(nil)).Elem()
}

func (o LookupInstancesInstanceIpSetOutput) ToLookupInstancesInstanceIpSetOutput() LookupInstancesInstanceIpSetOutput {
	return o
}

func (o LookupInstancesInstanceIpSetOutput) ToLookupInstancesInstanceIpSetOutputWithContext(ctx context.Context) LookupInstancesInstanceIpSetOutput {
	return o
}

// Type of Elastic IP routes.
func (o LookupInstancesInstanceIpSetOutput) InternetType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstanceIpSet) string { return v.InternetType }).(pulumi.StringOutput)
}

// Elastic IP address.
func (o LookupInstancesInstanceIpSetOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancesInstanceIpSet) string { return v.Ip }).(pulumi.StringOutput)
}

type LookupInstancesInstanceIpSetArrayOutput struct{ *pulumi.OutputState }

func (LookupInstancesInstanceIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupInstancesInstanceIpSet)(nil)).Elem()
}

func (o LookupInstancesInstanceIpSetArrayOutput) ToLookupInstancesInstanceIpSetArrayOutput() LookupInstancesInstanceIpSetArrayOutput {
	return o
}

func (o LookupInstancesInstanceIpSetArrayOutput) ToLookupInstancesInstanceIpSetArrayOutputWithContext(ctx context.Context) LookupInstancesInstanceIpSetArrayOutput {
	return o
}

func (o LookupInstancesInstanceIpSetArrayOutput) Index(i pulumi.IntInput) LookupInstancesInstanceIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LookupInstancesInstanceIpSet {
		return vs[0].([]LookupInstancesInstanceIpSet)[vs[1].(int)]
	}).(LookupInstancesInstanceIpSetOutput)
}

func init() {
	pulumi.RegisterOutputType(InstanceDiskSetOutput{})
	pulumi.RegisterOutputType(InstanceDiskSetArrayOutput{})
	pulumi.RegisterOutputType(InstanceIpSetOutput{})
	pulumi.RegisterOutputType(InstanceIpSetArrayOutput{})
	pulumi.RegisterOutputType(LookupDisksDiskOutput{})
	pulumi.RegisterOutputType(LookupDisksDiskArrayOutput{})
	pulumi.RegisterOutputType(LookupImagesImageOutput{})
	pulumi.RegisterOutputType(LookupImagesImageArrayOutput{})
	pulumi.RegisterOutputType(LookupInstancesInstanceOutput{})
	pulumi.RegisterOutputType(LookupInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(LookupInstancesInstanceDiskSetOutput{})
	pulumi.RegisterOutputType(LookupInstancesInstanceDiskSetArrayOutput{})
	pulumi.RegisterOutputType(LookupInstancesInstanceIpSetOutput{})
	pulumi.RegisterOutputType(LookupInstancesInstanceIpSetArrayOutput{})
}
