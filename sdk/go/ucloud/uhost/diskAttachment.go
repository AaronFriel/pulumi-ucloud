// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package uhost

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cloud Disk Attachment resource for attaching Cloud Disk to UHost Instance.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/r/disk_attachment.html.markdown.
type DiskAttachment struct {
	pulumi.CustomResourceState

	// The Zone to attach the disk in.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The ID of disk that needs to be attached
	DiskId pulumi.StringOutput `pulumi:"diskId"`
	// The ID of host instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewDiskAttachment registers a new resource with the given unique name, arguments, and options.
func NewDiskAttachment(ctx *pulumi.Context,
	name string, args *DiskAttachmentArgs, opts ...pulumi.ResourceOption) (*DiskAttachment, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	if args == nil || args.DiskId == nil {
		return nil, errors.New("missing required argument 'DiskId'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil {
		args = &DiskAttachmentArgs{}
	}
	var resource DiskAttachment
	err := ctx.RegisterResource("ucloud:uhost/diskAttachment:DiskAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskAttachment gets an existing DiskAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskAttachmentState, opts ...pulumi.ResourceOption) (*DiskAttachment, error) {
	var resource DiskAttachment
	err := ctx.ReadResource("ucloud:uhost/diskAttachment:DiskAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskAttachment resources.
type diskAttachmentState struct {
	// The Zone to attach the disk in.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The ID of disk that needs to be attached
	DiskId *string `pulumi:"diskId"`
	// The ID of host instance.
	InstanceId *string `pulumi:"instanceId"`
}

type DiskAttachmentState struct {
	// The Zone to attach the disk in.
	AvailabilityZone pulumi.StringPtrInput
	// The ID of disk that needs to be attached
	DiskId pulumi.StringPtrInput
	// The ID of host instance.
	InstanceId pulumi.StringPtrInput
}

func (DiskAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAttachmentState)(nil)).Elem()
}

type diskAttachmentArgs struct {
	// The Zone to attach the disk in.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The ID of disk that needs to be attached
	DiskId string `pulumi:"diskId"`
	// The ID of host instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a DiskAttachment resource.
type DiskAttachmentArgs struct {
	// The Zone to attach the disk in.
	AvailabilityZone pulumi.StringInput
	// The ID of disk that needs to be attached
	DiskId pulumi.StringInput
	// The ID of host instance.
	InstanceId pulumi.StringInput
}

func (DiskAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAttachmentArgs)(nil)).Elem()
}
