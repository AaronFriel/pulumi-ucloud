# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetLBListenersResult',
    'AwaitableGetLBListenersResult',
    'get_lb_listeners',
]

@pulumi.output_type
class GetLBListenersResult:
    """
    A collection of values returned by getLBListeners.
    """
    def __init__(__self__, id=None, ids=None, lb_listeners=None, load_balancer_id=None, name_regex=None, output_file=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if lb_listeners and not isinstance(lb_listeners, list):
            raise TypeError("Expected argument 'lb_listeners' to be a list")
        pulumi.set(__self__, "lb_listeners", lb_listeners)
        if load_balancer_id and not isinstance(load_balancer_id, str):
            raise TypeError("Expected argument 'load_balancer_id' to be a str")
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="lbListeners")
    def lb_listeners(self) -> Sequence['outputs.GetLBListenersLbListenerResult']:
        """
        It is a nested type which documented below.
        """
        return pulumi.get(self, "lb_listeners")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        Total number of LB listeners that satisfy the condition.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetLBListenersResult(GetLBListenersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLBListenersResult(
            id=self.id,
            ids=self.ids,
            lb_listeners=self.lb_listeners,
            load_balancer_id=self.load_balancer_id,
            name_regex=self.name_regex,
            output_file=self.output_file,
            total_count=self.total_count)


def get_lb_listeners(ids: Optional[Sequence[str]] = None,
                     load_balancer_id: Optional[str] = None,
                     name_regex: Optional[str] = None,
                     output_file: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLBListenersResult:
    """
    This data source provides a list of Load Balancer Listener resources according to their Load Balancer Listener ID.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ucloud as ucloud

    example = ucloud.ulb.get_lb_listeners(load_balancer_id="ulb-xxx")
    pulumi.export("first", example.lb_listeners[0].id)
    ```


    :param Sequence[str] ids: A list of LB Listener IDs, all the LB Listeners belong to this region will be retrieved if the ID is `[]`.
    :param str load_balancer_id: The ID of a load balancer.
    :param str name_regex: A regex string to filter resulting lb listeners by name.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['loadBalancerId'] = load_balancer_id
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('ucloud:ulb/getLBListeners:getLBListeners', __args__, opts=opts, typ=GetLBListenersResult).value

    return AwaitableGetLBListenersResult(
        id=__ret__.id,
        ids=__ret__.ids,
        lb_listeners=__ret__.lb_listeners,
        load_balancer_id=__ret__.load_balancer_id,
        name_regex=__ret__.name_regex,
        output_file=__ret__.output_file,
        total_count=__ret__.total_count)
