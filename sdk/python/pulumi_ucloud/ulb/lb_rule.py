# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LBRuleArgs', 'LBRule']

@pulumi.input_type
class LBRuleArgs:
    def __init__(__self__, *,
                 backend_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 listener_id: pulumi.Input[str],
                 load_balancer_id: pulumi.Input[str],
                 domain: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LBRule resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backend_ids: The IDs of the backend servers where rule applies, this argument is populated base on the `backend_id` responded from `lb_attachment` create.
        :param pulumi.Input[str] listener_id: The ID of a listener server.
        :param pulumi.Input[str] load_balancer_id: The ID of a load balancer.
        :param pulumi.Input[str] domain: The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        :param pulumi.Input[str] path: The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        """
        pulumi.set(__self__, "backend_ids", backend_ids)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="backendIds")
    def backend_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The IDs of the backend servers where rule applies, this argument is populated base on the `backend_id` responded from `lb_attachment` create.
        """
        return pulumi.get(self, "backend_ids")

    @backend_ids.setter
    def backend_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "backend_ids", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Input[str]:
        """
        The ID of a listener server.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Input[str]:
        """
        The ID of a load balancer.
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class _LBRuleState:
    def __init__(__self__, *,
                 backend_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LBRule resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backend_ids: The IDs of the backend servers where rule applies, this argument is populated base on the `backend_id` responded from `lb_attachment` create.
        :param pulumi.Input[str] domain: The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        :param pulumi.Input[str] listener_id: The ID of a listener server.
        :param pulumi.Input[str] load_balancer_id: The ID of a load balancer.
        :param pulumi.Input[str] path: The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        """
        if backend_ids is not None:
            pulumi.set(__self__, "backend_ids", backend_ids)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="backendIds")
    def backend_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of the backend servers where rule applies, this argument is populated base on the `backend_id` responded from `lb_attachment` create.
        """
        return pulumi.get(self, "backend_ids")

    @backend_ids.setter
    def backend_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backend_ids", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a listener server.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a load balancer.
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


class LBRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backend_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Load Balancer Rule resource to add content forwarding policies for Load Balancer backend resource.

        > **Note** The Load Balancer Rule can only be define while the `protocol` of lb listener is one of HTTP and HTTPS. In addition, should set one of `domain` and `path` if defined.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        default_image = ucloud.uhost.get_image(availability_zone="cn-bj2-02",
            name_regex="^CentOS 6.5 64",
            image_type="base")
        web_lb = ucloud.ulb.LB("webLB", tag="tf-example")
        default_lb_listener = ucloud.ulb.LBListener("defaultLBListener",
            load_balancer_id=web_lb.id,
            protocol="http")
        web_instance = ucloud.uhost.Instance("webInstance",
            instance_type="n-basic-2",
            availability_zone="cn-bj2-02",
            root_password="wA1234567",
            image_id=default_image.images[0].id,
            tag="tf-example")
        default_lb_attachment = ucloud.ulb.LBAttachment("defaultLBAttachment",
            load_balancer_id=web_lb.id,
            listener_id=default_lb_listener.id,
            resource_type="instance",
            resource_id=web_instance.id,
            port=80)
        example = ucloud.ulb.LBRule("example",
            load_balancer_id=web_lb.id,
            listener_id=default_lb_listener.id,
            backend_ids=[__item.id for __item in [default_lb_attachment]],
            domain="www.ucloud.cn")
        ```

        ## Import

        LB Listener can be imported using the `id`, e.g.

        ```sh
         $ pulumi import ucloud:ulb/lBRule:LBRule example rule-abcdefg
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backend_ids: The IDs of the backend servers where rule applies, this argument is populated base on the `backend_id` responded from `lb_attachment` create.
        :param pulumi.Input[str] domain: The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        :param pulumi.Input[str] listener_id: The ID of a listener server.
        :param pulumi.Input[str] load_balancer_id: The ID of a load balancer.
        :param pulumi.Input[str] path: The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LBRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Load Balancer Rule resource to add content forwarding policies for Load Balancer backend resource.

        > **Note** The Load Balancer Rule can only be define while the `protocol` of lb listener is one of HTTP and HTTPS. In addition, should set one of `domain` and `path` if defined.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        default_image = ucloud.uhost.get_image(availability_zone="cn-bj2-02",
            name_regex="^CentOS 6.5 64",
            image_type="base")
        web_lb = ucloud.ulb.LB("webLB", tag="tf-example")
        default_lb_listener = ucloud.ulb.LBListener("defaultLBListener",
            load_balancer_id=web_lb.id,
            protocol="http")
        web_instance = ucloud.uhost.Instance("webInstance",
            instance_type="n-basic-2",
            availability_zone="cn-bj2-02",
            root_password="wA1234567",
            image_id=default_image.images[0].id,
            tag="tf-example")
        default_lb_attachment = ucloud.ulb.LBAttachment("defaultLBAttachment",
            load_balancer_id=web_lb.id,
            listener_id=default_lb_listener.id,
            resource_type="instance",
            resource_id=web_instance.id,
            port=80)
        example = ucloud.ulb.LBRule("example",
            load_balancer_id=web_lb.id,
            listener_id=default_lb_listener.id,
            backend_ids=[__item.id for __item in [default_lb_attachment]],
            domain="www.ucloud.cn")
        ```

        ## Import

        LB Listener can be imported using the `id`, e.g.

        ```sh
         $ pulumi import ucloud:ulb/lBRule:LBRule example rule-abcdefg
        ```

        :param str resource_name: The name of the resource.
        :param LBRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LBRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backend_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LBRuleArgs.__new__(LBRuleArgs)

            if backend_ids is None and not opts.urn:
                raise TypeError("Missing required property 'backend_ids'")
            __props__.__dict__["backend_ids"] = backend_ids
            __props__.__dict__["domain"] = domain
            if listener_id is None and not opts.urn:
                raise TypeError("Missing required property 'listener_id'")
            __props__.__dict__["listener_id"] = listener_id
            if load_balancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_id'")
            __props__.__dict__["load_balancer_id"] = load_balancer_id
            __props__.__dict__["path"] = path
        super(LBRule, __self__).__init__(
            'ucloud:ulb/lBRule:LBRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backend_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            listener_id: Optional[pulumi.Input[str]] = None,
            load_balancer_id: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None) -> 'LBRule':
        """
        Get an existing LBRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backend_ids: The IDs of the backend servers where rule applies, this argument is populated base on the `backend_id` responded from `lb_attachment` create.
        :param pulumi.Input[str] domain: The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        :param pulumi.Input[str] listener_id: The ID of a listener server.
        :param pulumi.Input[str] load_balancer_id: The ID of a load balancer.
        :param pulumi.Input[str] path: The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LBRuleState.__new__(_LBRuleState)

        __props__.__dict__["backend_ids"] = backend_ids
        __props__.__dict__["domain"] = domain
        __props__.__dict__["listener_id"] = listener_id
        __props__.__dict__["load_balancer_id"] = load_balancer_id
        __props__.__dict__["path"] = path
        return LBRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backendIds")
    def backend_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The IDs of the backend servers where rule applies, this argument is populated base on the `backend_id` responded from `lb_attachment` create.
        """
        return pulumi.get(self, "backend_ids")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        """
        The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[str]:
        """
        The ID of a listener server.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Output[str]:
        """
        The ID of a load balancer.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[str]]:
        """
        The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.
        """
        return pulumi.get(self, "path")

