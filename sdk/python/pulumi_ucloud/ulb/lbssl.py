# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LBSslArgs', 'LBSsl']

@pulumi.input_type
class LBSslArgs:
    def __init__(__self__, *,
                 private_key: pulumi.Input[str],
                 user_cert: pulumi.Input[str],
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LBSsl resource.
        :param pulumi.Input[str] private_key: The content of the private key about ssl certificate.
        :param pulumi.Input[str] user_cert: The content of the user certificate about ssl certificate.
        :param pulumi.Input[str] ca_cert: The content of the CA certificate about ssl certificate.
        """
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "user_cert", user_cert)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        """
        The content of the private key about ssl certificate.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="userCert")
    def user_cert(self) -> pulumi.Input[str]:
        """
        The content of the user certificate about ssl certificate.
        """
        return pulumi.get(self, "user_cert")

    @user_cert.setter
    def user_cert(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_cert", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the CA certificate about ssl certificate.
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _LBSslState:
    def __init__(__self__, *,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 user_cert: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LBSsl resources.
        :param pulumi.Input[str] ca_cert: The content of the CA certificate about ssl certificate.
        :param pulumi.Input[str] create_time: The time of creation for lb ssl, formatted in RFC3339 time string.
        :param pulumi.Input[str] private_key: The content of the private key about ssl certificate.
        :param pulumi.Input[str] user_cert: The content of the user certificate about ssl certificate.
        """
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if user_cert is not None:
            pulumi.set(__self__, "user_cert", user_cert)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the CA certificate about ssl certificate.
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time of creation for lb ssl, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the private key about ssl certificate.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="userCert")
    def user_cert(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the user certificate about ssl certificate.
        """
        return pulumi.get(self, "user_cert")

    @user_cert.setter
    def user_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_cert", value)


class LBSsl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 user_cert: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Load Balancer SSL certificate resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        default = ucloud.ulb.LBSsl("default",
            private_key=(lambda path: open(path).read())("private.key"),
            user_cert=(lambda path: open(path).read())("user.crt"),
            ca_cert=(lambda path: open(path).read())("ca.crt"))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ca_cert: The content of the CA certificate about ssl certificate.
        :param pulumi.Input[str] private_key: The content of the private key about ssl certificate.
        :param pulumi.Input[str] user_cert: The content of the user certificate about ssl certificate.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LBSslArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Load Balancer SSL certificate resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        default = ucloud.ulb.LBSsl("default",
            private_key=(lambda path: open(path).read())("private.key"),
            user_cert=(lambda path: open(path).read())("user.crt"),
            ca_cert=(lambda path: open(path).read())("ca.crt"))
        ```

        :param str resource_name: The name of the resource.
        :param LBSslArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LBSslArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 user_cert: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LBSslArgs.__new__(LBSslArgs)

            __props__.__dict__["ca_cert"] = ca_cert
            __props__.__dict__["name"] = name
            if private_key is None and not opts.urn:
                raise TypeError("Missing required property 'private_key'")
            __props__.__dict__["private_key"] = private_key
            if user_cert is None and not opts.urn:
                raise TypeError("Missing required property 'user_cert'")
            __props__.__dict__["user_cert"] = user_cert
            __props__.__dict__["create_time"] = None
        super(LBSsl, __self__).__init__(
            'ucloud:ulb/lBSsl:LBSsl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ca_cert: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            user_cert: Optional[pulumi.Input[str]] = None) -> 'LBSsl':
        """
        Get an existing LBSsl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ca_cert: The content of the CA certificate about ssl certificate.
        :param pulumi.Input[str] create_time: The time of creation for lb ssl, formatted in RFC3339 time string.
        :param pulumi.Input[str] private_key: The content of the private key about ssl certificate.
        :param pulumi.Input[str] user_cert: The content of the user certificate about ssl certificate.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LBSslState.__new__(_LBSslState)

        __props__.__dict__["ca_cert"] = ca_cert
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["name"] = name
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["user_cert"] = user_cert
        return LBSsl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> pulumi.Output[Optional[str]]:
        """
        The content of the CA certificate about ssl certificate.
        """
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time of creation for lb ssl, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[str]:
        """
        The content of the private key about ssl certificate.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="userCert")
    def user_cert(self) -> pulumi.Output[str]:
        """
        The content of the user certificate about ssl certificate.
        """
        return pulumi.get(self, "user_cert")

