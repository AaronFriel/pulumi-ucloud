# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LBSslAttachmentArgs', 'LBSslAttachment']

@pulumi.input_type
class LBSslAttachmentArgs:
    def __init__(__self__, *,
                 listener_id: pulumi.Input[str],
                 load_balancer_id: pulumi.Input[str],
                 ssl_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a LBSslAttachment resource.
        :param pulumi.Input[str] listener_id: The ID of listener servers.
        :param pulumi.Input[str] ssl_id: The ID of SSL certificate.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "ssl_id", ssl_id)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Input[str]:
        """
        The ID of listener servers.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> pulumi.Input[str]:
        """
        The ID of SSL certificate.
        """
        return pulumi.get(self, "ssl_id")

    @ssl_id.setter
    def ssl_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_id", value)


@pulumi.input_type
class _LBSslAttachmentState:
    def __init__(__self__, *,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LBSslAttachment resources.
        :param pulumi.Input[str] listener_id: The ID of listener servers.
        :param pulumi.Input[str] ssl_id: The ID of SSL certificate.
        """
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if ssl_id is not None:
            pulumi.set(__self__, "ssl_id", ssl_id)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of listener servers.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of SSL certificate.
        """
        return pulumi.get(self, "ssl_id")

    @ssl_id.setter
    def ssl_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_id", value)


class LBSslAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Load Balancer SSL attachment resource for attaching SSL certificate to Load Balancer Listener.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        foo_lb = ucloud.ulb.LB("fooLB", tag="tf-example")
        foo_lb_listener = ucloud.ulb.LBListener("fooLBListener",
            load_balancer_id=foo_lb.id,
            protocol="https")
        foo_lbssl = ucloud.ulb.LBSsl("fooLBSsl",
            private_key=(lambda path: open(path).read())("private.key"),
            user_cert=(lambda path: open(path).read())("user.crt"),
            ca_cert=(lambda path: open(path).read())("ca.crt"))
        foo_lbssl_attachment = ucloud.ulb.LBSslAttachment("fooLBSslAttachment",
            load_balancer_id=foo_lb.id,
            listener_id=foo_lb_listener.id,
            ssl_id=foo_lbssl.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] listener_id: The ID of listener servers.
        :param pulumi.Input[str] ssl_id: The ID of SSL certificate.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LBSslAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Load Balancer SSL attachment resource for attaching SSL certificate to Load Balancer Listener.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        foo_lb = ucloud.ulb.LB("fooLB", tag="tf-example")
        foo_lb_listener = ucloud.ulb.LBListener("fooLBListener",
            load_balancer_id=foo_lb.id,
            protocol="https")
        foo_lbssl = ucloud.ulb.LBSsl("fooLBSsl",
            private_key=(lambda path: open(path).read())("private.key"),
            user_cert=(lambda path: open(path).read())("user.crt"),
            ca_cert=(lambda path: open(path).read())("ca.crt"))
        foo_lbssl_attachment = ucloud.ulb.LBSslAttachment("fooLBSslAttachment",
            load_balancer_id=foo_lb.id,
            listener_id=foo_lb_listener.id,
            ssl_id=foo_lbssl.id)
        ```

        :param str resource_name: The name of the resource.
        :param LBSslAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LBSslAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LBSslAttachmentArgs.__new__(LBSslAttachmentArgs)

            if listener_id is None and not opts.urn:
                raise TypeError("Missing required property 'listener_id'")
            __props__.__dict__["listener_id"] = listener_id
            if load_balancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_id'")
            __props__.__dict__["load_balancer_id"] = load_balancer_id
            if ssl_id is None and not opts.urn:
                raise TypeError("Missing required property 'ssl_id'")
            __props__.__dict__["ssl_id"] = ssl_id
        super(LBSslAttachment, __self__).__init__(
            'ucloud:ulb/lBSslAttachment:LBSslAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            listener_id: Optional[pulumi.Input[str]] = None,
            load_balancer_id: Optional[pulumi.Input[str]] = None,
            ssl_id: Optional[pulumi.Input[str]] = None) -> 'LBSslAttachment':
        """
        Get an existing LBSslAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] listener_id: The ID of listener servers.
        :param pulumi.Input[str] ssl_id: The ID of SSL certificate.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LBSslAttachmentState.__new__(_LBSslAttachmentState)

        __props__.__dict__["listener_id"] = listener_id
        __props__.__dict__["load_balancer_id"] = load_balancer_id
        __props__.__dict__["ssl_id"] = ssl_id
        return LBSslAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[str]:
        """
        The ID of listener servers.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> pulumi.Output[str]:
        """
        The ID of SSL certificate.
        """
        return pulumi.get(self, "ssl_id")

