# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LBAttachmentArgs', 'LBAttachment']

@pulumi.input_type
class LBAttachmentArgs:
    def __init__(__self__, *,
                 listener_id: pulumi.Input[str],
                 load_balancer_id: pulumi.Input[str],
                 resource_id: pulumi.Input[str],
                 port: Optional[pulumi.Input[int]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LBAttachment resource.
        :param pulumi.Input[str] listener_id: The ID of a listener server.
        :param pulumi.Input[str] load_balancer_id: The ID of a load balancer.
        :param pulumi.Input[str] resource_id: The ID of a backend server.
        :param pulumi.Input[int] port: The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.
        :param pulumi.Input[str] resource_type: , attribute `resource_type` is deprecated for optimizing parameters.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "resource_id", resource_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if resource_type is not None:
            warnings.warn("""attribute `resource_type` is deprecated for optimizing parameters""", DeprecationWarning)
            pulumi.log.warn("""resource_type is deprecated: attribute `resource_type` is deprecated for optimizing parameters""")
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Input[str]:
        """
        The ID of a listener server.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Input[str]:
        """
        The ID of a load balancer.
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        The ID of a backend server.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        , attribute `resource_type` is deprecated for optimizing parameters.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class _LBAttachmentState:
    def __init__(__self__, *,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LBAttachment resources.
        :param pulumi.Input[str] listener_id: The ID of a listener server.
        :param pulumi.Input[str] load_balancer_id: The ID of a load balancer.
        :param pulumi.Input[int] port: The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.
        :param pulumi.Input[str] private_ip: The private ip address for backend servers.
        :param pulumi.Input[str] resource_id: The ID of a backend server.
        :param pulumi.Input[str] resource_type: , attribute `resource_type` is deprecated for optimizing parameters.
        :param pulumi.Input[str] status: The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
        """
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            warnings.warn("""attribute `resource_type` is deprecated for optimizing parameters""", DeprecationWarning)
            pulumi.log.warn("""resource_type is deprecated: attribute `resource_type` is deprecated for optimizing parameters""")
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a listener server.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a load balancer.
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The private ip address for backend servers.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a backend server.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        , attribute `resource_type` is deprecated for optimizing parameters.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class LBAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Load Balancer Attachment resource for attaching Load Balancer to UHost Instance, etc.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        default_image = ucloud.uhost.get_image(availability_zone="cn-bj2-04",
            name_regex="^CentOS 6.5 64",
            image_type="base")
        # Create Load Balancer
        web_lb = ucloud.ulb.LB("webLB", tag="tf-example")
        # Create Load Balancer Listener with http protocol
        default_lb_listener = ucloud.ulb.LBListener("defaultLBListener",
            load_balancer_id=web_lb.id,
            protocol="http")
        # Create web server
        web_instance = ucloud.uhost.Instance("webInstance",
            instance_type="n-basic-2",
            availability_zone="cn-bj2-04",
            root_password="wA1234567",
            image_id=default_image.images[0].id,
            tag="tf-example")
        # Attach instances to Load Balancer
        example = ucloud.ulb.LBAttachment("example",
            load_balancer_id=web_lb.id,
            listener_id=default_lb_listener.id,
            resource_id=web_instance.id,
            port=80)
        ```

        ## Import

        LB Listener can be imported using the `id`, e.g.

        ```sh
         $ pulumi import ucloud:ulb/lBAttachment:LBAttachment example backend-abcdefg
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] listener_id: The ID of a listener server.
        :param pulumi.Input[str] load_balancer_id: The ID of a load balancer.
        :param pulumi.Input[int] port: The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.
        :param pulumi.Input[str] resource_id: The ID of a backend server.
        :param pulumi.Input[str] resource_type: , attribute `resource_type` is deprecated for optimizing parameters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LBAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Load Balancer Attachment resource for attaching Load Balancer to UHost Instance, etc.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        default_image = ucloud.uhost.get_image(availability_zone="cn-bj2-04",
            name_regex="^CentOS 6.5 64",
            image_type="base")
        # Create Load Balancer
        web_lb = ucloud.ulb.LB("webLB", tag="tf-example")
        # Create Load Balancer Listener with http protocol
        default_lb_listener = ucloud.ulb.LBListener("defaultLBListener",
            load_balancer_id=web_lb.id,
            protocol="http")
        # Create web server
        web_instance = ucloud.uhost.Instance("webInstance",
            instance_type="n-basic-2",
            availability_zone="cn-bj2-04",
            root_password="wA1234567",
            image_id=default_image.images[0].id,
            tag="tf-example")
        # Attach instances to Load Balancer
        example = ucloud.ulb.LBAttachment("example",
            load_balancer_id=web_lb.id,
            listener_id=default_lb_listener.id,
            resource_id=web_instance.id,
            port=80)
        ```

        ## Import

        LB Listener can be imported using the `id`, e.g.

        ```sh
         $ pulumi import ucloud:ulb/lBAttachment:LBAttachment example backend-abcdefg
        ```

        :param str resource_name: The name of the resource.
        :param LBAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LBAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LBAttachmentArgs.__new__(LBAttachmentArgs)

            if listener_id is None and not opts.urn:
                raise TypeError("Missing required property 'listener_id'")
            __props__.__dict__["listener_id"] = listener_id
            if load_balancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_id'")
            __props__.__dict__["load_balancer_id"] = load_balancer_id
            __props__.__dict__["port"] = port
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if resource_type is not None and not opts.urn:
                warnings.warn("""attribute `resource_type` is deprecated for optimizing parameters""", DeprecationWarning)
                pulumi.log.warn("""resource_type is deprecated: attribute `resource_type` is deprecated for optimizing parameters""")
            __props__.__dict__["resource_type"] = resource_type
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["status"] = None
        super(LBAttachment, __self__).__init__(
            'ucloud:ulb/lBAttachment:LBAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            listener_id: Optional[pulumi.Input[str]] = None,
            load_balancer_id: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            private_ip: Optional[pulumi.Input[str]] = None,
            resource_id: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'LBAttachment':
        """
        Get an existing LBAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] listener_id: The ID of a listener server.
        :param pulumi.Input[str] load_balancer_id: The ID of a load balancer.
        :param pulumi.Input[int] port: The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.
        :param pulumi.Input[str] private_ip: The private ip address for backend servers.
        :param pulumi.Input[str] resource_id: The ID of a backend server.
        :param pulumi.Input[str] resource_type: , attribute `resource_type` is deprecated for optimizing parameters.
        :param pulumi.Input[str] status: The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LBAttachmentState.__new__(_LBAttachmentState)

        __props__.__dict__["listener_id"] = listener_id
        __props__.__dict__["load_balancer_id"] = load_balancer_id
        __props__.__dict__["port"] = port
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        return LBAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[str]:
        """
        The ID of a listener server.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Output[str]:
        """
        The ID of a load balancer.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[int]]:
        """
        The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[str]:
        """
        The private ip address for backend servers.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        """
        The ID of a backend server.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        , attribute `resource_type` is deprecated for optimizing parameters.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.
        """
        return pulumi.get(self, "status")

