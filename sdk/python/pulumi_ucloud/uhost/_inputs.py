# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceDataDisksArgs',
    'InstanceDiskSetArgs',
    'InstanceIpSetArgs',
]

@pulumi.input_type
class InstanceDataDisksArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[int],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[int] size: The size of the cloud data disk, range 20-8000, measured in GB (GigaByte).
        :param pulumi.Input[str] type: The type of the cloud data disk. Possible values are: `cloud_normal` and `cloud_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        """
        The size of the cloud data disk, range 20-8000, measured in GB (GigaByte).
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the cloud data disk. Possible values are: `cloud_normal` and `cloud_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class InstanceDiskSetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 is_boot: Optional[pulumi.Input[bool]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of disk.
        :param pulumi.Input[bool] is_boot: Specifies whether boot disk or not.
        :param pulumi.Input[int] size: The size of the cloud data disk, range 20-8000, measured in GB (GigaByte).
        :param pulumi.Input[str] type: The type of the cloud data disk. Possible values are: `cloud_normal` and `cloud_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_boot is not None:
            pulumi.set(__self__, "is_boot", is_boot)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of disk.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isBoot")
    def is_boot(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether boot disk or not.
        """
        return pulumi.get(self, "is_boot")

    @is_boot.setter
    def is_boot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_boot", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the cloud data disk, range 20-8000, measured in GB (GigaByte).
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the cloud data disk. Possible values are: `cloud_normal` and `cloud_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class InstanceIpSetArgs:
    def __init__(__self__, *,
                 internet_type: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] internet_type: Type of Elastic IP routes. Possible values are: `International` as international BGP IP, `BGP` as china BGP IP and `Private` as private IP.
        :param pulumi.Input[str] ip: Elastic IP address.
        """
        if internet_type is not None:
            pulumi.set(__self__, "internet_type", internet_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="internetType")
    def internet_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Elastic IP routes. Possible values are: `International` as international BGP IP, `BGP` as china BGP IP and `Private` as private IP.
        """
        return pulumi.get(self, "internet_type")

    @internet_type.setter
    def internet_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_type", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Elastic IP address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


