# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class LookupImagesResult:
    """
    A collection of values returned by lookupImages.
    """
    def __init__(__self__, availability_zone=None, image_id=None, image_type=None, images=None, most_recent=None, name_regex=None, os_type=None, output_file=None, total_count=None, id=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        __self__.availability_zone = availability_zone
        """
        Availability zone where image is located.
        """
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        __self__.image_id = image_id
        if image_type and not isinstance(image_type, str):
            raise TypeError("Expected argument 'image_type' to be a str")
        __self__.image_type = image_type
        if images and not isinstance(images, list):
            raise TypeError("Expected argument 'images' to be a list")
        __self__.images = images
        """
        It is a nested type which documented below.
        """
        if most_recent and not isinstance(most_recent, bool):
            raise TypeError("Expected argument 'most_recent' to be a bool")
        __self__.most_recent = most_recent
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        __self__.name_regex = name_regex
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        __self__.os_type = os_type
        """
        The type of OS.
        """
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        __self__.total_count = total_count
        """
        Total number of images that satisfy the condition.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
class AwaitableLookupImagesResult(LookupImagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return LookupImagesResult(
            availability_zone=self.availability_zone,
            image_id=self.image_id,
            image_type=self.image_type,
            images=self.images,
            most_recent=self.most_recent,
            name_regex=self.name_regex,
            os_type=self.os_type,
            output_file=self.output_file,
            total_count=self.total_count,
            id=self.id)

def lookup_images(availability_zone=None,image_id=None,image_type=None,most_recent=None,name_regex=None,os_type=None,output_file=None,opts=None):
    """
    This data source providers a list of available image resources according to their availability zone, image ID and other fields.
    
    :param str availability_zone: Availability zone where images are located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
    :param str image_id: The ID of image.
    :param str image_type: The type of image. Possible values are: `base` as standard image, `business` as owned by market place, and `custom` as custom-image, all the image types will be retrieved by default.
    :param bool most_recent: If more than one result is returned, use the most recent image.
    :param str name_regex: A regex string to filter resulting images by name. (Such as: `^CentOS 7.[1-2] 64` means CentOS 7.1 of 64-bit operating system or CentOS 7.2 of 64-bit operating system, "^Ubuntu 16.04 64" means Ubuntu 16.04 of 64-bit operating system).
    :param str os_type: The type of OS. Possible values are: `linux` and `windows`, all the OS types will be retrieved by default.

    > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/d/images.html.markdown.
    """
    __args__ = dict()

    __args__['availabilityZone'] = availability_zone
    __args__['imageId'] = image_id
    __args__['imageType'] = image_type
    __args__['mostRecent'] = most_recent
    __args__['nameRegex'] = name_regex
    __args__['osType'] = os_type
    __args__['outputFile'] = output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('ucloud:uhost/lookupImages:lookupImages', __args__, opts=opts).value

    return AwaitableLookupImagesResult(
        availability_zone=__ret__.get('availabilityZone'),
        image_id=__ret__.get('imageId'),
        image_type=__ret__.get('imageType'),
        images=__ret__.get('images'),
        most_recent=__ret__.get('mostRecent'),
        name_regex=__ret__.get('nameRegex'),
        os_type=__ret__.get('osType'),
        output_file=__ret__.get('outputFile'),
        total_count=__ret__.get('totalCount'),
        id=__ret__.get('id'))
