# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceDataDisks',
    'InstanceDiskSet',
    'InstanceIpSet',
    'GetImageImageResult',
    'GetInstanceInstanceResult',
    'GetInstanceInstanceDiskSetResult',
    'GetInstanceInstanceIpSetResult',
]

@pulumi.output_type
class InstanceDataDisks(dict):
    def __init__(__self__, *,
                 size: int,
                 type: str):
        """
        :param int size: The size of the cloud data disk, range 20-8000, measured in GB (GigaByte).
        :param str type: The type of the cloud data disk. Possible values are: `cloud_normal` and `cloud_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of the cloud data disk, range 20-8000, measured in GB (GigaByte).
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the cloud data disk. Possible values are: `cloud_normal` and `cloud_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceDiskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isBoot":
            suggest = "is_boot"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceDiskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceDiskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceDiskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 is_boot: Optional[bool] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str id: The ID of disk.
        :param bool is_boot: Specifies whether boot disk or not.
        :param int size: The size of the cloud data disk, range 20-8000, measured in GB (GigaByte).
        :param str type: The type of the cloud data disk. Possible values are: `cloud_normal` and `cloud_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_boot is not None:
            pulumi.set(__self__, "is_boot", is_boot)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of disk.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBoot")
    def is_boot(self) -> Optional[bool]:
        """
        Specifies whether boot disk or not.
        """
        return pulumi.get(self, "is_boot")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The size of the cloud data disk, range 20-8000, measured in GB (GigaByte).
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the cloud data disk. Possible values are: `cloud_normal` and `cloud_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceIpSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internetType":
            suggest = "internet_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceIpSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceIpSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceIpSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internet_type: Optional[str] = None,
                 ip: Optional[str] = None):
        """
        :param str internet_type: Type of Elastic IP routes. Possible values are: `International` as international BGP IP, `BGP` as china BGP IP and `Private` as private IP.
        :param str ip: Elastic IP address.
        """
        if internet_type is not None:
            pulumi.set(__self__, "internet_type", internet_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="internetType")
    def internet_type(self) -> Optional[str]:
        """
        Type of Elastic IP routes. Possible values are: `International` as international BGP IP, `BGP` as china BGP IP and `Private` as private IP.
        """
        return pulumi.get(self, "internet_type")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        Elastic IP address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetImageImageResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 create_time: str,
                 description: str,
                 features: Sequence[str],
                 id: str,
                 name: str,
                 os_name: str,
                 os_type: str,
                 size: int,
                 status: str,
                 type: str):
        """
        :param str availability_zone: Availability zone where images are located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
        :param str create_time: The time of creation for image, formatted in RFC3339 time string.
        :param str description: The description of image if any.
        :param Sequence[str] features: To identify if any particular feature belongs to the instance, the value is `NetEnhnced` as I/O enhanced instance for now.
        :param str id: The ID of image.
        :param str name: The name of image.
        :param str os_name: The name of OS.
        :param str os_type: The type of OS. Possible values are: `linux` and `windows`, all the OS types will be retrieved by default.
        :param int size: The size of image.
        :param str status: The status of image. Possible values are `Available`, `Making` and `Unavailable`.
        :param str type: The type of image.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        Availability zone where images are located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time of creation for image, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of image if any.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def features(self) -> Sequence[str]:
        """
        To identify if any particular feature belongs to the instance, the value is `NetEnhnced` as I/O enhanced instance for now.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of image.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        The name of OS.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        The type of OS. Possible values are: `linux` and `windows`, all the OS types will be retrieved by default.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of image.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of image. Possible values are `Available`, `Making` and `Unavailable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of image.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceInstanceResult(dict):
    def __init__(__self__, *,
                 auto_renew: bool,
                 availability_zone: str,
                 charge_type: str,
                 cpu: int,
                 create_time: str,
                 disk_sets: Sequence['outputs.GetInstanceInstanceDiskSetResult'],
                 expire_time: str,
                 id: str,
                 instance_type: str,
                 ip_sets: Sequence['outputs.GetInstanceInstanceIpSetResult'],
                 memory: int,
                 name: str,
                 private_ip: str,
                 remark: str,
                 status: str,
                 subnet_id: str,
                 tag: str,
                 vpc_id: str):
        """
        :param bool auto_renew: Whether to renew an instance automatically or not.
        :param str availability_zone: Availability zone where instances are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        :param str charge_type: The charge type of instance, possible values are: `year`, `month` and `dynamic` as pay by hour.
        :param int cpu: The number of cores of virtual CPU, measureed in core.
        :param str create_time: The time of creation for instance, formatted in RFC3339 time string.
        :param Sequence['GetInstanceInstanceDiskSetArgs'] disk_sets: It is a nested type which documented below.
        :param str expire_time: The expiration time for instance, formatted in RFC3339 time string.
        :param str id: The ID of disk.
        :param str instance_type: The type of instance.
        :param Sequence['GetInstanceInstanceIpSetArgs'] ip_sets: It is a nested type which documented below.
        :param int memory: The size of memory, measured in MB (Megabyte).
        :param str name: The name of the instance.
        :param str private_ip: The private IP address assigned to the instance.
        :param str remark: The remarks of instance.
        :param str status: Instance current status. Possible values are `Initializing`, `Starting`, `Running`, `Stopping`, `Stopped`, `Install Fail` and `Rebooting`.
        :param str subnet_id: The ID of subnet linked to the instance.
        :param str tag: A tag assigned to instance.
        :param str vpc_id: The ID of VPC linked to the instance.
        """
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "disk_sets", disk_sets)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "ip_sets", ip_sets)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> bool:
        """
        Whether to renew an instance automatically or not.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        Availability zone where instances are located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of instance, possible values are: `year`, `month` and `dynamic` as pay by hour.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        The number of cores of virtual CPU, measureed in core.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time of creation for instance, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="diskSets")
    def disk_sets(self) -> Sequence['outputs.GetInstanceInstanceDiskSetResult']:
        """
        It is a nested type which documented below.
        """
        return pulumi.get(self, "disk_sets")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The expiration time for instance, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of disk.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The type of instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Sequence['outputs.GetInstanceInstanceIpSetResult']:
        """
        It is a nested type which documented below.
        """
        return pulumi.get(self, "ip_sets")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The size of memory, measured in MB (Megabyte).
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        The private IP address assigned to the instance.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        The remarks of instance.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Instance current status. Possible values are `Initializing`, `Starting`, `Running`, `Stopping`, `Stopped`, `Install Fail` and `Rebooting`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of subnet linked to the instance.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        A tag assigned to instance.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of VPC linked to the instance.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstanceInstanceDiskSetResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_boot: bool,
                 size: int,
                 type: str):
        """
        :param str id: The ID of disk.
        :param bool is_boot: Specifies whether boot disk or not.
        :param int size: The size of disk, measured in GB (Gigabyte).
        :param str type: The type of disk.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_boot", is_boot)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of disk.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBoot")
    def is_boot(self) -> bool:
        """
        Specifies whether boot disk or not.
        """
        return pulumi.get(self, "is_boot")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of disk, measured in GB (Gigabyte).
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of disk.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceInstanceIpSetResult(dict):
    def __init__(__self__, *,
                 internet_type: str,
                 ip: str):
        """
        :param str internet_type: Type of Elastic IP routes.
        :param str ip: Elastic IP address.
        """
        pulumi.set(__self__, "internet_type", internet_type)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="internetType")
    def internet_type(self) -> str:
        """
        Type of Elastic IP routes.
        """
        return pulumi.get(self, "internet_type")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Elastic IP address.
        """
        return pulumi.get(self, "ip")


