# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NATGatewayArgs', 'NATGateway']

@pulumi.input_type
class NATGatewayArgs:
    def __init__(__self__, *,
                 eip_id: pulumi.Input[str],
                 enable_white_list: pulumi.Input[bool],
                 security_group: pulumi.Input[str],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 vpc_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a NATGateway resource.
        :param pulumi.Input[str] eip_id: The ID of eip associate to the Nat Gateway.
        :param pulumi.Input[bool] enable_white_list: The boolean value to Controls whether or not start the whitelist mode.
        :param pulumi.Input[str] security_group: The ID of the associated security group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The list of subnet ID under the VPC.
        :param pulumi.Input[str] vpc_id: The ID of VPC linked to the Nat Gateway.
        :param pulumi.Input[str] remark: The remarks of the Nat Gateway. (Default: `""`).
        :param pulumi.Input[str] tag: A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
               * ``
        :param pulumi.Input[Sequence[pulumi.Input[str]]] white_lists: The white list of instance under the Nat Gateway.
        """
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "enable_white_list", enable_white_list)
        pulumi.set(__self__, "security_group", security_group)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if white_lists is not None:
            pulumi.set(__self__, "white_lists", white_lists)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Input[str]:
        """
        The ID of eip associate to the Nat Gateway.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="enableWhiteList")
    def enable_white_list(self) -> pulumi.Input[bool]:
        """
        The boolean value to Controls whether or not start the whitelist mode.
        """
        return pulumi.get(self, "enable_white_list")

    @enable_white_list.setter
    def enable_white_list(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_white_list", value)

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> pulumi.Input[str]:
        """
        The ID of the associated security group.
        """
        return pulumi.get(self, "security_group")

    @security_group.setter
    def security_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_group", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of subnet ID under the VPC.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The ID of VPC linked to the Nat Gateway.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remarks of the Nat Gateway. (Default: `""`).
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        * ``
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="whiteLists")
    def white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The white list of instance under the Nat Gateway.
        """
        return pulumi.get(self, "white_lists")

    @white_lists.setter
    def white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "white_lists", value)


@pulumi.input_type
class _NATGatewayState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 enable_white_list: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 security_group: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering NATGateway resources.
        :param pulumi.Input[str] create_time: The time of creation of Nat Gateway, formatted in RFC3339 time string.
        :param pulumi.Input[str] eip_id: The ID of eip associate to the Nat Gateway.
        :param pulumi.Input[bool] enable_white_list: The boolean value to Controls whether or not start the whitelist mode.
        :param pulumi.Input[str] remark: The remarks of the Nat Gateway. (Default: `""`).
        :param pulumi.Input[str] security_group: The ID of the associated security group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The list of subnet ID under the VPC.
        :param pulumi.Input[str] tag: A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
               * ``
        :param pulumi.Input[str] vpc_id: The ID of VPC linked to the Nat Gateway.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] white_lists: The white list of instance under the Nat Gateway.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if enable_white_list is not None:
            pulumi.set(__self__, "enable_white_list", enable_white_list)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if security_group is not None:
            pulumi.set(__self__, "security_group", security_group)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if white_lists is not None:
            pulumi.set(__self__, "white_lists", white_lists)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time of creation of Nat Gateway, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of eip associate to the Nat Gateway.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="enableWhiteList")
    def enable_white_list(self) -> Optional[pulumi.Input[bool]]:
        """
        The boolean value to Controls whether or not start the whitelist mode.
        """
        return pulumi.get(self, "enable_white_list")

    @enable_white_list.setter
    def enable_white_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_white_list", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remarks of the Nat Gateway. (Default: `""`).
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the associated security group.
        """
        return pulumi.get(self, "security_group")

    @security_group.setter
    def security_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of subnet ID under the VPC.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        * ``
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of VPC linked to the Nat Gateway.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="whiteLists")
    def white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The white list of instance under the Nat Gateway.
        """
        return pulumi.get(self, "white_lists")

    @white_lists.setter
    def white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "white_lists", value)


class NATGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 enable_white_list: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 security_group: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a Nat Gateway resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        foo_vpc = ucloud.vpc.VPC("fooVPC",
            tag="tf-acc",
            cidr_blocks=["192.168.0.0/16"])
        foo_subnet = ucloud.vpc.Subnet("fooSubnet",
            tag="tf-acc",
            cidr_block="192.168.1.0/24",
            vpc_id=foo_vpc.id)
        foo_eip = ucloud.unet.EIP("fooEIP",
            bandwidth=1,
            internet_type="bgp",
            charge_mode="bandwidth",
            tag="tf-acc")
        foo_security_group = ucloud.unet.get_security_group(type="recommend_web")
        foo_nat_gateway = ucloud.vpc.NATGateway("fooNATGateway",
            vpc_id=foo_vpc.id,
            subnet_ids=[foo_subnet.id],
            eip_id=foo_eip.id,
            tag="tf-acc",
            security_group=foo_security_group.security_groups[0].id)
        ```

        ## Import

        Nat Gateway can be imported using the `id`, e.g.

        ```sh
         $ pulumi import ucloud:vpc/nATGateway:NATGateway example natgw-abc123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] eip_id: The ID of eip associate to the Nat Gateway.
        :param pulumi.Input[bool] enable_white_list: The boolean value to Controls whether or not start the whitelist mode.
        :param pulumi.Input[str] remark: The remarks of the Nat Gateway. (Default: `""`).
        :param pulumi.Input[str] security_group: The ID of the associated security group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The list of subnet ID under the VPC.
        :param pulumi.Input[str] tag: A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
               * ``
        :param pulumi.Input[str] vpc_id: The ID of VPC linked to the Nat Gateway.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] white_lists: The white list of instance under the Nat Gateway.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NATGatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Nat Gateway resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        foo_vpc = ucloud.vpc.VPC("fooVPC",
            tag="tf-acc",
            cidr_blocks=["192.168.0.0/16"])
        foo_subnet = ucloud.vpc.Subnet("fooSubnet",
            tag="tf-acc",
            cidr_block="192.168.1.0/24",
            vpc_id=foo_vpc.id)
        foo_eip = ucloud.unet.EIP("fooEIP",
            bandwidth=1,
            internet_type="bgp",
            charge_mode="bandwidth",
            tag="tf-acc")
        foo_security_group = ucloud.unet.get_security_group(type="recommend_web")
        foo_nat_gateway = ucloud.vpc.NATGateway("fooNATGateway",
            vpc_id=foo_vpc.id,
            subnet_ids=[foo_subnet.id],
            eip_id=foo_eip.id,
            tag="tf-acc",
            security_group=foo_security_group.security_groups[0].id)
        ```

        ## Import

        Nat Gateway can be imported using the `id`, e.g.

        ```sh
         $ pulumi import ucloud:vpc/nATGateway:NATGateway example natgw-abc123456
        ```

        :param str resource_name: The name of the resource.
        :param NATGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NATGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 enable_white_list: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 security_group: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NATGatewayArgs.__new__(NATGatewayArgs)

            if eip_id is None and not opts.urn:
                raise TypeError("Missing required property 'eip_id'")
            __props__.__dict__["eip_id"] = eip_id
            if enable_white_list is None and not opts.urn:
                raise TypeError("Missing required property 'enable_white_list'")
            __props__.__dict__["enable_white_list"] = enable_white_list
            __props__.__dict__["name"] = name
            __props__.__dict__["remark"] = remark
            if security_group is None and not opts.urn:
                raise TypeError("Missing required property 'security_group'")
            __props__.__dict__["security_group"] = security_group
            if subnet_ids is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_ids'")
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["tag"] = tag
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["white_lists"] = white_lists
            __props__.__dict__["create_time"] = None
        super(NATGateway, __self__).__init__(
            'ucloud:vpc/nATGateway:NATGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            eip_id: Optional[pulumi.Input[str]] = None,
            enable_white_list: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            security_group: Optional[pulumi.Input[str]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tag: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'NATGateway':
        """
        Get an existing NATGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: The time of creation of Nat Gateway, formatted in RFC3339 time string.
        :param pulumi.Input[str] eip_id: The ID of eip associate to the Nat Gateway.
        :param pulumi.Input[bool] enable_white_list: The boolean value to Controls whether or not start the whitelist mode.
        :param pulumi.Input[str] remark: The remarks of the Nat Gateway. (Default: `""`).
        :param pulumi.Input[str] security_group: The ID of the associated security group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The list of subnet ID under the VPC.
        :param pulumi.Input[str] tag: A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
               * ``
        :param pulumi.Input[str] vpc_id: The ID of VPC linked to the Nat Gateway.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] white_lists: The white list of instance under the Nat Gateway.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NATGatewayState.__new__(_NATGatewayState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["enable_white_list"] = enable_white_list
        __props__.__dict__["name"] = name
        __props__.__dict__["remark"] = remark
        __props__.__dict__["security_group"] = security_group
        __props__.__dict__["subnet_ids"] = subnet_ids
        __props__.__dict__["tag"] = tag
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["white_lists"] = white_lists
        return NATGateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time of creation of Nat Gateway, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[str]:
        """
        The ID of eip associate to the Nat Gateway.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="enableWhiteList")
    def enable_white_list(self) -> pulumi.Output[bool]:
        """
        The boolean value to Controls whether or not start the whitelist mode.
        """
        return pulumi.get(self, "enable_white_list")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[str]:
        """
        The remarks of the Nat Gateway. (Default: `""`).
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> pulumi.Output[str]:
        """
        The ID of the associated security group.
        """
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of subnet ID under the VPC.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Output[Optional[str]]:
        """
        A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        * ``
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The ID of VPC linked to the Nat Gateway.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="whiteLists")
    def white_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The white list of instance under the Nat Gateway.
        """
        return pulumi.get(self, "white_lists")

