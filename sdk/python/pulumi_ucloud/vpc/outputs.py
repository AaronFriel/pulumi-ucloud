# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'VPCNetworkInfo',
    'GetNATGatewayNatGatewayResult',
    'GetNATGatewayNatGatewayIpSetResult',
    'GetSubnetSubnetResult',
    'GetVPCVpcResult',
]

@pulumi.output_type
class VPCNetworkInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlock":
            suggest = "cidr_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VPCNetworkInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VPCNetworkInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VPCNetworkInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_block: Optional[str] = None):
        """
        :param str cidr_block: The CIDR block of the VPC.
        """
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        The CIDR block of the VPC.
        """
        return pulumi.get(self, "cidr_block")


@pulumi.output_type
class GetNATGatewayNatGatewayResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 id: str,
                 ip_sets: Sequence['outputs.GetNATGatewayNatGatewayIpSetResult'],
                 name: str,
                 remark: str,
                 security_group: str,
                 subnet_ids: Sequence[str],
                 tag: str,
                 vpc_id: str):
        """
        :param str create_time: The time of creation for Nat Gateway, formatted in RFC3339 time string.
        :param str id: The ID of Nat Gateway.
        :param Sequence['GetNATGatewayNatGatewayIpSetArgs'] ip_sets: It is a nested type which documented below.
        :param str name: The name of the Nat Gateway.
        :param str remark: The remarks of Nat Gateway.
        :param Sequence[str] subnet_ids: The list of subnet ID under the VPC.
               * `security_group` -The ID of the associated security group.
        :param str tag: A tag assigned to the Nat Gateway.
        :param str vpc_id: The ID of VPC linked to the Nat Gateway.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_sets", ip_sets)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "security_group", security_group)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time of creation for Nat Gateway, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Nat Gateway.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Sequence['outputs.GetNATGatewayNatGatewayIpSetResult']:
        """
        It is a nested type which documented below.
        """
        return pulumi.get(self, "ip_sets")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Nat Gateway.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        The remarks of Nat Gateway.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> str:
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The list of subnet ID under the VPC.
        * `security_group` -The ID of the associated security group.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        A tag assigned to the Nat Gateway.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of VPC linked to the Nat Gateway.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetNATGatewayNatGatewayIpSetResult(dict):
    def __init__(__self__, *,
                 internet_type: str,
                 ip: str):
        """
        :param str internet_type: Type of Elastic IP routes.
        :param str ip: Elastic IP address.
        """
        pulumi.set(__self__, "internet_type", internet_type)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="internetType")
    def internet_type(self) -> str:
        """
        Type of Elastic IP routes.
        """
        return pulumi.get(self, "internet_type")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Elastic IP address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetSubnetSubnetResult(dict):
    def __init__(__self__, *,
                 cidr_block: str,
                 create_time: str,
                 id: str,
                 name: str,
                 remark: str,
                 tag: str):
        """
        :param str cidr_block: The cidr block of the desired Subnet.
        :param str create_time: The time of creation of Subnet, formatted in RFC3339 time string.
        :param str id: The ID of Subnet.
        :param str name: The name of Subnet.
        :param str remark: The remark of the Subnet.
        :param str tag: A tag assigned to Subnet.
        """
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        The cidr block of the desired Subnet.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time of creation of Subnet, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Subnet.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of Subnet.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        The remark of the Subnet.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        A tag assigned to Subnet.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetVPCVpcResult(dict):
    def __init__(__self__, *,
                 cidr_blocks: Sequence[str],
                 create_time: str,
                 id: str,
                 name: str,
                 tag: str,
                 update_time: str):
        """
        :param Sequence[str] cidr_blocks: The CIDR blocks of VPC.
        :param str create_time: The time of creation for VPC, formatted in RFC3339 time string.
        :param str id: The ID of VPC.
        :param str name: The name of VPC.
        :param str tag: A tag assigned to VPC.
        :param str update_time: The time whenever there is a change made to VPC, formatted in RFC3339 time string.
        """
        pulumi.set(__self__, "cidr_blocks", cidr_blocks)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Sequence[str]:
        """
        The CIDR blocks of VPC.
        """
        return pulumi.get(self, "cidr_blocks")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time of creation for VPC, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of VPC.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of VPC.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        A tag assigned to VPC.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The time whenever there is a change made to VPC, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "update_time")


