# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['VPCPeeringConnectionArgs', 'VPCPeeringConnection']

@pulumi.input_type
class VPCPeeringConnectionArgs:
    def __init__(__self__, *,
                 peer_vpc_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 peer_project_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VPCPeeringConnection resource.
        :param pulumi.Input[str] peer_vpc_id: The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.
        :param pulumi.Input[str] vpc_id: The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.
        :param pulumi.Input[str] peer_project_id: The ID of accepter project of the specific VPC Peering Connection to retrieve.
        """
        pulumi.set(__self__, "peer_vpc_id", peer_vpc_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if peer_project_id is not None:
            pulumi.set(__self__, "peer_project_id", peer_project_id)

    @property
    @pulumi.getter(name="peerVpcId")
    def peer_vpc_id(self) -> pulumi.Input[str]:
        """
        The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.
        """
        return pulumi.get(self, "peer_vpc_id")

    @peer_vpc_id.setter
    def peer_vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_vpc_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="peerProjectId")
    def peer_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of accepter project of the specific VPC Peering Connection to retrieve.
        """
        return pulumi.get(self, "peer_project_id")

    @peer_project_id.setter
    def peer_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_project_id", value)


@pulumi.input_type
class _VPCPeeringConnectionState:
    def __init__(__self__, *,
                 peer_project_id: Optional[pulumi.Input[str]] = None,
                 peer_vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VPCPeeringConnection resources.
        :param pulumi.Input[str] peer_project_id: The ID of accepter project of the specific VPC Peering Connection to retrieve.
        :param pulumi.Input[str] peer_vpc_id: The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.
        :param pulumi.Input[str] vpc_id: The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.
        """
        if peer_project_id is not None:
            pulumi.set(__self__, "peer_project_id", peer_project_id)
        if peer_vpc_id is not None:
            pulumi.set(__self__, "peer_vpc_id", peer_vpc_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="peerProjectId")
    def peer_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of accepter project of the specific VPC Peering Connection to retrieve.
        """
        return pulumi.get(self, "peer_project_id")

    @peer_project_id.setter
    def peer_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_project_id", value)

    @property
    @pulumi.getter(name="peerVpcId")
    def peer_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.
        """
        return pulumi.get(self, "peer_vpc_id")

    @peer_vpc_id.setter
    def peer_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_vpc_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class VPCPeeringConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 peer_project_id: Optional[pulumi.Input[str]] = None,
                 peer_vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an VPC Peering Connection for establishing a connection between multiple VPC.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        foo = ucloud.vpc.VPC("foo",
            tag="tf-example",
            cidr_blocks=["192.168.0.0/16"])
        bar = ucloud.vpc.VPC("bar",
            tag="tf-example",
            cidr_blocks=["10.10.0.0/16"])
        connection = ucloud.vpc.VPCPeeringConnection("connection",
            vpc_id=foo.id,
            peer_vpc_id=bar.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] peer_project_id: The ID of accepter project of the specific VPC Peering Connection to retrieve.
        :param pulumi.Input[str] peer_vpc_id: The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.
        :param pulumi.Input[str] vpc_id: The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VPCPeeringConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an VPC Peering Connection for establishing a connection between multiple VPC.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        foo = ucloud.vpc.VPC("foo",
            tag="tf-example",
            cidr_blocks=["192.168.0.0/16"])
        bar = ucloud.vpc.VPC("bar",
            tag="tf-example",
            cidr_blocks=["10.10.0.0/16"])
        connection = ucloud.vpc.VPCPeeringConnection("connection",
            vpc_id=foo.id,
            peer_vpc_id=bar.id)
        ```

        :param str resource_name: The name of the resource.
        :param VPCPeeringConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VPCPeeringConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 peer_project_id: Optional[pulumi.Input[str]] = None,
                 peer_vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VPCPeeringConnectionArgs.__new__(VPCPeeringConnectionArgs)

            __props__.__dict__["peer_project_id"] = peer_project_id
            if peer_vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'peer_vpc_id'")
            __props__.__dict__["peer_vpc_id"] = peer_vpc_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
        super(VPCPeeringConnection, __self__).__init__(
            'ucloud:vpc/vPCPeeringConnection:VPCPeeringConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            peer_project_id: Optional[pulumi.Input[str]] = None,
            peer_vpc_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'VPCPeeringConnection':
        """
        Get an existing VPCPeeringConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] peer_project_id: The ID of accepter project of the specific VPC Peering Connection to retrieve.
        :param pulumi.Input[str] peer_vpc_id: The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.
        :param pulumi.Input[str] vpc_id: The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VPCPeeringConnectionState.__new__(_VPCPeeringConnectionState)

        __props__.__dict__["peer_project_id"] = peer_project_id
        __props__.__dict__["peer_vpc_id"] = peer_vpc_id
        __props__.__dict__["vpc_id"] = vpc_id
        return VPCPeeringConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="peerProjectId")
    def peer_project_id(self) -> pulumi.Output[str]:
        """
        The ID of accepter project of the specific VPC Peering Connection to retrieve.
        """
        return pulumi.get(self, "peer_project_id")

    @property
    @pulumi.getter(name="peerVpcId")
    def peer_vpc_id(self) -> pulumi.Output[str]:
        """
        The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.
        """
        return pulumi.get(self, "peer_vpc_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.
        """
        return pulumi.get(self, "vpc_id")

