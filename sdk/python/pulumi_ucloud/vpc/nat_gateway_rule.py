# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NATGatewayRuleArgs', 'NATGatewayRule']

@pulumi.input_type
class NATGatewayRuleArgs:
    def __init__(__self__, *,
                 dst_ip: pulumi.Input[str],
                 dst_port_range: pulumi.Input[str],
                 nat_gateway_id: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 src_eip_id: pulumi.Input[str],
                 src_port_range: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NATGatewayRule resource.
        :param pulumi.Input[str] dst_ip: The private ip of instance bound to the jNAT gateway.
        :param pulumi.Input[str] dst_port_range: The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
        :param pulumi.Input[str] nat_gateway_id: The ID of the Nat Gateway.
        :param pulumi.Input[str] protocol: The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
        :param pulumi.Input[str] src_eip_id: The ID of eip associate to the Nat Gateway.
        :param pulumi.Input[str] src_port_range: The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        pulumi.set(__self__, "dst_ip", dst_ip)
        pulumi.set(__self__, "dst_port_range", dst_port_range)
        pulumi.set(__self__, "nat_gateway_id", nat_gateway_id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "src_eip_id", src_eip_id)
        pulumi.set(__self__, "src_port_range", src_port_range)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> pulumi.Input[str]:
        """
        The private ip of instance bound to the jNAT gateway.
        """
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> pulumi.Input[str]:
        """
        The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        return pulumi.get(self, "dst_port_range")

    @dst_port_range.setter
    def dst_port_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_port_range", value)

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> pulumi.Input[str]:
        """
        The ID of the Nat Gateway.
        """
        return pulumi.get(self, "nat_gateway_id")

    @nat_gateway_id.setter
    def nat_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nat_gateway_id", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcEipId")
    def src_eip_id(self) -> pulumi.Input[str]:
        """
        The ID of eip associate to the Nat Gateway.
        """
        return pulumi.get(self, "src_eip_id")

    @src_eip_id.setter
    def src_eip_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_eip_id", value)

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> pulumi.Input[str]:
        """
        The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        return pulumi.get(self, "src_port_range")

    @src_port_range.setter
    def src_port_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_port_range", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _NATGatewayRuleState:
    def __init__(__self__, *,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 dst_port_range: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_gateway_id: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 src_eip_id: Optional[pulumi.Input[str]] = None,
                 src_port_range: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NATGatewayRule resources.
        :param pulumi.Input[str] dst_ip: The private ip of instance bound to the jNAT gateway.
        :param pulumi.Input[str] dst_port_range: The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
        :param pulumi.Input[str] nat_gateway_id: The ID of the Nat Gateway.
        :param pulumi.Input[str] protocol: The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
        :param pulumi.Input[str] src_eip_id: The ID of eip associate to the Nat Gateway.
        :param pulumi.Input[str] src_port_range: The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if dst_port_range is not None:
            pulumi.set(__self__, "dst_port_range", dst_port_range)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat_gateway_id is not None:
            pulumi.set(__self__, "nat_gateway_id", nat_gateway_id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_eip_id is not None:
            pulumi.set(__self__, "src_eip_id", src_eip_id)
        if src_port_range is not None:
            pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The private ip of instance bound to the jNAT gateway.
        """
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        return pulumi.get(self, "dst_port_range")

    @dst_port_range.setter
    def dst_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port_range", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Nat Gateway.
        """
        return pulumi.get(self, "nat_gateway_id")

    @nat_gateway_id.setter
    def nat_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_gateway_id", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcEipId")
    def src_eip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of eip associate to the Nat Gateway.
        """
        return pulumi.get(self, "src_eip_id")

    @src_eip_id.setter
    def src_eip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_eip_id", value)

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        return pulumi.get(self, "src_port_range")

    @src_port_range.setter
    def src_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port_range", value)


class NATGatewayRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 dst_port_range: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_gateway_id: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 src_eip_id: Optional[pulumi.Input[str]] = None,
                 src_port_range: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Nat Gateway resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        foo_vpc = ucloud.vpc.VPC("fooVPC",
            tag="tf-acc",
            cidr_blocks=["192.168.0.0/16"])
        foo_subnet = ucloud.vpc.Subnet("fooSubnet",
            tag="tf-acc",
            cidr_block="192.168.1.0/24",
            vpc_id=foo_vpc.id)
        foo_eip = ucloud.unet.EIP("fooEIP",
            bandwidth=1,
            internet_type="bgp",
            charge_mode="bandwidth",
            tag="tf-acc")
        foo_security_group = ucloud.unet.get_security_group(type="recommend_web")
        default_zone = ucloud.uaccount.get_zone()
        default_image = ucloud.uhost.get_image(availability_zone=default_zone.zones[0].id,
            name_regex="^CentOS 7.[1-2] 64",
            image_type="base")
        foo_instance = ucloud.uhost.Instance("fooInstance",
            vpc_id=foo_vpc.id,
            subnet_id=foo_subnet.id,
            availability_zone=default_zone.zones[0].id,
            image_id=default_image.images[0].id,
            instance_type="n-basic-1",
            charge_type="dynamic",
            tag="tf-acc")
        foo_nat_gateway = ucloud.vpc.NATGateway("fooNATGateway",
            vpc_id=foo_vpc.id,
            subnet_ids=[foo_subnet.id],
            eip_id=foo_eip.id,
            tag="tf-acc",
            enable_white_list=False,
            security_group=foo_security_group.security_groups[0].id)
        foo_nat_gateway_rule = ucloud.vpc.NATGatewayRule("fooNATGatewayRule",
            nat_gateway_id=foo_nat_gateway.id,
            protocol="tcp",
            src_eip_id=foo_eip.id,
            src_port_range="88",
            dst_ip=foo_instance.private_ip,
            dst_port_range="80")
        bar = ucloud.vpc.NATGatewayRule("bar",
            nat_gateway_id=foo_nat_gateway.id,
            protocol="tcp",
            src_eip_id=foo_eip.id,
            src_port_range="90-100",
            dst_ip=foo_instance.private_ip,
            dst_port_range="90-100")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dst_ip: The private ip of instance bound to the jNAT gateway.
        :param pulumi.Input[str] dst_port_range: The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
        :param pulumi.Input[str] nat_gateway_id: The ID of the Nat Gateway.
        :param pulumi.Input[str] protocol: The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
        :param pulumi.Input[str] src_eip_id: The ID of eip associate to the Nat Gateway.
        :param pulumi.Input[str] src_port_range: The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NATGatewayRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Nat Gateway resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        foo_vpc = ucloud.vpc.VPC("fooVPC",
            tag="tf-acc",
            cidr_blocks=["192.168.0.0/16"])
        foo_subnet = ucloud.vpc.Subnet("fooSubnet",
            tag="tf-acc",
            cidr_block="192.168.1.0/24",
            vpc_id=foo_vpc.id)
        foo_eip = ucloud.unet.EIP("fooEIP",
            bandwidth=1,
            internet_type="bgp",
            charge_mode="bandwidth",
            tag="tf-acc")
        foo_security_group = ucloud.unet.get_security_group(type="recommend_web")
        default_zone = ucloud.uaccount.get_zone()
        default_image = ucloud.uhost.get_image(availability_zone=default_zone.zones[0].id,
            name_regex="^CentOS 7.[1-2] 64",
            image_type="base")
        foo_instance = ucloud.uhost.Instance("fooInstance",
            vpc_id=foo_vpc.id,
            subnet_id=foo_subnet.id,
            availability_zone=default_zone.zones[0].id,
            image_id=default_image.images[0].id,
            instance_type="n-basic-1",
            charge_type="dynamic",
            tag="tf-acc")
        foo_nat_gateway = ucloud.vpc.NATGateway("fooNATGateway",
            vpc_id=foo_vpc.id,
            subnet_ids=[foo_subnet.id],
            eip_id=foo_eip.id,
            tag="tf-acc",
            enable_white_list=False,
            security_group=foo_security_group.security_groups[0].id)
        foo_nat_gateway_rule = ucloud.vpc.NATGatewayRule("fooNATGatewayRule",
            nat_gateway_id=foo_nat_gateway.id,
            protocol="tcp",
            src_eip_id=foo_eip.id,
            src_port_range="88",
            dst_ip=foo_instance.private_ip,
            dst_port_range="80")
        bar = ucloud.vpc.NATGatewayRule("bar",
            nat_gateway_id=foo_nat_gateway.id,
            protocol="tcp",
            src_eip_id=foo_eip.id,
            src_port_range="90-100",
            dst_ip=foo_instance.private_ip,
            dst_port_range="90-100")
        ```

        :param str resource_name: The name of the resource.
        :param NATGatewayRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NATGatewayRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 dst_port_range: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_gateway_id: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 src_eip_id: Optional[pulumi.Input[str]] = None,
                 src_port_range: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NATGatewayRuleArgs.__new__(NATGatewayRuleArgs)

            if dst_ip is None and not opts.urn:
                raise TypeError("Missing required property 'dst_ip'")
            __props__.__dict__["dst_ip"] = dst_ip
            if dst_port_range is None and not opts.urn:
                raise TypeError("Missing required property 'dst_port_range'")
            __props__.__dict__["dst_port_range"] = dst_port_range
            __props__.__dict__["name"] = name
            if nat_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'nat_gateway_id'")
            __props__.__dict__["nat_gateway_id"] = nat_gateway_id
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if src_eip_id is None and not opts.urn:
                raise TypeError("Missing required property 'src_eip_id'")
            __props__.__dict__["src_eip_id"] = src_eip_id
            if src_port_range is None and not opts.urn:
                raise TypeError("Missing required property 'src_port_range'")
            __props__.__dict__["src_port_range"] = src_port_range
        super(NATGatewayRule, __self__).__init__(
            'ucloud:vpc/nATGatewayRule:NATGatewayRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dst_ip: Optional[pulumi.Input[str]] = None,
            dst_port_range: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat_gateway_id: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            src_eip_id: Optional[pulumi.Input[str]] = None,
            src_port_range: Optional[pulumi.Input[str]] = None) -> 'NATGatewayRule':
        """
        Get an existing NATGatewayRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dst_ip: The private ip of instance bound to the jNAT gateway.
        :param pulumi.Input[str] dst_port_range: The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
        :param pulumi.Input[str] nat_gateway_id: The ID of the Nat Gateway.
        :param pulumi.Input[str] protocol: The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
        :param pulumi.Input[str] src_eip_id: The ID of eip associate to the Nat Gateway.
        :param pulumi.Input[str] src_port_range: The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NATGatewayRuleState.__new__(_NATGatewayRuleState)

        __props__.__dict__["dst_ip"] = dst_ip
        __props__.__dict__["dst_port_range"] = dst_port_range
        __props__.__dict__["name"] = name
        __props__.__dict__["nat_gateway_id"] = nat_gateway_id
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["src_eip_id"] = src_eip_id
        __props__.__dict__["src_port_range"] = src_port_range
        return NATGatewayRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> pulumi.Output[str]:
        """
        The private ip of instance bound to the jNAT gateway.
        """
        return pulumi.get(self, "dst_ip")

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> pulumi.Output[str]:
        """
        The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        return pulumi.get(self, "dst_port_range")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> pulumi.Output[str]:
        """
        The ID of the Nat Gateway.
        """
        return pulumi.get(self, "nat_gateway_id")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcEipId")
    def src_eip_id(self) -> pulumi.Output[str]:
        """
        The ID of eip associate to the Nat Gateway.
        """
        return pulumi.get(self, "src_eip_id")

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> pulumi.Output[str]:
        """
        The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        return pulumi.get(self, "src_port_range")

