# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'EIPIpSet',
    'EIPResource',
    'SecurityGroupRule',
    'GetEIPEipResult',
    'GetEIPEipIpSetResult',
    'GetSecurityGroupSecurityGroupResult',
    'GetSecurityGroupSecurityGroupRuleResult',
]

@pulumi.output_type
class EIPIpSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internetType":
            suggest = "internet_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EIPIpSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EIPIpSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EIPIpSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internet_type: Optional[str] = None,
                 ip: Optional[str] = None):
        """
        :param str internet_type: Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.
        """
        if internet_type is not None:
            pulumi.set(__self__, "internet_type", internet_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="internetType")
    def internet_type(self) -> Optional[str]:
        """
        Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.
        """
        return pulumi.get(self, "internet_type")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class EIPResource(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str id: The ID of the resource with EIP attached.
        :param str type: The type of resource with EIP attached. Possible values are `instance` as instance, `lb` as load balancer.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the resource with EIP attached.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of resource with EIP attached. Possible values are `instance` as instance, `lb` as load balancer.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SecurityGroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "portRange":
            suggest = "port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_block: Optional[str] = None,
                 policy: Optional[str] = None,
                 port_range: Optional[str] = None,
                 priority: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param str cidr_block: The cidr block of source.
        :param str policy: Authorization policy. Possible values are: `accept`, `drop`.
        :param str port_range: The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).
        :param str priority: Rule priority. Possible values are: `high`, `medium`, `low`.
        :param str protocol: The protocol. Possible values are: `tcp`, `udp`, `icmp`, `gre`.
        """
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        The cidr block of source.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        """
        Authorization policy. Possible values are: `accept`, `drop`.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[str]:
        """
        The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        Rule priority. Possible values are: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol. Possible values are: `tcp`, `udp`, `icmp`, `gre`.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetEIPEipResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 charge_mode: str,
                 charge_type: str,
                 create_time: str,
                 expire_time: str,
                 ip_sets: Sequence['outputs.GetEIPEipIpSetResult'],
                 name: str,
                 remark: str,
                 status: str,
                 tag: str):
        """
        :param int bandwidth: Maximum bandwidth to the elastic public network, measured in Mbps.
        :param str charge_mode: The charge mode of Elastic IP. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth.
        :param str charge_type: The charge type of Elastic IP. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour.
        :param str create_time: The creation time of Elastic IP, formatted in RFC3339 time string.
        :param str expire_time: The expiration time for Elastic IP, formatted in RFC3339 time string.
        :param Sequence['GetEIPEipIpSetArgs'] ip_sets: It is a nested type which documented below.
        :param str name: The name of Elastic IP.
        :param str remark: The remarks of Elastic IP.
        :param str status: Elastic IP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.
        :param str tag: A tag assigned to Elastic IP.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "ip_sets", ip_sets)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Maximum bandwidth to the elastic public network, measured in Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> str:
        """
        The charge mode of Elastic IP. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth.
        """
        return pulumi.get(self, "charge_mode")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of Elastic IP. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time of Elastic IP, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        The expiration time for Elastic IP, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Sequence['outputs.GetEIPEipIpSetResult']:
        """
        It is a nested type which documented below.
        """
        return pulumi.get(self, "ip_sets")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of Elastic IP.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        The remarks of Elastic IP.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Elastic IP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        A tag assigned to Elastic IP.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetEIPEipIpSetResult(dict):
    def __init__(__self__, *,
                 internet_type: str,
                 ip: str):
        """
        :param str internet_type: Type of Elastic IP routes.
        :param str ip: Elastic IP address.
        """
        pulumi.set(__self__, "internet_type", internet_type)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="internetType")
    def internet_type(self) -> str:
        """
        Type of Elastic IP routes.
        """
        return pulumi.get(self, "internet_type")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Elastic IP address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetSecurityGroupSecurityGroupResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 id: str,
                 name: str,
                 remark: str,
                 rules: Sequence['outputs.GetSecurityGroupSecurityGroupRuleResult'],
                 tag: str,
                 type: str):
        """
        :param str create_time: The time of creation for the security group, formatted in RFC3339 time string.
        :param str id: The ID of Security Group.
        :param str name: The name of Security Group.
        :param str remark: The remarks of the security group.
        :param Sequence['GetSecurityGroupSecurityGroupRuleArgs'] rules: It is a nested type which documented below.
        :param str tag: A tag assigned to the security group.
        :param str type: The type of Security Group. Possible values are: `recommend_web` as the default Web security group that UCloud recommend to users, default opened port include 80, 443, 22, 3389, `recommend_non_web` as the default non Web security group that UCloud recommend to users, default opened port include 22, 3389, `user_defined` as the security groups defined by users. You may refer to [security group](https://docs.ucloud.cn/network/firewall/firewall.html).
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time of creation for the security group, formatted in RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Security Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of Security Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        The remarks of the security group.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetSecurityGroupSecurityGroupRuleResult']:
        """
        It is a nested type which documented below.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        A tag assigned to the security group.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of Security Group. Possible values are: `recommend_web` as the default Web security group that UCloud recommend to users, default opened port include 80, 443, 22, 3389, `recommend_non_web` as the default non Web security group that UCloud recommend to users, default opened port include 22, 3389, `user_defined` as the security groups defined by users. You may refer to [security group](https://docs.ucloud.cn/network/firewall/firewall.html).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSecurityGroupSecurityGroupRuleResult(dict):
    def __init__(__self__, *,
                 cidr_block: str,
                 policy: str,
                 port_range: str,
                 priority: str,
                 protocol: str):
        """
        :param str cidr_block: The cidr block of source.
        :param str policy: Authorization policy. Can be either `accept` or `drop`.
        :param str port_range: The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).
        :param str priority: Rule priority. Can be `high`, `medium`, `low`.
        :param str protocol: The protocol. Can be `tcp`, `udp`, `icmp`, `gre`.
        """
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        The cidr block of source.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def policy(self) -> str:
        """
        Authorization policy. Can be either `accept` or `drop`.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Rule priority. Can be `high`, `medium`, `low`.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol. Can be `tcp`, `udp`, `icmp`, `gre`.
        """
        return pulumi.get(self, "protocol")


