# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class LookupSecurityGroupsResult:
    """
    A collection of values returned by lookupSecurityGroups.
    """
    def __init__(__self__, ids=None, name_regex=None, output_file=None, security_groups=None, total_count=None, type=None, id=None):
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        __self__.name_regex = name_regex
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        __self__.security_groups = security_groups
        """
        It is a nested type which documented below.
        """
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        __self__.total_count = total_count
        """
        Total number of Security Group resources that satisfy the condition.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        The type of Security Group.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
class AwaitableLookupSecurityGroupsResult(LookupSecurityGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return LookupSecurityGroupsResult(
            ids=self.ids,
            name_regex=self.name_regex,
            output_file=self.output_file,
            security_groups=self.security_groups,
            total_count=self.total_count,
            type=self.type,
            id=self.id)

def lookup_security_groups(ids=None,name_regex=None,output_file=None,type=None,opts=None):
    """
    This data source provides a list of Security Group resources according to their Security Group ID, name and resource id.
    
    :param list ids: A list of Security Group IDs, all the Security Group resources belong to this region will be retrieved if the ID is `""`.
    :param str name_regex: A regex string to filter resulting Security Group resources by name.
    :param str type: The type of Security Group. Possible values are: `recommend_web` as the default Web security group that UCloud recommend to users, default opened port include 80, 443, 22, 3389, `recommend_non_web` as the default non Web security group that UCloud recommend to users, default opened port include 22, 3389, `user_defined` as the security groups defined by users. You may refer to [security group](https://docs.ucloud.cn/network/firewall/firewall.html).

    > This content is derived from https://github.com/terraform-providers/terraform-provider-ucloud/blob/master/website/docs/d/security_groups.html.markdown.
    """
    __args__ = dict()

    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['type'] = type
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('ucloud:unet/lookupSecurityGroups:lookupSecurityGroups', __args__, opts=opts).value

    return AwaitableLookupSecurityGroupsResult(
        ids=__ret__.get('ids'),
        name_regex=__ret__.get('nameRegex'),
        output_file=__ret__.get('outputFile'),
        security_groups=__ret__.get('securityGroups'),
        total_count=__ret__.get('totalCount'),
        type=__ret__.get('type'),
        id=__ret__.get('id'))
