# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EIPAssociationArgs', 'EIPAssociation']

@pulumi.input_type
class EIPAssociationArgs:
    def __init__(__self__, *,
                 eip_id: pulumi.Input[str],
                 resource_id: pulumi.Input[str],
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EIPAssociation resource.
        :param pulumi.Input[str] eip_id: The ID of EIP.
        :param pulumi.Input[str] resource_id: The ID of resource with EIP attached.
        :param pulumi.Input[str] resource_type: , attribute `resource_type` is deprecated for optimizing parameters.
        """
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            warnings.warn("""attribute `resource_type` is deprecated for optimizing parameters""", DeprecationWarning)
            pulumi.log.warn("""resource_type is deprecated: attribute `resource_type` is deprecated for optimizing parameters""")
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Input[str]:
        """
        The ID of EIP.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        The ID of resource with EIP attached.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        , attribute `resource_type` is deprecated for optimizing parameters.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class _EIPAssociationState:
    def __init__(__self__, *,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EIPAssociation resources.
        :param pulumi.Input[str] eip_id: The ID of EIP.
        :param pulumi.Input[str] resource_id: The ID of resource with EIP attached.
        :param pulumi.Input[str] resource_type: , attribute `resource_type` is deprecated for optimizing parameters.
        """
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            warnings.warn("""attribute `resource_type` is deprecated for optimizing parameters""", DeprecationWarning)
            pulumi.log.warn("""resource_type is deprecated: attribute `resource_type` is deprecated for optimizing parameters""")
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of EIP.
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of resource with EIP attached.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        , attribute `resource_type` is deprecated for optimizing parameters.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


class EIPAssociation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an EIP Association resource for associating Elastic IP to UHost Instance, Load Balancer, etc.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        default_zone = ucloud.uaccount.get_zone()
        default_image = ucloud.uhost.get_image(availability_zone=default_zone.zones[0].id,
            name_regex="^CentOS 7.[1-2] 64",
            image_type="base")
        # Create security group
        default_security_group = ucloud.unet.SecurityGroup("defaultSecurityGroup",
            tag="tf-example",
            rules=[ucloud.unet.SecurityGroupRuleArgs(
                port_range="80",
                protocol="tcp",
                cidr_block="0.0.0.0/0",
                policy="accept",
            )])
        # Create an eip
        default_eip = ucloud.unet.EIP("defaultEIP",
            bandwidth=2,
            charge_mode="bandwidth",
            tag="tf-example",
            internet_type="bgp")
        # Create a web server
        web = ucloud.uhost.Instance("web",
            instance_type="n-basic-2",
            availability_zone=default_zone.zones[0].id,
            image_id=default_image.images[0].id,
            data_disk_size=50,
            root_password="wA1234567",
            security_group=default_security_group.id,
            tag="tf-example")
        # Bind eip to instance
        default_eipassociation = ucloud.unet.EIPAssociation("defaultEIPAssociation",
            resource_id=web.id,
            eip_id=default_eip.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] eip_id: The ID of EIP.
        :param pulumi.Input[str] resource_id: The ID of resource with EIP attached.
        :param pulumi.Input[str] resource_type: , attribute `resource_type` is deprecated for optimizing parameters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EIPAssociationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an EIP Association resource for associating Elastic IP to UHost Instance, Load Balancer, etc.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ucloud as ucloud

        default_zone = ucloud.uaccount.get_zone()
        default_image = ucloud.uhost.get_image(availability_zone=default_zone.zones[0].id,
            name_regex="^CentOS 7.[1-2] 64",
            image_type="base")
        # Create security group
        default_security_group = ucloud.unet.SecurityGroup("defaultSecurityGroup",
            tag="tf-example",
            rules=[ucloud.unet.SecurityGroupRuleArgs(
                port_range="80",
                protocol="tcp",
                cidr_block="0.0.0.0/0",
                policy="accept",
            )])
        # Create an eip
        default_eip = ucloud.unet.EIP("defaultEIP",
            bandwidth=2,
            charge_mode="bandwidth",
            tag="tf-example",
            internet_type="bgp")
        # Create a web server
        web = ucloud.uhost.Instance("web",
            instance_type="n-basic-2",
            availability_zone=default_zone.zones[0].id,
            image_id=default_image.images[0].id,
            data_disk_size=50,
            root_password="wA1234567",
            security_group=default_security_group.id,
            tag="tf-example")
        # Bind eip to instance
        default_eipassociation = ucloud.unet.EIPAssociation("defaultEIPAssociation",
            resource_id=web.id,
            eip_id=default_eip.id)
        ```

        :param str resource_name: The name of the resource.
        :param EIPAssociationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EIPAssociationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 eip_id: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EIPAssociationArgs.__new__(EIPAssociationArgs)

            if eip_id is None and not opts.urn:
                raise TypeError("Missing required property 'eip_id'")
            __props__.__dict__["eip_id"] = eip_id
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if resource_type is not None and not opts.urn:
                warnings.warn("""attribute `resource_type` is deprecated for optimizing parameters""", DeprecationWarning)
                pulumi.log.warn("""resource_type is deprecated: attribute `resource_type` is deprecated for optimizing parameters""")
            __props__.__dict__["resource_type"] = resource_type
        super(EIPAssociation, __self__).__init__(
            'ucloud:unet/eIPAssociation:EIPAssociation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            eip_id: Optional[pulumi.Input[str]] = None,
            resource_id: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None) -> 'EIPAssociation':
        """
        Get an existing EIPAssociation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] eip_id: The ID of EIP.
        :param pulumi.Input[str] resource_id: The ID of resource with EIP attached.
        :param pulumi.Input[str] resource_type: , attribute `resource_type` is deprecated for optimizing parameters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EIPAssociationState.__new__(_EIPAssociationState)

        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_type"] = resource_type
        return EIPAssociation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[str]:
        """
        The ID of EIP.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        """
        The ID of resource with EIP attached.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        , attribute `resource_type` is deprecated for optimizing parameters.
        """
        return pulumi.get(self, "resource_type")

