# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DBInstanceArgs', 'DBInstance']

@pulumi.input_type
class DBInstanceArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[str],
                 engine: pulumi.Input[str],
                 engine_version: pulumi.Input[str],
                 instance_storage: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 allow_stopping_for_update: Optional[pulumi.Input[bool]] = None,
                 backup_begin_time: Optional[pulumi.Input[int]] = None,
                 backup_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backup_count: Optional[pulumi.Input[int]] = None,
                 backup_date: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_group: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 standby_zone: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DBInstance resource.
        :param pulumi.Input[str] availability_zone: Availability zone where database instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        :param pulumi.Input[str] engine: The type of database engine, possible values are: "mysql", "percona".
        :param pulumi.Input[str] engine_version: The database engine version, possible values are: "5.5", "5.6", "5.7".
               - 5.5/5.6/5.7 for mysql and percona engine.
        :param pulumi.Input[int] instance_storage: Specifies the allocated storage size in gigabytes (GB), range from 20 to 4500GB. The volume adjustment must be a multiple of 10 GB. The maximum disk volume for SSD type are：
               - 500GB if the memory chosen is equal or less than 6GB;
               - 1000GB if the memory chosen is from 8 to 16GB;
               - 2000GB if the memory chosen is 24GB or 32GB;
               - 3500GB if the memory chosen is 48GB or 64GB;
               - 4500GB if the memory chosen is equal or more than 96GB;
        :param pulumi.Input[int] backup_begin_time: Specifies when the backup starts, measured in hour, it starts at one o'clock of 1, 2, 3, 4 in the morning by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_black_lists: The backup for database such as "test.%" or table such as "city.address" specified in the black lists are not supported.
        :param pulumi.Input[int] backup_count: Specifies the number of backup saved per week, it is 7 backups saved per week by default.
        :param pulumi.Input[str] backup_date: Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits "1100000" stands for the backup took place on Saturday and Friday.
        :param pulumi.Input[str] charge_type: The charge type of db instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
        :param pulumi.Input[int] duration: The duration that you will buy the db instance (Default: `1`). The value is `0` when pay by month and the instance will be vaild till the last day of that month. It is not required when `dynamic` (pay by hour).
        :param pulumi.Input[int] port: The port on which the database accepts connections, the default port is 3306 for mysql and percona.
        :param pulumi.Input[str] standby_zone: Availability zone where the standby database instance is located for the high availability database instance with multiple zone; The disaster recovery of data center can be activated by switching to the standby database instance for the high availability database instance.
        :param pulumi.Input[str] subnet_id: The ID of subnet.
        :param pulumi.Input[str] tag: A tag assigned to database instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        :param pulumi.Input[str] vpc_id: The ID of VPC linked to the database instances.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "instance_storage", instance_storage)
        pulumi.set(__self__, "instance_type", instance_type)
        if allow_stopping_for_update is not None:
            pulumi.set(__self__, "allow_stopping_for_update", allow_stopping_for_update)
        if backup_begin_time is not None:
            pulumi.set(__self__, "backup_begin_time", backup_begin_time)
        if backup_black_lists is not None:
            pulumi.set(__self__, "backup_black_lists", backup_black_lists)
        if backup_count is not None:
            pulumi.set(__self__, "backup_count", backup_count)
        if backup_date is not None:
            pulumi.set(__self__, "backup_date", backup_date)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_group is not None:
            pulumi.set(__self__, "parameter_group", parameter_group)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if standby_zone is not None:
            pulumi.set(__self__, "standby_zone", standby_zone)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[str]:
        """
        Availability zone where database instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Input[str]:
        """
        The type of database engine, possible values are: "mysql", "percona".
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Input[str]:
        """
        The database engine version, possible values are: "5.5", "5.6", "5.7".
        - 5.5/5.6/5.7 for mysql and percona engine.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="instanceStorage")
    def instance_storage(self) -> pulumi.Input[int]:
        """
        Specifies the allocated storage size in gigabytes (GB), range from 20 to 4500GB. The volume adjustment must be a multiple of 10 GB. The maximum disk volume for SSD type are：
        - 500GB if the memory chosen is equal or less than 6GB;
        - 1000GB if the memory chosen is from 8 to 16GB;
        - 2000GB if the memory chosen is 24GB or 32GB;
        - 3500GB if the memory chosen is 48GB or 64GB;
        - 4500GB if the memory chosen is equal or more than 96GB;
        """
        return pulumi.get(self, "instance_storage")

    @instance_storage.setter
    def instance_storage(self, value: pulumi.Input[int]):
        pulumi.set(self, "instance_storage", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="allowStoppingForUpdate")
    def allow_stopping_for_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_stopping_for_update")

    @allow_stopping_for_update.setter
    def allow_stopping_for_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_stopping_for_update", value)

    @property
    @pulumi.getter(name="backupBeginTime")
    def backup_begin_time(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies when the backup starts, measured in hour, it starts at one o'clock of 1, 2, 3, 4 in the morning by default.
        """
        return pulumi.get(self, "backup_begin_time")

    @backup_begin_time.setter
    def backup_begin_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_begin_time", value)

    @property
    @pulumi.getter(name="backupBlackLists")
    def backup_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The backup for database such as "test.%" or table such as "city.address" specified in the black lists are not supported.
        """
        return pulumi.get(self, "backup_black_lists")

    @backup_black_lists.setter
    def backup_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_black_lists", value)

    @property
    @pulumi.getter(name="backupCount")
    def backup_count(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of backup saved per week, it is 7 backups saved per week by default.
        """
        return pulumi.get(self, "backup_count")

    @backup_count.setter
    def backup_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_count", value)

    @property
    @pulumi.getter(name="backupDate")
    def backup_date(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits "1100000" stands for the backup took place on Saturday and Friday.
        """
        return pulumi.get(self, "backup_date")

    @backup_date.setter
    def backup_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_date", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of db instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        The duration that you will buy the db instance (Default: `1`). The value is `0` when pay by month and the instance will be vaild till the last day of that month. It is not required when `dynamic` (pay by hour).
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterGroup")
    def parameter_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_group")

    @parameter_group.setter
    def parameter_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_group", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port on which the database accepts connections, the default port is 3306 for mysql and percona.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="standbyZone")
    def standby_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone where the standby database instance is located for the high availability database instance with multiple zone; The disaster recovery of data center can be activated by switching to the standby database instance for the high availability database instance.
        """
        return pulumi.get(self, "standby_zone")

    @standby_zone.setter
    def standby_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standby_zone", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        A tag assigned to database instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of VPC linked to the database instances.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _DBInstanceState:
    def __init__(__self__, *,
                 allow_stopping_for_update: Optional[pulumi.Input[bool]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_begin_time: Optional[pulumi.Input[int]] = None,
                 backup_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backup_count: Optional[pulumi.Input[int]] = None,
                 backup_date: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 instance_storage: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 modify_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_group: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 standby_zone: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DBInstance resources.
        :param pulumi.Input[str] availability_zone: Availability zone where database instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        :param pulumi.Input[int] backup_begin_time: Specifies when the backup starts, measured in hour, it starts at one o'clock of 1, 2, 3, 4 in the morning by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_black_lists: The backup for database such as "test.%" or table such as "city.address" specified in the black lists are not supported.
        :param pulumi.Input[int] backup_count: Specifies the number of backup saved per week, it is 7 backups saved per week by default.
        :param pulumi.Input[str] backup_date: Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits "1100000" stands for the backup took place on Saturday and Friday.
        :param pulumi.Input[str] charge_type: The charge type of db instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
        :param pulumi.Input[str] create_time: The creation time of database, formatted by RFC3339 time string.
        :param pulumi.Input[int] duration: The duration that you will buy the db instance (Default: `1`). The value is `0` when pay by month and the instance will be vaild till the last day of that month. It is not required when `dynamic` (pay by hour).
        :param pulumi.Input[str] engine: The type of database engine, possible values are: "mysql", "percona".
        :param pulumi.Input[str] engine_version: The database engine version, possible values are: "5.5", "5.6", "5.7".
               - 5.5/5.6/5.7 for mysql and percona engine.
        :param pulumi.Input[str] expire_time: The expiration time of database, formatted by RFC3339 time string.
        :param pulumi.Input[int] instance_storage: Specifies the allocated storage size in gigabytes (GB), range from 20 to 4500GB. The volume adjustment must be a multiple of 10 GB. The maximum disk volume for SSD type are：
               - 500GB if the memory chosen is equal or less than 6GB;
               - 1000GB if the memory chosen is from 8 to 16GB;
               - 2000GB if the memory chosen is 24GB or 32GB;
               - 3500GB if the memory chosen is 48GB or 64GB;
               - 4500GB if the memory chosen is equal or more than 96GB;
        :param pulumi.Input[str] modify_time: The modification time of database, formatted by RFC3339 time string.
        :param pulumi.Input[int] port: The port on which the database accepts connections, the default port is 3306 for mysql and percona.
        :param pulumi.Input[str] private_ip: The private IP address assigned to the database instance.
        :param pulumi.Input[str] standby_zone: Availability zone where the standby database instance is located for the high availability database instance with multiple zone; The disaster recovery of data center can be activated by switching to the standby database instance for the high availability database instance.
        :param pulumi.Input[str] status: Specifies the status of database, possible values are: `Init`, `Fail`, `Starting`, `Running`, `Shutdown`, `Shutoff`, `Delete`, `Upgrading`, `Promoting`, `Recovering` and `Recover fail`.
        :param pulumi.Input[str] subnet_id: The ID of subnet.
        :param pulumi.Input[str] tag: A tag assigned to database instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        :param pulumi.Input[str] vpc_id: The ID of VPC linked to the database instances.
        """
        if allow_stopping_for_update is not None:
            pulumi.set(__self__, "allow_stopping_for_update", allow_stopping_for_update)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if backup_begin_time is not None:
            pulumi.set(__self__, "backup_begin_time", backup_begin_time)
        if backup_black_lists is not None:
            pulumi.set(__self__, "backup_black_lists", backup_black_lists)
        if backup_count is not None:
            pulumi.set(__self__, "backup_count", backup_count)
        if backup_date is not None:
            pulumi.set(__self__, "backup_date", backup_date)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if instance_storage is not None:
            pulumi.set(__self__, "instance_storage", instance_storage)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_group is not None:
            pulumi.set(__self__, "parameter_group", parameter_group)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if standby_zone is not None:
            pulumi.set(__self__, "standby_zone", standby_zone)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="allowStoppingForUpdate")
    def allow_stopping_for_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_stopping_for_update")

    @allow_stopping_for_update.setter
    def allow_stopping_for_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_stopping_for_update", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone where database instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="backupBeginTime")
    def backup_begin_time(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies when the backup starts, measured in hour, it starts at one o'clock of 1, 2, 3, 4 in the morning by default.
        """
        return pulumi.get(self, "backup_begin_time")

    @backup_begin_time.setter
    def backup_begin_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_begin_time", value)

    @property
    @pulumi.getter(name="backupBlackLists")
    def backup_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The backup for database such as "test.%" or table such as "city.address" specified in the black lists are not supported.
        """
        return pulumi.get(self, "backup_black_lists")

    @backup_black_lists.setter
    def backup_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_black_lists", value)

    @property
    @pulumi.getter(name="backupCount")
    def backup_count(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of backup saved per week, it is 7 backups saved per week by default.
        """
        return pulumi.get(self, "backup_count")

    @backup_count.setter
    def backup_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_count", value)

    @property
    @pulumi.getter(name="backupDate")
    def backup_date(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits "1100000" stands for the backup took place on Saturday and Friday.
        """
        return pulumi.get(self, "backup_date")

    @backup_date.setter
    def backup_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_date", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of db instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The creation time of database, formatted by RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        The duration that you will buy the db instance (Default: `1`). The value is `0` when pay by month and the instance will be vaild till the last day of that month. It is not required when `dynamic` (pay by hour).
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        """
        The type of database engine, possible values are: "mysql", "percona".
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        The database engine version, possible values are: "5.5", "5.6", "5.7".
        - 5.5/5.6/5.7 for mysql and percona engine.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        The expiration time of database, formatted by RFC3339 time string.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="instanceStorage")
    def instance_storage(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the allocated storage size in gigabytes (GB), range from 20 to 4500GB. The volume adjustment must be a multiple of 10 GB. The maximum disk volume for SSD type are：
        - 500GB if the memory chosen is equal or less than 6GB;
        - 1000GB if the memory chosen is from 8 to 16GB;
        - 2000GB if the memory chosen is 24GB or 32GB;
        - 3500GB if the memory chosen is 48GB or 64GB;
        - 4500GB if the memory chosen is equal or more than 96GB;
        """
        return pulumi.get(self, "instance_storage")

    @instance_storage.setter
    def instance_storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_storage", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[pulumi.Input[str]]:
        """
        The modification time of database, formatted by RFC3339 time string.
        """
        return pulumi.get(self, "modify_time")

    @modify_time.setter
    def modify_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modify_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterGroup")
    def parameter_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_group")

    @parameter_group.setter
    def parameter_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_group", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port on which the database accepts connections, the default port is 3306 for mysql and percona.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The private IP address assigned to the database instance.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="standbyZone")
    def standby_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone where the standby database instance is located for the high availability database instance with multiple zone; The disaster recovery of data center can be activated by switching to the standby database instance for the high availability database instance.
        """
        return pulumi.get(self, "standby_zone")

    @standby_zone.setter
    def standby_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standby_zone", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the status of database, possible values are: `Init`, `Fail`, `Starting`, `Running`, `Shutdown`, `Shutoff`, `Delete`, `Upgrading`, `Promoting`, `Recovering` and `Recover fail`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        A tag assigned to database instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of VPC linked to the database instances.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class DBInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_stopping_for_update: Optional[pulumi.Input[bool]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_begin_time: Optional[pulumi.Input[int]] = None,
                 backup_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backup_count: Optional[pulumi.Input[int]] = None,
                 backup_date: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 instance_storage: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_group: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 standby_zone: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        DB Instance can be imported using the `id`, e.g.

        ```sh
         $ pulumi import ucloud:udb/dBInstance:DBInstance example udbha-abc123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] availability_zone: Availability zone where database instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        :param pulumi.Input[int] backup_begin_time: Specifies when the backup starts, measured in hour, it starts at one o'clock of 1, 2, 3, 4 in the morning by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_black_lists: The backup for database such as "test.%" or table such as "city.address" specified in the black lists are not supported.
        :param pulumi.Input[int] backup_count: Specifies the number of backup saved per week, it is 7 backups saved per week by default.
        :param pulumi.Input[str] backup_date: Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits "1100000" stands for the backup took place on Saturday and Friday.
        :param pulumi.Input[str] charge_type: The charge type of db instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
        :param pulumi.Input[int] duration: The duration that you will buy the db instance (Default: `1`). The value is `0` when pay by month and the instance will be vaild till the last day of that month. It is not required when `dynamic` (pay by hour).
        :param pulumi.Input[str] engine: The type of database engine, possible values are: "mysql", "percona".
        :param pulumi.Input[str] engine_version: The database engine version, possible values are: "5.5", "5.6", "5.7".
               - 5.5/5.6/5.7 for mysql and percona engine.
        :param pulumi.Input[int] instance_storage: Specifies the allocated storage size in gigabytes (GB), range from 20 to 4500GB. The volume adjustment must be a multiple of 10 GB. The maximum disk volume for SSD type are：
               - 500GB if the memory chosen is equal or less than 6GB;
               - 1000GB if the memory chosen is from 8 to 16GB;
               - 2000GB if the memory chosen is 24GB or 32GB;
               - 3500GB if the memory chosen is 48GB or 64GB;
               - 4500GB if the memory chosen is equal or more than 96GB;
        :param pulumi.Input[int] port: The port on which the database accepts connections, the default port is 3306 for mysql and percona.
        :param pulumi.Input[str] standby_zone: Availability zone where the standby database instance is located for the high availability database instance with multiple zone; The disaster recovery of data center can be activated by switching to the standby database instance for the high availability database instance.
        :param pulumi.Input[str] subnet_id: The ID of subnet.
        :param pulumi.Input[str] tag: A tag assigned to database instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        :param pulumi.Input[str] vpc_id: The ID of VPC linked to the database instances.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DBInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        DB Instance can be imported using the `id`, e.g.

        ```sh
         $ pulumi import ucloud:udb/dBInstance:DBInstance example udbha-abc123456
        ```

        :param str resource_name: The name of the resource.
        :param DBInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DBInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_stopping_for_update: Optional[pulumi.Input[bool]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_begin_time: Optional[pulumi.Input[int]] = None,
                 backup_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backup_count: Optional[pulumi.Input[int]] = None,
                 backup_date: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 instance_storage: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_group: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 standby_zone: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DBInstanceArgs.__new__(DBInstanceArgs)

            __props__.__dict__["allow_stopping_for_update"] = allow_stopping_for_update
            if availability_zone is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone'")
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["backup_begin_time"] = backup_begin_time
            __props__.__dict__["backup_black_lists"] = backup_black_lists
            __props__.__dict__["backup_count"] = backup_count
            __props__.__dict__["backup_date"] = backup_date
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["duration"] = duration
            if engine is None and not opts.urn:
                raise TypeError("Missing required property 'engine'")
            __props__.__dict__["engine"] = engine
            if engine_version is None and not opts.urn:
                raise TypeError("Missing required property 'engine_version'")
            __props__.__dict__["engine_version"] = engine_version
            if instance_storage is None and not opts.urn:
                raise TypeError("Missing required property 'instance_storage'")
            __props__.__dict__["instance_storage"] = instance_storage
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["name"] = name
            __props__.__dict__["parameter_group"] = parameter_group
            __props__.__dict__["password"] = password
            __props__.__dict__["port"] = port
            __props__.__dict__["standby_zone"] = standby_zone
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tag"] = tag
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["expire_time"] = None
            __props__.__dict__["modify_time"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["status"] = None
        super(DBInstance, __self__).__init__(
            'ucloud:udb/dBInstance:DBInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_stopping_for_update: Optional[pulumi.Input[bool]] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            backup_begin_time: Optional[pulumi.Input[int]] = None,
            backup_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            backup_count: Optional[pulumi.Input[int]] = None,
            backup_date: Optional[pulumi.Input[str]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            duration: Optional[pulumi.Input[int]] = None,
            engine: Optional[pulumi.Input[str]] = None,
            engine_version: Optional[pulumi.Input[str]] = None,
            expire_time: Optional[pulumi.Input[str]] = None,
            instance_storage: Optional[pulumi.Input[int]] = None,
            instance_type: Optional[pulumi.Input[str]] = None,
            modify_time: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parameter_group: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            private_ip: Optional[pulumi.Input[str]] = None,
            standby_zone: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tag: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'DBInstance':
        """
        Get an existing DBInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] availability_zone: Availability zone where database instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        :param pulumi.Input[int] backup_begin_time: Specifies when the backup starts, measured in hour, it starts at one o'clock of 1, 2, 3, 4 in the morning by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_black_lists: The backup for database such as "test.%" or table such as "city.address" specified in the black lists are not supported.
        :param pulumi.Input[int] backup_count: Specifies the number of backup saved per week, it is 7 backups saved per week by default.
        :param pulumi.Input[str] backup_date: Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits "1100000" stands for the backup took place on Saturday and Friday.
        :param pulumi.Input[str] charge_type: The charge type of db instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
        :param pulumi.Input[str] create_time: The creation time of database, formatted by RFC3339 time string.
        :param pulumi.Input[int] duration: The duration that you will buy the db instance (Default: `1`). The value is `0` when pay by month and the instance will be vaild till the last day of that month. It is not required when `dynamic` (pay by hour).
        :param pulumi.Input[str] engine: The type of database engine, possible values are: "mysql", "percona".
        :param pulumi.Input[str] engine_version: The database engine version, possible values are: "5.5", "5.6", "5.7".
               - 5.5/5.6/5.7 for mysql and percona engine.
        :param pulumi.Input[str] expire_time: The expiration time of database, formatted by RFC3339 time string.
        :param pulumi.Input[int] instance_storage: Specifies the allocated storage size in gigabytes (GB), range from 20 to 4500GB. The volume adjustment must be a multiple of 10 GB. The maximum disk volume for SSD type are：
               - 500GB if the memory chosen is equal or less than 6GB;
               - 1000GB if the memory chosen is from 8 to 16GB;
               - 2000GB if the memory chosen is 24GB or 32GB;
               - 3500GB if the memory chosen is 48GB or 64GB;
               - 4500GB if the memory chosen is equal or more than 96GB;
        :param pulumi.Input[str] modify_time: The modification time of database, formatted by RFC3339 time string.
        :param pulumi.Input[int] port: The port on which the database accepts connections, the default port is 3306 for mysql and percona.
        :param pulumi.Input[str] private_ip: The private IP address assigned to the database instance.
        :param pulumi.Input[str] standby_zone: Availability zone where the standby database instance is located for the high availability database instance with multiple zone; The disaster recovery of data center can be activated by switching to the standby database instance for the high availability database instance.
        :param pulumi.Input[str] status: Specifies the status of database, possible values are: `Init`, `Fail`, `Starting`, `Running`, `Shutdown`, `Shutoff`, `Delete`, `Upgrading`, `Promoting`, `Recovering` and `Recover fail`.
        :param pulumi.Input[str] subnet_id: The ID of subnet.
        :param pulumi.Input[str] tag: A tag assigned to database instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        :param pulumi.Input[str] vpc_id: The ID of VPC linked to the database instances.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DBInstanceState.__new__(_DBInstanceState)

        __props__.__dict__["allow_stopping_for_update"] = allow_stopping_for_update
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["backup_begin_time"] = backup_begin_time
        __props__.__dict__["backup_black_lists"] = backup_black_lists
        __props__.__dict__["backup_count"] = backup_count
        __props__.__dict__["backup_date"] = backup_date
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["duration"] = duration
        __props__.__dict__["engine"] = engine
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["expire_time"] = expire_time
        __props__.__dict__["instance_storage"] = instance_storage
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["modify_time"] = modify_time
        __props__.__dict__["name"] = name
        __props__.__dict__["parameter_group"] = parameter_group
        __props__.__dict__["password"] = password
        __props__.__dict__["port"] = port
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["standby_zone"] = standby_zone
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tag"] = tag
        __props__.__dict__["vpc_id"] = vpc_id
        return DBInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowStoppingForUpdate")
    def allow_stopping_for_update(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_stopping_for_update")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        """
        Availability zone where database instance is located. Such as: "cn-bj2-02". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="backupBeginTime")
    def backup_begin_time(self) -> pulumi.Output[int]:
        """
        Specifies when the backup starts, measured in hour, it starts at one o'clock of 1, 2, 3, 4 in the morning by default.
        """
        return pulumi.get(self, "backup_begin_time")

    @property
    @pulumi.getter(name="backupBlackLists")
    def backup_black_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        The backup for database such as "test.%" or table such as "city.address" specified in the black lists are not supported.
        """
        return pulumi.get(self, "backup_black_lists")

    @property
    @pulumi.getter(name="backupCount")
    def backup_count(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the number of backup saved per week, it is 7 backups saved per week by default.
        """
        return pulumi.get(self, "backup_count")

    @property
    @pulumi.getter(name="backupDate")
    def backup_date(self) -> pulumi.Output[str]:
        """
        Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits "1100000" stands for the backup took place on Saturday and Friday.
        """
        return pulumi.get(self, "backup_date")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[str]:
        """
        The charge type of db instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The creation time of database, formatted by RFC3339 time string.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Output[Optional[int]]:
        """
        The duration that you will buy the db instance (Default: `1`). The value is `0` when pay by month and the instance will be vaild till the last day of that month. It is not required when `dynamic` (pay by hour).
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Output[str]:
        """
        The type of database engine, possible values are: "mysql", "percona".
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[str]:
        """
        The database engine version, possible values are: "5.5", "5.6", "5.7".
        - 5.5/5.6/5.7 for mysql and percona engine.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Output[str]:
        """
        The expiration time of database, formatted by RFC3339 time string.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="instanceStorage")
    def instance_storage(self) -> pulumi.Output[int]:
        """
        Specifies the allocated storage size in gigabytes (GB), range from 20 to 4500GB. The volume adjustment must be a multiple of 10 GB. The maximum disk volume for SSD type are：
        - 500GB if the memory chosen is equal or less than 6GB;
        - 1000GB if the memory chosen is from 8 to 16GB;
        - 2000GB if the memory chosen is 24GB or 32GB;
        - 3500GB if the memory chosen is 48GB or 64GB;
        - 4500GB if the memory chosen is equal or more than 96GB;
        """
        return pulumi.get(self, "instance_storage")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> pulumi.Output[str]:
        """
        The modification time of database, formatted by RFC3339 time string.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parameterGroup")
    def parameter_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "parameter_group")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        The port on which the database accepts connections, the default port is 3306 for mysql and percona.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[str]:
        """
        The private IP address assigned to the database instance.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="standbyZone")
    def standby_zone(self) -> pulumi.Output[Optional[str]]:
        """
        Availability zone where the standby database instance is located for the high availability database instance with multiple zone; The disaster recovery of data center can be activated by switching to the standby database instance for the high availability database instance.
        """
        return pulumi.get(self, "standby_zone")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Specifies the status of database, possible values are: `Init`, `Fail`, `Starting`, `Running`, `Shutdown`, `Shutoff`, `Delete`, `Upgrading`, `Promoting`, `Recovering` and `Recover fail`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The ID of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Output[str]:
        """
        A tag assigned to database instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The ID of VPC linked to the database instances.
        """
        return pulumi.get(self, "vpc_id")

