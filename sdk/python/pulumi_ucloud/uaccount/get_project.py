# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProjectResult',
    'AwaitableGetProjectResult',
    'get_project',
]

@pulumi.output_type
class GetProjectResult:
    """
    A collection of values returned by getProject.
    """
    def __init__(__self__, id=None, is_finance=None, name_regex=None, output_file=None, projects=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_finance and not isinstance(is_finance, bool):
            raise TypeError("Expected argument 'is_finance' to be a bool")
        pulumi.set(__self__, "is_finance", is_finance)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if projects and not isinstance(projects, list):
            raise TypeError("Expected argument 'projects' to be a list")
        pulumi.set(__self__, "projects", projects)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isFinance")
    def is_finance(self) -> Optional[bool]:
        return pulumi.get(self, "is_finance")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetProjectProjectResult']:
        """
        It is a nested type which documented below.
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        Total number of projects that satisfy the condition.
        """
        return pulumi.get(self, "total_count")


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            id=self.id,
            is_finance=self.is_finance,
            name_regex=self.name_regex,
            output_file=self.output_file,
            projects=self.projects,
            total_count=self.total_count)


def get_project(is_finance: Optional[bool] = None,
                name_regex: Optional[str] = None,
                output_file: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectResult:
    """
    This data source providers a list of projects owned by user according to finance permission and name.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ucloud as ucloud

    example = ucloud.uaccount.get_project(is_finance=False)
    pulumi.export("first", example.projects[0].id)
    ```


    :param bool is_finance: To identify if the current account is granted with financial permission.
    :param str name_regex: A regex string to filter resulting projects by name.
    """
    __args__ = dict()
    __args__['isFinance'] = is_finance
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('ucloud:uaccount/getProject:getProject', __args__, opts=opts, typ=GetProjectResult).value

    return AwaitableGetProjectResult(
        id=__ret__.id,
        is_finance=__ret__.is_finance,
        name_regex=__ret__.name_regex,
        output_file=__ret__.output_file,
        projects=__ret__.projects,
        total_count=__ret__.total_count)
