{
    "name": "ucloud",
    "description": "A Pulumi package for creating and managing ucloud cloud resources.",
    "keywords": [
        "pulumi",
        "ucloud"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`ucloud` Terraform Provider](https://github.com/terraform-providers/terraform-provider-ucloud).",
    "repository": "https://github.com/pulumi/pulumi-ucloud",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "baseUrl": {
                "type": "string",
                "description": "...\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "...\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "...\n"
            },
            "privateKey": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_PRIVATE_KEY"
                    ]
                }
            },
            "profile": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_PROFILE"
                    ]
                }
            },
            "projectId": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_PROJECT_ID"
                    ]
                }
            },
            "publicKey": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_PUBLIC_KEY"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_REGION"
                    ]
                }
            },
            "sharedCredentialsFile": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_SHARED_CREDENTIAL_FILE"
                    ]
                }
            }
        },
        "defaults": [
            "projectId",
            "region"
        ]
    },
    "types": {
        "ucloud:ipsecvpn/VPNConnectionIkeConfig:VPNConnectionIkeConfig": {
            "properties": {
                "authenticationAlgorithm": {
                    "type": "string",
                    "description": "The authentication algorithm of IPSec negotiation. Possible values: `sha1`, `md5`. (Default: `sha1`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dhGroup": {
                    "type": "string",
                    "description": "The Diffie-Hellman group used by IKE negotiation. Possible values: `1`, `2`, `5`, `14`, `15`, `16`. (Default:`15`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptionAlgorithm": {
                    "type": "string",
                    "description": "The encryption algorithm of IPSec negotiation. Possible values: `aes128`, `aes192`, `aes256`, `aes512`, `3des`. (Default: `aes128`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exchangeMode": {
                    "type": "string",
                    "description": "The negotiation exchange mode of IKE V1 of VPN gateway. Possible values: `main` (main mode), `aggressive` (aggressive mode). (Default: `main`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeVersion": {
                    "type": "string",
                    "description": "The version of the IKE protocol which only be supported IKE V1 protocol at present. Possible values: ikev1. (Default: ikev1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localId": {
                    "type": "string",
                    "description": "The identification of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "The key used for authentication between the VPN gateway and the Customer gateway which contains 1-128 characters and only support English, numbers and special characters: `!@#$%^\u0026*()_+-=[]:,./'~`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteId": {
                    "type": "string",
                    "description": "The identification of the Customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saLifeTime": {
                    "type": "integer",
                    "description": "The Security Association lifecycle as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "preSharedKey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "localId",
                        "preSharedKey",
                        "remoteId"
                    ]
                }
            }
        },
        "ucloud:ipsecvpn/VPNConnectionIpsecConfig:VPNConnectionIpsecConfig": {
            "properties": {
                "authenticationAlgorithm": {
                    "type": "string",
                    "description": "The authentication algorithm of IPSec negotiation. Possible values: `sha1`, `md5`. (Default: `sha1`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptionAlgorithm": {
                    "type": "string",
                    "description": "The encryption algorithm of IPSec negotiation. Possible values: `aes128`, `aes192`, `aes256`, `aes512`, `3des`. (Default: `aes128`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The id list of Local subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pfsDhGroup": {
                    "type": "string",
                    "description": "Whether the PFS of IPSec negotiation is on or off, `disable` as off, The Diffie-Hellman group as open.  Possible values: `disable`, `1`, `2`, `5`, `14`, `15`, `16`. (Default:`disable`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The security protocol of IPSec negotiation. Possible values: `esp`, `ah`. (Default:`esp`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ip address list of remote subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saLifeTime": {
                    "type": "integer",
                    "description": "The Security Association lifecycle as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saLifeTimeBytes": {
                    "type": "integer",
                    "description": "The Security Association lifecycle in bytes as the result of IPSec negotiation. Unit: second. Range: 1200-604800. (Default: `3600`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "localSubnetIds",
                "remoteSubnets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "localSubnetIds",
                        "remoteSubnets",
                        "saLifeTimeBytes"
                    ]
                }
            }
        },
        "ucloud:ipsecvpn/getVPNConnectionVpnConnection:getVPNConnectionVpnConnection": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for VPN Connection, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customerGatewayId": {
                    "type": "string",
                    "description": "The ID of VPN Customer Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of VPN Connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:ipsecvpn/getVPNConnectionVpnConnectionIkeConfig:getVPNConnectionVpnConnectionIkeConfig"
                    },
                    "description": "It is a nested type which documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipsecConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:ipsecvpn/getVPNConnectionVpnConnectionIpsecConfig:getVPNConnectionVpnConnectionIpsecConfig"
                    },
                    "description": "It is a nested type which documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VPN Connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of VPN Connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPN Connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the VPN Connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "The ID of VPN Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "customerGatewayId",
                "id",
                "ikeConfigs",
                "ipsecConfigs",
                "name",
                "remark",
                "tag",
                "vpcId",
                "vpnGatewayId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ipsecvpn/getVPNConnectionVpnConnectionIkeConfig:getVPNConnectionVpnConnectionIkeConfig": {
            "properties": {
                "authenticationAlgorithm": {
                    "type": "string",
                    "description": "The authentication algorithm of IPSec negotiation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dhGroup": {
                    "type": "string",
                    "description": "The Diffie-Hellman group used by IKE negotiation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptionAlgorithm": {
                    "type": "string",
                    "description": "The encryption algorithm of IPSec negotiation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exchangeMode": {
                    "type": "string",
                    "description": "The negotiation exchange mode of IKE V1 of VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ikeVersion": {
                    "type": "string",
                    "description": "The version of the IKE protocol.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localId": {
                    "type": "string",
                    "description": "The identification of the VPN gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "The key used for authentication between the VPN gateway and the Customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteId": {
                    "type": "string",
                    "description": "The identification of the Customer gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saLifeTime": {
                    "type": "integer",
                    "description": "The Security Association lifecycle as the result of IPSec negotiation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authenticationAlgorithm",
                "dhGroup",
                "encryptionAlgorithm",
                "exchangeMode",
                "ikeVersion",
                "localId",
                "preSharedKey",
                "remoteId",
                "saLifeTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ipsecvpn/getVPNConnectionVpnConnectionIpsecConfig:getVPNConnectionVpnConnectionIpsecConfig": {
            "properties": {
                "authenticationAlgorithm": {
                    "type": "string",
                    "description": "The authentication algorithm of IPSec negotiation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptionAlgorithm": {
                    "type": "string",
                    "description": "The encryption algorithm of IPSec negotiation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSubnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The id list of Local subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pfsDhGroup": {
                    "type": "string",
                    "description": "Whether the PFS of IPSec negotiation is on or off, `disable` as off, The Diffie-Hellman group as open.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The security protocol of IPSec negotiation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ip address list of remote subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saLifeTime": {
                    "type": "integer",
                    "description": "The Security Association lifecycle as the result of IPSec negotiation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saLifeTimeBytes": {
                    "type": "integer",
                    "description": "The Security Association lifecycle in bytes as the result of IPSec negotiation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authenticationAlgorithm",
                "encryptionAlgorithm",
                "localSubnetIds",
                "pfsDhGroup",
                "protocol",
                "remoteSubnets",
                "saLifeTime",
                "saLifeTimeBytes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ipsecvpn/getVPNCustomerGatewayVpnCustomerGateway:getVPNCustomerGatewayVpnCustomerGateway": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for VPN Customer Gateway, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of VPN Customer Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The ip address of the VPN Customer Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VPN Customer Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of VPN Customer Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPN Customer Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "id",
                "ipAddress",
                "name",
                "remark",
                "tag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ipsecvpn/getVPNGatewayVpnGateway:getVPNGatewayVpnGateway": {
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to renew an VPN Gateway automatically or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of VPN Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for VPN Gateway, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time for VPN Gateway, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grade": {
                    "type": "string",
                    "description": "The type of the VPN Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of VPN Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:ipsecvpn/getVPNGatewayVpnGatewayIpSet:getVPNGatewayVpnGatewayIpSet"
                    },
                    "description": "It is a nested type which documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VPN Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of VPN Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPN Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the VPN Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoRenew",
                "chargeType",
                "createTime",
                "expireTime",
                "grade",
                "id",
                "ipSets",
                "name",
                "remark",
                "tag",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ipsecvpn/getVPNGatewayVpnGatewayIpSet:getVPNGatewayVpnGatewayIpSet": {
            "properties": {
                "internetType": {
                    "type": "string",
                    "description": "Type of Elastic IP routes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Elastic IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "internetType",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:uaccount/getProjectProject:getProjectProject": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for instance, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of project defined.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberCount": {
                    "type": "integer",
                    "description": "The number of members belongs to the defined project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the defined project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentId": {
                    "type": "string",
                    "description": "The ID of the parent project where the sub project belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentName": {
                    "type": "string",
                    "description": "The name of the parent project where the sub project belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceCount": {
                    "type": "integer",
                    "description": "The number of the resounce instance belong/s to the defined project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "id",
                "memberCount",
                "name",
                "parentId",
                "parentName",
                "resourceCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:uaccount/getZoneZone:getZoneZone": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:udb/getDBInstanceDbInstance:getDBInstanceDbInstance": {
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where database instances are located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupBeginTime": {
                    "type": "integer",
                    "description": "Specifies when the backup starts, measured in hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The backup for database instance such as \"test.%\" or table such as \"city.address\" specified in the black lists are not supported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupCount": {
                    "type": "integer",
                    "description": "Specifies the number of backup saved per week.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupDate": {
                    "type": "string",
                    "description": "Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits \"1100000\" stands for the backup took place on Saturday and Friday.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of db instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of database instance , formatted by RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engine": {
                    "type": "string",
                    "description": "The type of database instance engine.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The database instance engine version.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time of database instance , formatted by RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of database instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceStorage": {
                    "type": "integer",
                    "description": "Specifies the allocated storage size in gigabytes (GB).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "Specifies the type of database instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modification time of database instance , formatted by RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of database instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port on which the database instance accepts connections.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private IP address assigned to the database instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standbyZone": {
                    "type": "string",
                    "description": "Availability zone where the standby database instance is located for the high availability database instance with multiple zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Specifies the status of database instance , possible values are: `Init`, `Fail`, `Starting`, `Running`, `Shutdown`, `Shutoff`, `Delete`, `Upgrading`, `Promoting`, `Recovering` and `Recover fail`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet linked to the database instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to database instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the database instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZone",
                "backupBeginTime",
                "backupBlackLists",
                "backupCount",
                "backupDate",
                "chargeType",
                "createTime",
                "engine",
                "engineVersion",
                "expireTime",
                "id",
                "instanceStorage",
                "instanceType",
                "modifyTime",
                "name",
                "port",
                "privateIp",
                "standbyZone",
                "status",
                "subnetId",
                "tag",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:udisk/getDiskDisk:getDiskDisk": {
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where Disk are located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of Disk, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The size of disk. Purchase the size of disk in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskType": {
                    "type": "string",
                    "description": "The type of disk. Possible values are: `data_disk`as cloud disk, `ssd_data_disk` as SSD cloud disk, `system_disk`as system disk, `ssd_system_disk` as SSD system disk, `rssd_data_disk` as RDMA-SSD cloud disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time of disk, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of Disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of disk. Possible values are: `Available`, `InUse`, `Detaching`, `Initializating`, `Failed`, `Cloning`, `Restoring`, `RestoreFailed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZone",
                "chargeType",
                "createTime",
                "diskSize",
                "diskType",
                "expireTime",
                "id",
                "name",
                "status",
                "tag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:uhost/InstanceDataDisks:InstanceDataDisks": {
            "properties": {
                "size": {
                    "type": "integer",
                    "description": "The size of the cloud data disk, range 20-8000, measured in GB (GigaByte).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the cloud data disk. Possible values are: `cloud_normal` and `cloud_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size",
                "type"
            ]
        },
        "ucloud:uhost/InstanceDiskSet:InstanceDiskSet": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isBoot": {
                    "type": "boolean",
                    "description": "Specifies whether boot disk or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the cloud data disk, range 20-8000, measured in GB (GigaByte).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the cloud data disk. Possible values are: `cloud_normal` and `cloud_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "isBoot",
                        "size",
                        "type"
                    ]
                }
            }
        },
        "ucloud:uhost/InstanceIpSet:InstanceIpSet": {
            "properties": {
                "internetType": {
                    "type": "string",
                    "description": "Type of Elastic IP routes. Possible values are: `International` as international BGP IP, `BGP` as china BGP IP and `Private` as private IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Elastic IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "internetType",
                        "ip"
                    ]
                }
            }
        },
        "ucloud:uhost/getImageImage:getImageImage": {
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where images are located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for image, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of image if any.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To identify if any particular feature belongs to the instance, the value is `NetEnhnced` as I/O enhanced instance for now.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osName": {
                    "type": "string",
                    "description": "The name of OS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osType": {
                    "type": "string",
                    "description": "The type of OS. Possible values are: `linux` and `windows`, all the OS types will be retrieved by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of image. Possible values are `Available`, `Making` and `Unavailable`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availabilityZone",
                "createTime",
                "description",
                "features",
                "id",
                "name",
                "osName",
                "osType",
                "size",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:uhost/getInstanceInstance:getInstanceInstance": {
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to renew an instance automatically or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where instances are located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of instance, possible values are: `year`, `month` and `dynamic` as pay by hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpu": {
                    "type": "integer",
                    "description": "The number of cores of virtual CPU, measureed in core.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for instance, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:uhost/getInstanceInstanceDiskSet:getInstanceInstanceDiskSet"
                    },
                    "description": "It is a nested type which documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time for instance, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:uhost/getInstanceInstanceIpSet:getInstanceInstanceIpSet"
                    },
                    "description": "It is a nested type which documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "description": "The size of memory, measured in MB (Megabyte).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private IP address assigned to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Instance current status. Possible values are `Initializing`, `Starting`, `Running`, `Stopping`, `Stopped`, `Install Fail` and `Rebooting`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet linked to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoRenew",
                "availabilityZone",
                "chargeType",
                "cpu",
                "createTime",
                "diskSets",
                "expireTime",
                "id",
                "instanceType",
                "ipSets",
                "memory",
                "name",
                "privateIp",
                "remark",
                "status",
                "subnetId",
                "tag",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:uhost/getInstanceInstanceDiskSet:getInstanceInstanceDiskSet": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isBoot": {
                    "type": "boolean",
                    "description": "Specifies whether boot disk or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of disk, measured in GB (Gigabyte).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "isBoot",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:uhost/getInstanceInstanceIpSet:getInstanceInstanceIpSet": {
            "properties": {
                "internetType": {
                    "type": "string",
                    "description": "Type of Elastic IP routes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Elastic IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "internetType",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ulb/LBIpSet:LBIpSet": {
            "properties": {
                "internetType": {
                    "type": "string",
                    "description": "Type of Elastic IP routes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Elastic IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "internetType",
                        "ip"
                    ]
                }
            }
        },
        "ucloud:ulb/getLBAttachmentLbAttachment:getLBAttachmentLbAttachment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of LB Attachment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port opened on the backend server to receive requests, range: 1-65535.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private ip address for backend servers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of a backend server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "port",
                "privateIp",
                "resourceId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ulb/getLBLb:getLBLb": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The creation time of Load Balancer, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internal": {
                    "type": "boolean",
                    "description": "Indicate whether the load balancer is intranet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:ulb/getLBLbIpSet:getLBLbIpSet"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "description": "The IP address of intranet IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet that intrant load balancer belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC linked to the Load Balancers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "id",
                "internal",
                "ipSets",
                "name",
                "privateIp",
                "remark",
                "subnetId",
                "tag",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ulb/getLBLbIpSet:getLBLbIpSet": {
            "properties": {
                "internetType": {
                    "type": "string",
                    "description": "Type of Load Balancer routes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Load Balancer address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "internetType",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ulb/getLBListenersLbListener:getLBListenersLbListener": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Health check domain checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "Health check method. Possible values are `port` as port checking and `path` as http checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of LB Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Amount of time in seconds to wait for the response for in between two sessions if `listen_type` is `request_proxy`, range: 0-86400. Amount of time in seconds to wait for one session if `listen_type` is `packets_transmit`, range: 60-900. The session will be closed as soon as no response if it is `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listenType": {
                    "type": "string",
                    "description": "The type of LB Listener. Possible values are `request_proxy` and `packets_transmit`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistent_hash`, `source_port` , `consistent_hash_port`, `weight_roundrobin` and `leastconn`. \n- The `consistent_hash`, `source_port` , `consistent_hash_port`, `roundrobin`, `source` and `weight_roundrobin` are valid if `listen_type` is `packets_transmit`.\n- The `rundrobin`, `source` and `weight_roundrobin` and `leastconn` are vaild if `listen_type` is `request_proxy`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of LB Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Health check path checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "persistence": {
                    "type": "string",
                    "description": "Indicate whether the persistence session is enabled, it is invaild if `persistence_type` is `none`, an auto-generated string will be exported if `persistence_type` is `server_insert`, a custom string will be exported if `persistence_type` is `user_defined`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "persistenceType": {
                    "type": "string",
                    "description": "The type of session persistence of LB Listener. Possible values are: `none` as disabled, `server_insert` as auto-generated string and `user_defined` as cutom string. (Default: `none`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port opened on the LB Listener to receive requests, range: 1-65535.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "LB Listener protocol. Possible values: `http`, `https` if `listen_type` is `request_proxy`, `tcp` and `udp` if `listen_type` is `packets_transmit`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "LB Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "domain",
                "healthCheckType",
                "id",
                "idleTimeout",
                "listenType",
                "method",
                "name",
                "path",
                "persistence",
                "persistenceType",
                "port",
                "protocol",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ulb/getLBRulesLbRule:getLBRulesLbRule": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "(Optional) The domain of content forward matching fields. `path` and `domain` cannot coexist.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of LB Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "(Optional) The path of Content forward matching fields. `path` and `domain` cannot coexist.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "domain",
                "id",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:ulb/getLBSslLbSsl:getLBSslLbSsl": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for lb ssl, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of LB SSL certificate resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of LB SSL certificate resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:umem/MemcachedInstanceIpSet:MemcachedInstanceIpSet": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The virtual ip of Memcache instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port on which Memcache instance accepts connections, it is 6379 by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "port"
                    ]
                }
            }
        },
        "ucloud:umem/RedisInstanceIpSet:RedisInstanceIpSet": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The virtual ip of Redis instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port on which Redis instance accepts connections, it is 6379 by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "port"
                    ]
                }
            }
        },
        "ucloud:unet/EIPIpSet:EIPIpSet": {
            "properties": {
                "internetType": {
                    "type": "string",
                    "description": "Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "internetType",
                        "ip"
                    ]
                }
            }
        },
        "ucloud:unet/EIPResource:EIPResource": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource with EIP attached.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of resource with EIP attached. Possible values are `instance` as instance, `lb` as load balancer.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "type"
                    ]
                }
            }
        },
        "ucloud:unet/SecurityGroupRule:SecurityGroupRule": {
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr block of source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "description": "Authorization policy. Possible values are: `accept`, `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "description": "The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "description": "Rule priority. Possible values are: `high`, `medium`, `low`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol. Possible values are: `tcp`, `udp`, `icmp`, `gre`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "ucloud:unet/getEIPEip:getEIPEip": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "Maximum bandwidth to the elastic public network, measured in Mbps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeMode": {
                    "type": "string",
                    "description": "The charge mode of Elastic IP. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of Elastic IP. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of Elastic IP, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time for Elastic IP, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:unet/getEIPEipIpSet:getEIPEipIpSet"
                    },
                    "description": "It is a nested type which documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of Elastic IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of Elastic IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Elastic IP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Elastic IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bandwidth",
                "chargeMode",
                "chargeType",
                "createTime",
                "expireTime",
                "ipSets",
                "name",
                "remark",
                "status",
                "tag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:unet/getEIPEipIpSet:getEIPEipIpSet": {
            "properties": {
                "internetType": {
                    "type": "string",
                    "description": "Type of Elastic IP routes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Elastic IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "internetType",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:unet/getSecurityGroupSecurityGroup:getSecurityGroupSecurityGroup": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for the security group, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Security Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of Security Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:unet/getSecurityGroupSecurityGroupRule:getSecurityGroupSecurityGroupRule"
                    },
                    "description": "It is a nested type which documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to the security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of Security Group. Possible values are: `recommend_web` as the default Web security group that UCloud recommend to users, default opened port include 80, 443, 22, 3389, `recommend_non_web` as the default non Web security group that UCloud recommend to users, default opened port include 22, 3389, `user_defined` as the security groups defined by users. You may refer to [security group](https://docs.ucloud.cn/network/firewall/firewall.html).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "id",
                "name",
                "remark",
                "rules",
                "tag",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:unet/getSecurityGroupSecurityGroupRule:getSecurityGroupSecurityGroupRule": {
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr block of source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "description": "Authorization policy. Can be either `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "description": "The range of port numbers, range: 1-65535. (eg: `port` or `port1-port2`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "description": "Rule priority. Can be `high`, `medium`, `low`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol. Can be `tcp`, `udp`, `icmp`, `gre`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cidrBlock",
                "policy",
                "portRange",
                "priority",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:vpc/VPCNetworkInfo:VPCNetworkInfo": {
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The CIDR block of the VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cidrBlock"
                    ]
                }
            }
        },
        "ucloud:vpc/getNATGatewayNatGateway:getNATGatewayNatGateway": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for Nat Gateway, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Nat Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:vpc/getNATGatewayNatGatewayIpSet:getNATGatewayNatGatewayIpSet"
                    },
                    "description": "It is a nested type which documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Nat Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of Nat Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of subnet ID under the VPC.\n* `security_group` -The ID of the associated security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to the Nat Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the Nat Gateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "id",
                "ipSets",
                "name",
                "remark",
                "securityGroup",
                "subnetIds",
                "tag",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:vpc/getNATGatewayNatGatewayIpSet:getNATGatewayNatGatewayIpSet": {
            "properties": {
                "internetType": {
                    "type": "string",
                    "description": "Type of Elastic IP routes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Elastic IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "internetType",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:vpc/getSubnetSubnet:getSubnetSubnet": {
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr block of the desired Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation of Subnet, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remark": {
                    "type": "string",
                    "description": "The remark of the Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cidrBlock",
                "createTime",
                "id",
                "name",
                "remark",
                "tag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ucloud:vpc/getVPCVpc:getVPCVpc": {
            "properties": {
                "cidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CIDR blocks of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for VPC, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The time whenever there is a change made to VPC, formatted in RFC3339 time string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cidrBlocks",
                "createTime",
                "id",
                "name",
                "tag",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the ucloud package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "baseUrl": {
                "type": "string",
                "description": "...\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "...\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "...\n"
            },
            "privateKey": {
                "type": "string",
                "description": "...\n"
            },
            "profile": {
                "type": "string",
                "description": "...\n"
            },
            "projectId": {
                "type": "string",
                "description": "...\n"
            },
            "publicKey": {
                "type": "string",
                "description": "...\n"
            },
            "region": {
                "type": "string",
                "description": "...\n"
            },
            "sharedCredentialsFile": {
                "type": "string",
                "description": "...\n"
            }
        },
        "inputProperties": {
            "baseUrl": {
                "type": "string",
                "description": "...\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "...\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "...\n"
            },
            "privateKey": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_PRIVATE_KEY"
                    ]
                }
            },
            "profile": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_PROFILE"
                    ]
                }
            },
            "projectId": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_PROJECT_ID"
                    ]
                }
            },
            "publicKey": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_PUBLIC_KEY"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_REGION"
                    ]
                }
            },
            "sharedCredentialsFile": {
                "type": "string",
                "description": "...\n",
                "defaultInfo": {
                    "environment": [
                        "UCLOUD_SHARED_CREDENTIAL_FILE"
                    ]
                }
            }
        }
    },
    "resources": {
        "ucloud:ipsecvpn/vPNConnection:VPNConnection": {
            "description": "Provides a IPSec VPN Gateway Connection resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst fooVPC = new ucloud.vpc.VPC(\"fooVPC\", {\n    tag: \"tf-acc\",\n    cidrBlocks: [\"192.168.0.0/16\"],\n});\nconst fooSubnet = new ucloud.vpc.Subnet(\"fooSubnet\", {\n    tag: \"tf-acc\",\n    cidrBlock: \"192.168.1.0/24\",\n    vpcId: fooVPC.id,\n});\nconst fooEIP = new ucloud.unet.EIP(\"fooEIP\", {\n    bandwidth: 1,\n    internetType: \"bgp\",\n    chargeMode: \"bandwidth\",\n    tag: \"tf-acc\",\n});\nconst fooVPNGateway = new ucloud.ipsecvpn.VPNGateway(\"fooVPNGateway\", {\n    vpcId: fooVPC.id,\n    grade: \"standard\",\n    eipId: fooEIP.id,\n    tag: \"tf-acc\",\n});\nconst fooVPNCustomerGateway = new ucloud.ipsecvpn.VPNCustomerGateway(\"fooVPNCustomerGateway\", {\n    ipAddress: \"10.0.0.1\",\n    tag: \"tf-acc\",\n});\nconst fooVPNConnection = new ucloud.ipsecvpn.VPNConnection(\"fooVPNConnection\", {\n    vpnGatewayId: fooVPNGateway.id,\n    customerGatewayId: fooVPNCustomerGateway.id,\n    vpcId: fooVPC.id,\n    tag: \"tf-acc\",\n    remark: \"test\",\n    ikeConfig: {\n        preSharedKey: \"test_2019\",\n    },\n    ipsecConfig: {\n        localSubnetIds: [fooSubnet.id],\n        remoteSubnets: [\"10.0.0.0/24\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nfoo_vpc = ucloud.vpc.VPC(\"fooVPC\",\n    tag=\"tf-acc\",\n    cidr_blocks=[\"192.168.0.0/16\"])\nfoo_subnet = ucloud.vpc.Subnet(\"fooSubnet\",\n    tag=\"tf-acc\",\n    cidr_block=\"192.168.1.0/24\",\n    vpc_id=foo_vpc.id)\nfoo_eip = ucloud.unet.EIP(\"fooEIP\",\n    bandwidth=1,\n    internet_type=\"bgp\",\n    charge_mode=\"bandwidth\",\n    tag=\"tf-acc\")\nfoo_vpn_gateway = ucloud.ipsecvpn.VPNGateway(\"fooVPNGateway\",\n    vpc_id=foo_vpc.id,\n    grade=\"standard\",\n    eip_id=foo_eip.id,\n    tag=\"tf-acc\")\nfoo_vpn_customer_gateway = ucloud.ipsecvpn.VPNCustomerGateway(\"fooVPNCustomerGateway\",\n    ip_address=\"10.0.0.1\",\n    tag=\"tf-acc\")\nfoo_vpn_connection = ucloud.ipsecvpn.VPNConnection(\"fooVPNConnection\",\n    vpn_gateway_id=foo_vpn_gateway.id,\n    customer_gateway_id=foo_vpn_customer_gateway.id,\n    vpc_id=foo_vpc.id,\n    tag=\"tf-acc\",\n    remark=\"test\",\n    ike_config=ucloud.ipsecvpn.VPNConnectionIkeConfigArgs(\n        pre_shared_key=\"test_2019\",\n    ),\n    ipsec_config=ucloud.ipsecvpn.VPNConnectionIpsecConfigArgs(\n        local_subnet_ids=[foo_subnet.id],\n        remote_subnets=[\"10.0.0.0/24\"],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooVPC = new Ucloud.Vpc.VPC(\"fooVPC\", new Ucloud.Vpc.VPCArgs\n        {\n            Tag = \"tf-acc\",\n            CidrBlocks = \n            {\n                \"192.168.0.0/16\",\n            },\n        });\n        var fooSubnet = new Ucloud.Vpc.Subnet(\"fooSubnet\", new Ucloud.Vpc.SubnetArgs\n        {\n            Tag = \"tf-acc\",\n            CidrBlock = \"192.168.1.0/24\",\n            VpcId = fooVPC.Id,\n        });\n        var fooEIP = new Ucloud.Unet.EIP(\"fooEIP\", new Ucloud.Unet.EIPArgs\n        {\n            Bandwidth = 1,\n            InternetType = \"bgp\",\n            ChargeMode = \"bandwidth\",\n            Tag = \"tf-acc\",\n        });\n        var fooVPNGateway = new Ucloud.Ipsecvpn.VPNGateway(\"fooVPNGateway\", new Ucloud.Ipsecvpn.VPNGatewayArgs\n        {\n            VpcId = fooVPC.Id,\n            Grade = \"standard\",\n            EipId = fooEIP.Id,\n            Tag = \"tf-acc\",\n        });\n        var fooVPNCustomerGateway = new Ucloud.Ipsecvpn.VPNCustomerGateway(\"fooVPNCustomerGateway\", new Ucloud.Ipsecvpn.VPNCustomerGatewayArgs\n        {\n            IpAddress = \"10.0.0.1\",\n            Tag = \"tf-acc\",\n        });\n        var fooVPNConnection = new Ucloud.Ipsecvpn.VPNConnection(\"fooVPNConnection\", new Ucloud.Ipsecvpn.VPNConnectionArgs\n        {\n            VpnGatewayId = fooVPNGateway.Id,\n            CustomerGatewayId = fooVPNCustomerGateway.Id,\n            VpcId = fooVPC.Id,\n            Tag = \"tf-acc\",\n            Remark = \"test\",\n            IkeConfig = new Ucloud.Ipsecvpn.Inputs.VPNConnectionIkeConfigArgs\n            {\n                PreSharedKey = \"test_2019\",\n            },\n            IpsecConfig = new Ucloud.Ipsecvpn.Inputs.VPNConnectionIpsecConfigArgs\n            {\n                LocalSubnetIds = \n                {\n                    fooSubnet.Id,\n                },\n                RemoteSubnets = \n                {\n                    \"10.0.0.0/24\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ipsecvpn\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVPC, err := vpc.NewVPC(ctx, \"fooVPC\", \u0026vpc.VPCArgs{\n\t\t\tTag: pulumi.String(\"tf-acc\"),\n\t\t\tCidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tTag:       pulumi.String(\"tf-acc\"),\n\t\t\tCidrBlock: pulumi.String(\"192.168.1.0/24\"),\n\t\t\tVpcId:     fooVPC.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooEIP, err := unet.NewEIP(ctx, \"fooEIP\", \u0026unet.EIPArgs{\n\t\t\tBandwidth:    pulumi.Int(1),\n\t\t\tInternetType: pulumi.String(\"bgp\"),\n\t\t\tChargeMode:   pulumi.String(\"bandwidth\"),\n\t\t\tTag:          pulumi.String(\"tf-acc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVPNGateway, err := ipsecvpn.NewVPNGateway(ctx, \"fooVPNGateway\", \u0026ipsecvpn.VPNGatewayArgs{\n\t\t\tVpcId: fooVPC.ID(),\n\t\t\tGrade: pulumi.String(\"standard\"),\n\t\t\tEipId: fooEIP.ID(),\n\t\t\tTag:   pulumi.String(\"tf-acc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVPNCustomerGateway, err := ipsecvpn.NewVPNCustomerGateway(ctx, \"fooVPNCustomerGateway\", \u0026ipsecvpn.VPNCustomerGatewayArgs{\n\t\t\tIpAddress: pulumi.String(\"10.0.0.1\"),\n\t\t\tTag:       pulumi.String(\"tf-acc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ipsecvpn.NewVPNConnection(ctx, \"fooVPNConnection\", \u0026ipsecvpn.VPNConnectionArgs{\n\t\t\tVpnGatewayId:      fooVPNGateway.ID(),\n\t\t\tCustomerGatewayId: fooVPNCustomerGateway.ID(),\n\t\t\tVpcId:             fooVPC.ID(),\n\t\t\tTag:               pulumi.String(\"tf-acc\"),\n\t\t\tRemark:            pulumi.String(\"test\"),\n\t\t\tIkeConfig: \u0026ipsecvpn.VPNConnectionIkeConfigArgs{\n\t\t\t\tPreSharedKey: pulumi.String(\"test_2019\"),\n\t\t\t},\n\t\t\tIpsecConfig: \u0026ipsecvpn.VPNConnectionIpsecConfigArgs{\n\t\t\t\tLocalSubnetIds: pulumi.StringArray{\n\t\t\t\t\tfooSubnet.ID(),\n\t\t\t\t},\n\t\t\t\tRemoteSubnets: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"10.0.0.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVPN Connection can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:ipsecvpn/vPNConnection:VPNConnection example vpntunnel-abc123456\n```\n\n ",
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The creation time for VPN Gateway Connection, formatted in RFC3339 time string.\n"
                },
                "customerGatewayId": {
                    "type": "string",
                    "description": "The grade of the VPN Gateway\n"
                },
                "ikeConfig": {
                    "$ref": "#/types/ucloud:ipsecvpn/VPNConnectionIkeConfig:VPNConnectionIkeConfig",
                    "description": "The configurations of IKE negotiation. Each ike_config supports fields documented below.\n"
                },
                "ipsecConfig": {
                    "$ref": "#/types/ucloud:ipsecvpn/VPNConnectionIpsecConfig:VPNConnectionIpsecConfig",
                    "description": "The configurations of IPSec negotiation. Each ipsec_config supports fields documented below.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the VPN Gateway Connection. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the VPN Gateway Connection.\n"
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "The ID of  the VPN Customer Gateway.\n"
                }
            },
            "required": [
                "createTime",
                "customerGatewayId",
                "ikeConfig",
                "ipsecConfig",
                "name",
                "remark",
                "vpcId",
                "vpnGatewayId"
            ],
            "inputProperties": {
                "customerGatewayId": {
                    "type": "string",
                    "description": "The grade of the VPN Gateway\n"
                },
                "ikeConfig": {
                    "$ref": "#/types/ucloud:ipsecvpn/VPNConnectionIkeConfig:VPNConnectionIkeConfig",
                    "description": "The configurations of IKE negotiation. Each ike_config supports fields documented below.\n"
                },
                "ipsecConfig": {
                    "$ref": "#/types/ucloud:ipsecvpn/VPNConnectionIpsecConfig:VPNConnectionIpsecConfig",
                    "description": "The configurations of IPSec negotiation. Each ipsec_config supports fields documented below.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the VPN Gateway Connection. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the VPN Gateway Connection.\n"
                },
                "vpnGatewayId": {
                    "type": "string",
                    "description": "The ID of  the VPN Customer Gateway.\n"
                }
            },
            "requiredInputs": [
                "customerGatewayId",
                "ikeConfig",
                "ipsecConfig",
                "vpcId",
                "vpnGatewayId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VPNConnection resources.\n",
                "properties": {
                    "createTime": {
                        "type": "string",
                        "description": "The creation time for VPN Gateway Connection, formatted in RFC3339 time string.\n"
                    },
                    "customerGatewayId": {
                        "type": "string",
                        "description": "The grade of the VPN Gateway\n"
                    },
                    "ikeConfig": {
                        "$ref": "#/types/ucloud:ipsecvpn/VPNConnectionIkeConfig:VPNConnectionIkeConfig",
                        "description": "The configurations of IKE negotiation. Each ike_config supports fields documented below.\n"
                    },
                    "ipsecConfig": {
                        "$ref": "#/types/ucloud:ipsecvpn/VPNConnectionIpsecConfig:VPNConnectionIpsecConfig",
                        "description": "The configurations of IPSec negotiation. Each ipsec_config supports fields documented below.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the VPN Gateway Connection. (Default: `\"\"`).\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VPN Gateway Connection, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC linked to the VPN Gateway Connection.\n"
                    },
                    "vpnGatewayId": {
                        "type": "string",
                        "description": "The ID of  the VPN Customer Gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:ipsecvpn/vPNCustomerGateway:VPNCustomerGateway": {
            "description": "Provides a VPN Customer Gateway resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst foo = new ucloud.ipsecvpn.VPNCustomerGateway(\"foo\", {\n    ipAddress: \"10.0.0.1\",\n    tag: \"tf-acc\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nfoo = ucloud.ipsecvpn.VPNCustomerGateway(\"foo\",\n    ip_address=\"10.0.0.1\",\n    tag=\"tf-acc\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Ucloud.Ipsecvpn.VPNCustomerGateway(\"foo\", new Ucloud.Ipsecvpn.VPNCustomerGatewayArgs\n        {\n            IpAddress = \"10.0.0.1\",\n            Tag = \"tf-acc\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ipsecvpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ipsecvpn.NewVPNCustomerGateway(ctx, \"foo\", \u0026ipsecvpn.VPNCustomerGatewayArgs{\n\t\t\tIpAddress: pulumi.String(\"10.0.0.1\"),\n\t\t\tTag:       pulumi.String(\"tf-acc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVPN Customer Gateway can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:ipsecvpn/vPNCustomerGateway:VPNCustomerGateway example remotevpngw-abc123456\n```\n\n ",
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The creation time for VPN Customer Gateway, formatted in RFC3339 time string.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The ip address of the VPN Customer Gateway.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the VPN Customer Gateway. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPN Customer Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n* ``\n"
                }
            },
            "required": [
                "createTime",
                "ipAddress",
                "name",
                "remark"
            ],
            "inputProperties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The ip address of the VPN Customer Gateway.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the VPN Customer Gateway. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPN Customer Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n* ``\n"
                }
            },
            "requiredInputs": [
                "ipAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VPNCustomerGateway resources.\n",
                "properties": {
                    "createTime": {
                        "type": "string",
                        "description": "The creation time for VPN Customer Gateway, formatted in RFC3339 time string.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The ip address of the VPN Customer Gateway.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the VPN Customer Gateway. (Default: `\"\"`).\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VPN Customer Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n* ``\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:ipsecvpn/vPNGateway:VPNGateway": {
            "description": "Provides a VPN Gateway resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst fooVPC = new ucloud.vpc.VPC(\"fooVPC\", {\n    tag: \"tf-acc\",\n    cidrBlocks: [\"192.168.0.0/16\"],\n});\nconst fooEIP = new ucloud.unet.EIP(\"fooEIP\", {\n    bandwidth: 1,\n    internetType: \"bgp\",\n    chargeMode: \"bandwidth\",\n    tag: \"tf-acc\",\n});\nconst fooVPNGateway = new ucloud.ipsecvpn.VPNGateway(\"fooVPNGateway\", {\n    vpcId: fooVPC.id,\n    grade: \"enhanced\",\n    eipId: fooEIP.id,\n    tag: \"tf-acc\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nfoo_vpc = ucloud.vpc.VPC(\"fooVPC\",\n    tag=\"tf-acc\",\n    cidr_blocks=[\"192.168.0.0/16\"])\nfoo_eip = ucloud.unet.EIP(\"fooEIP\",\n    bandwidth=1,\n    internet_type=\"bgp\",\n    charge_mode=\"bandwidth\",\n    tag=\"tf-acc\")\nfoo_vpn_gateway = ucloud.ipsecvpn.VPNGateway(\"fooVPNGateway\",\n    vpc_id=foo_vpc.id,\n    grade=\"enhanced\",\n    eip_id=foo_eip.id,\n    tag=\"tf-acc\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooVPC = new Ucloud.Vpc.VPC(\"fooVPC\", new Ucloud.Vpc.VPCArgs\n        {\n            Tag = \"tf-acc\",\n            CidrBlocks = \n            {\n                \"192.168.0.0/16\",\n            },\n        });\n        var fooEIP = new Ucloud.Unet.EIP(\"fooEIP\", new Ucloud.Unet.EIPArgs\n        {\n            Bandwidth = 1,\n            InternetType = \"bgp\",\n            ChargeMode = \"bandwidth\",\n            Tag = \"tf-acc\",\n        });\n        var fooVPNGateway = new Ucloud.Ipsecvpn.VPNGateway(\"fooVPNGateway\", new Ucloud.Ipsecvpn.VPNGatewayArgs\n        {\n            VpcId = fooVPC.Id,\n            Grade = \"enhanced\",\n            EipId = fooEIP.Id,\n            Tag = \"tf-acc\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ipsecvpn\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVPC, err := vpc.NewVPC(ctx, \"fooVPC\", \u0026vpc.VPCArgs{\n\t\t\tTag: pulumi.String(\"tf-acc\"),\n\t\t\tCidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooEIP, err := unet.NewEIP(ctx, \"fooEIP\", \u0026unet.EIPArgs{\n\t\t\tBandwidth:    pulumi.Int(1),\n\t\t\tInternetType: pulumi.String(\"bgp\"),\n\t\t\tChargeMode:   pulumi.String(\"bandwidth\"),\n\t\t\tTag:          pulumi.String(\"tf-acc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ipsecvpn.NewVPNGateway(ctx, \"fooVPNGateway\", \u0026ipsecvpn.VPNGatewayArgs{\n\t\t\tVpcId: fooVPC.ID(),\n\t\t\tGrade: pulumi.String(\"enhanced\"),\n\t\t\tEipId: fooEIP.ID(),\n\t\t\tTag:   pulumi.String(\"tf-acc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVPN Gateway can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:ipsecvpn/vPNGateway:VPNGateway example vpngw-abc123456\n```\n\n ",
            "properties": {
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of VPN Gateway, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time for VPN Gateway, formatted in RFC3339 time string.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the VPN Gateway (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                },
                "eipId": {
                    "type": "string",
                    "description": "The ID of eip associate to the VPN Gateway.\n"
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time for VPN Gateway, formatted in RFC3339 time string.\n"
                },
                "grade": {
                    "type": "string",
                    "description": "The type of the VPN Gateway. Possible values: `standard`, `enhanced`. `standard` recommended application scenario: Applicable to services with bidirectional peak bandwidth of 1M~50M; `enhanced` recommended application scenario: Suitable for services with bidirectional peak bandwidths of 50M~100M.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the VPN Gateway. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPN Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n* ``\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the VPN Gateway.\n"
                }
            },
            "required": [
                "chargeType",
                "createTime",
                "eipId",
                "expireTime",
                "grade",
                "name",
                "remark",
                "vpcId"
            ],
            "inputProperties": {
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of VPN Gateway, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the VPN Gateway (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                },
                "eipId": {
                    "type": "string",
                    "description": "The ID of eip associate to the VPN Gateway.\n"
                },
                "grade": {
                    "type": "string",
                    "description": "The type of the VPN Gateway. Possible values: `standard`, `enhanced`. `standard` recommended application scenario: Applicable to services with bidirectional peak bandwidth of 1M~50M; `enhanced` recommended application scenario: Suitable for services with bidirectional peak bandwidths of 50M~100M.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the VPN Gateway. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPN Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n* ``\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the VPN Gateway.\n"
                }
            },
            "requiredInputs": [
                "eipId",
                "grade",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VPNGateway resources.\n",
                "properties": {
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of VPN Gateway, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The creation time for VPN Gateway, formatted in RFC3339 time string.\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration that you will buy the VPN Gateway (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                    },
                    "eipId": {
                        "type": "string",
                        "description": "The ID of eip associate to the VPN Gateway.\n"
                    },
                    "expireTime": {
                        "type": "string",
                        "description": "The expiration time for VPN Gateway, formatted in RFC3339 time string.\n"
                    },
                    "grade": {
                        "type": "string",
                        "description": "The type of the VPN Gateway. Possible values: `standard`, `enhanced`. `standard` recommended application scenario: Applicable to services with bidirectional peak bandwidth of 1M~50M; `enhanced` recommended application scenario: Suitable for services with bidirectional peak bandwidths of 50M~100M.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the VPN Gateway. (Default: `\"\"`).\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VPN Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n* ``\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC linked to the VPN Gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:udb/dBInstance:DBInstance": {
            "description": "\n\n\n## Import\n\nDB Instance can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:udb/dBInstance:DBInstance example udbha-abc123456\n```\n\n ",
            "properties": {
                "allowStoppingForUpdate": {
                    "type": "boolean"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where database instance is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                },
                "backupBeginTime": {
                    "type": "integer",
                    "description": "Specifies when the backup starts, measured in hour, it starts at one o'clock of 1, 2, 3, 4 in the morning by default.\n"
                },
                "backupBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The backup for database such as \"test.%\" or table such as \"city.address\" specified in the black lists are not supported.\n"
                },
                "backupCount": {
                    "type": "integer",
                    "description": "Specifies the number of backup saved per week, it is 7 backups saved per week by default.\n"
                },
                "backupDate": {
                    "type": "string",
                    "description": "Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits \"1100000\" stands for the backup took place on Saturday and Friday.\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of db instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of database, formatted by RFC3339 time string.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the db instance (Default: `1`). The value is `0` when pay by month and the instance will be vaild till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The type of database engine, possible values are: \"mysql\", \"percona\".\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The database engine version, possible values are: \"5.5\", \"5.6\", \"5.7\".\n- 5.5/5.6/5.7 for mysql and percona engine.\n"
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time of database, formatted by RFC3339 time string.\n"
                },
                "instanceStorage": {
                    "type": "integer",
                    "description": "Specifies the allocated storage size in gigabytes (GB), range from 20 to 4500GB. The volume adjustment must be a multiple of 10 GB. The maximum disk volume for SSD type are：\n- 500GB if the memory chosen is equal or less than 6GB;\n- 1000GB if the memory chosen is from 8 to 16GB;\n- 2000GB if the memory chosen is 24GB or 32GB;\n- 3500GB if the memory chosen is 48GB or 64GB;\n- 4500GB if the memory chosen is equal or more than 96GB;\n"
                },
                "instanceType": {
                    "type": "string"
                },
                "modifyTime": {
                    "type": "string",
                    "description": "The modification time of database, formatted by RFC3339 time string.\n"
                },
                "name": {
                    "type": "string"
                },
                "parameterGroup": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "The port on which the database accepts connections, the default port is 3306 for mysql and percona.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private IP address assigned to the database instance.\n"
                },
                "standbyZone": {
                    "type": "string",
                    "description": "Availability zone where the standby database instance is located for the high availability database instance with multiple zone; The disaster recovery of data center can be activated by switching to the standby database instance for the high availability database instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Specifies the status of database, possible values are: `Init`, `Fail`, `Starting`, `Running`, `Shutdown`, `Shutoff`, `Delete`, `Upgrading`, `Promoting`, `Recovering` and `Recover fail`.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to database instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the database instances.\n"
                }
            },
            "required": [
                "availabilityZone",
                "backupBeginTime",
                "backupBlackLists",
                "backupDate",
                "chargeType",
                "createTime",
                "engine",
                "engineVersion",
                "expireTime",
                "instanceStorage",
                "instanceType",
                "modifyTime",
                "name",
                "parameterGroup",
                "password",
                "port",
                "privateIp",
                "status",
                "subnetId",
                "tag",
                "vpcId"
            ],
            "inputProperties": {
                "allowStoppingForUpdate": {
                    "type": "boolean"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where database instance is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                },
                "backupBeginTime": {
                    "type": "integer",
                    "description": "Specifies when the backup starts, measured in hour, it starts at one o'clock of 1, 2, 3, 4 in the morning by default.\n"
                },
                "backupBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The backup for database such as \"test.%\" or table such as \"city.address\" specified in the black lists are not supported.\n"
                },
                "backupCount": {
                    "type": "integer",
                    "description": "Specifies the number of backup saved per week, it is 7 backups saved per week by default.\n"
                },
                "backupDate": {
                    "type": "string",
                    "description": "Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits \"1100000\" stands for the backup took place on Saturday and Friday.\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of db instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the db instance (Default: `1`). The value is `0` when pay by month and the instance will be vaild till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The type of database engine, possible values are: \"mysql\", \"percona\".\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The database engine version, possible values are: \"5.5\", \"5.6\", \"5.7\".\n- 5.5/5.6/5.7 for mysql and percona engine.\n"
                },
                "instanceStorage": {
                    "type": "integer",
                    "description": "Specifies the allocated storage size in gigabytes (GB), range from 20 to 4500GB. The volume adjustment must be a multiple of 10 GB. The maximum disk volume for SSD type are：\n- 500GB if the memory chosen is equal or less than 6GB;\n- 1000GB if the memory chosen is from 8 to 16GB;\n- 2000GB if the memory chosen is 24GB or 32GB;\n- 3500GB if the memory chosen is 48GB or 64GB;\n- 4500GB if the memory chosen is equal or more than 96GB;\n"
                },
                "instanceType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parameterGroup": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "The port on which the database accepts connections, the default port is 3306 for mysql and percona.\n"
                },
                "standbyZone": {
                    "type": "string",
                    "description": "Availability zone where the standby database instance is located for the high availability database instance with multiple zone; The disaster recovery of data center can be activated by switching to the standby database instance for the high availability database instance.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to database instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the database instances.\n"
                }
            },
            "requiredInputs": [
                "availabilityZone",
                "engine",
                "engineVersion",
                "instanceStorage",
                "instanceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DBInstance resources.\n",
                "properties": {
                    "allowStoppingForUpdate": {
                        "type": "boolean"
                    },
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where database instance is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                    },
                    "backupBeginTime": {
                        "type": "integer",
                        "description": "Specifies when the backup starts, measured in hour, it starts at one o'clock of 1, 2, 3, 4 in the morning by default.\n"
                    },
                    "backupBlackLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The backup for database such as \"test.%\" or table such as \"city.address\" specified in the black lists are not supported.\n"
                    },
                    "backupCount": {
                        "type": "integer",
                        "description": "Specifies the number of backup saved per week, it is 7 backups saved per week by default.\n"
                    },
                    "backupDate": {
                        "type": "string",
                        "description": "Specifies whether the backup took place from Sunday to Saturday by displaying 7 digits. 0 stands for backup disabled and 1 stands for backup enabled. The rightmost digit specifies whether the backup took place on Sunday, and the digits from right to left specify whether the backup took place from Monday to Saturday, it's mandatory required to backup twice per week at least. such as: digits \"1100000\" stands for the backup took place on Saturday and Friday.\n"
                    },
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of db instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The creation time of database, formatted by RFC3339 time string.\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration that you will buy the db instance (Default: `1`). The value is `0` when pay by month and the instance will be vaild till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "The type of database engine, possible values are: \"mysql\", \"percona\".\n"
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "The database engine version, possible values are: \"5.5\", \"5.6\", \"5.7\".\n- 5.5/5.6/5.7 for mysql and percona engine.\n"
                    },
                    "expireTime": {
                        "type": "string",
                        "description": "The expiration time of database, formatted by RFC3339 time string.\n"
                    },
                    "instanceStorage": {
                        "type": "integer",
                        "description": "Specifies the allocated storage size in gigabytes (GB), range from 20 to 4500GB. The volume adjustment must be a multiple of 10 GB. The maximum disk volume for SSD type are：\n- 500GB if the memory chosen is equal or less than 6GB;\n- 1000GB if the memory chosen is from 8 to 16GB;\n- 2000GB if the memory chosen is 24GB or 32GB;\n- 3500GB if the memory chosen is 48GB or 64GB;\n- 4500GB if the memory chosen is equal or more than 96GB;\n"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "modifyTime": {
                        "type": "string",
                        "description": "The modification time of database, formatted by RFC3339 time string.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parameterGroup": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port on which the database accepts connections, the default port is 3306 for mysql and percona.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The private IP address assigned to the database instance.\n"
                    },
                    "standbyZone": {
                        "type": "string",
                        "description": "Availability zone where the standby database instance is located for the high availability database instance with multiple zone; The disaster recovery of data center can be activated by switching to the standby database instance for the high availability database instance.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Specifies the status of database, possible values are: `Init`, `Fail`, `Starting`, `Running`, `Shutdown`, `Shutoff`, `Delete`, `Upgrading`, `Promoting`, `Recovering` and `Recover fail`.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of subnet.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to database instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC linked to the database instances.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:udisk/disk:Disk": {
            "description": "Provides a Cloud Disk resource.\n\n\u003e **Note** If the disk have attached to the instance, the instance will reboot automatically to make the change take effect when update the  `disk_size`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst default = ucloud.uaccount.getZone({});\n// Create cloud disk\nconst example = new ucloud.udisk.Disk(\"example\", {\n    availabilityZone: _default.then(_default =\u003e _default.zones[0].id),\n    diskSize: 10,\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\ndefault = ucloud.uaccount.get_zone()\n# Create cloud disk\nexample = ucloud.udisk.Disk(\"example\",\n    availability_zone=default.zones[0].id,\n    disk_size=10)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Ucloud.Uaccount.GetZone.InvokeAsync());\n        // Create cloud disk\n        var example = new Ucloud.Udisk.Disk(\"example\", new Ucloud.Udisk.DiskArgs\n        {\n            AvailabilityZone = @default.Apply(@default =\u003e @default.Zones[0].Id),\n            DiskSize = 10,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/udisk\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := uaccount.GetZone(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = udisk.NewDisk(ctx, \"example\", \u0026udisk.DiskArgs{\n\t\t\tAvailabilityZone: pulumi.String(_default.Zones[0].Id),\n\t\t\tDiskSize:         pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDisk can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:udisk/disk:Disk example bsm-abcdefg\n```\n\n ",
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where cloud disk is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "Charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour. (Default: `month`).\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation of disk, formatted in RFC3339 time string.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The size of disk. Purchase the size of disk in GB. 20-8000 for a cloud disk, 20-8000 for SSD cloud disk . If the disk have attached to the instance, the instance will reboot automatically to make the change take effect when update the  `disk_size`.\n"
                },
                "diskType": {
                    "type": "string",
                    "description": "The type of disk. Possible values are: `data_disk`as cloud disk, `ssd_data_disk` as ssd cloud disk, `rssd_data_disk` as RDMA-SSD cloud disk (the `rssd_data_disk` only be supported in `cn-bj2-05`).(Default: `data_disk`).\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the disk will be vaild till the last day of that month.\n"
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time of disk, formatted in RFC3339 time string.\n"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "The status of disk. Possible values are: `Available`, `InUse`, `Detaching`, `Initializating`, `Failed`, `Cloning`, `Restoring`, `RestoreFailed`.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                }
            },
            "required": [
                "availabilityZone",
                "chargeType",
                "createTime",
                "diskSize",
                "expireTime",
                "name",
                "status"
            ],
            "inputProperties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where cloud disk is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "Charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour. (Default: `month`).\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The size of disk. Purchase the size of disk in GB. 20-8000 for a cloud disk, 20-8000 for SSD cloud disk . If the disk have attached to the instance, the instance will reboot automatically to make the change take effect when update the  `disk_size`.\n"
                },
                "diskType": {
                    "type": "string",
                    "description": "The type of disk. Possible values are: `data_disk`as cloud disk, `ssd_data_disk` as ssd cloud disk, `rssd_data_disk` as RDMA-SSD cloud disk (the `rssd_data_disk` only be supported in `cn-bj2-05`).(Default: `data_disk`).\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the disk will be vaild till the last day of that month.\n"
                },
                "name": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                }
            },
            "requiredInputs": [
                "availabilityZone",
                "diskSize"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Disk resources.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where cloud disk is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).\n"
                    },
                    "chargeType": {
                        "type": "string",
                        "description": "Charge type of disk. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour. (Default: `month`).\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation of disk, formatted in RFC3339 time string.\n"
                    },
                    "diskSize": {
                        "type": "integer",
                        "description": "The size of disk. Purchase the size of disk in GB. 20-8000 for a cloud disk, 20-8000 for SSD cloud disk . If the disk have attached to the instance, the instance will reboot automatically to make the change take effect when update the  `disk_size`.\n"
                    },
                    "diskType": {
                        "type": "string",
                        "description": "The type of disk. Possible values are: `data_disk`as cloud disk, `ssd_data_disk` as ssd cloud disk, `rssd_data_disk` as RDMA-SSD cloud disk (the `rssd_data_disk` only be supported in `cn-bj2-05`).(Default: `data_disk`).\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the disk will be vaild till the last day of that month.\n"
                    },
                    "expireTime": {
                        "type": "string",
                        "description": "The expiration time of disk, formatted in RFC3339 time string.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of disk. Possible values are: `Available`, `InUse`, `Detaching`, `Initializating`, `Failed`, `Cloning`, `Restoring`, `RestoreFailed`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:udisk/diskAttachment:DiskAttachment": {
            "description": "Provides a Cloud Disk Attachment resource for attaching Cloud Disk to UHost Instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst defaultZone = ucloud.uaccount.getZone({});\nconst defaultImage = defaultZone.then(defaultZone =\u003e ucloud.uhost.getImage({\n    availabilityZone: defaultZone.zones[0].id,\n    nameRegex: \"^CentOS 7.[1-2] 64\",\n    imageType: \"base\",\n}));\n// Create cloud disk\nconst defaultDisk = new ucloud.udisk.Disk(\"defaultDisk\", {\n    availabilityZone: defaultZone.then(defaultZone =\u003e defaultZone.zones[0].id),\n    diskSize: 10,\n});\n// Create a web server\nconst web = new ucloud.uhost.Instance(\"web\", {\n    availabilityZone: defaultZone.then(defaultZone =\u003e defaultZone.zones[0].id),\n    instanceType: \"n-basic-2\",\n    imageId: defaultImage.then(defaultImage =\u003e defaultImage.images[0].id),\n    rootPassword: \"wA1234567\",\n    tag: \"tf-example\",\n});\n// attach cloud disk to instance\nconst defaultDiskAttachment = new ucloud.udisk.DiskAttachment(\"defaultDiskAttachment\", {\n    availabilityZone: defaultZone.then(defaultZone =\u003e defaultZone.zones[0].id),\n    diskId: defaultDisk.id,\n    instanceId: web.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\ndefault_zone = ucloud.uaccount.get_zone()\ndefault_image = ucloud.uhost.get_image(availability_zone=default_zone.zones[0].id,\n    name_regex=\"^CentOS 7.[1-2] 64\",\n    image_type=\"base\")\n# Create cloud disk\ndefault_disk = ucloud.udisk.Disk(\"defaultDisk\",\n    availability_zone=default_zone.zones[0].id,\n    disk_size=10)\n# Create a web server\nweb = ucloud.uhost.Instance(\"web\",\n    availability_zone=default_zone.zones[0].id,\n    instance_type=\"n-basic-2\",\n    image_id=default_image.images[0].id,\n    root_password=\"wA1234567\",\n    tag=\"tf-example\")\n# attach cloud disk to instance\ndefault_disk_attachment = ucloud.udisk.DiskAttachment(\"defaultDiskAttachment\",\n    availability_zone=default_zone.zones[0].id,\n    disk_id=default_disk.id,\n    instance_id=web.id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var defaultZone = Output.Create(Ucloud.Uaccount.GetZone.InvokeAsync());\n        var defaultImage = defaultZone.Apply(defaultZone =\u003e Output.Create(Ucloud.Uhost.GetImage.InvokeAsync(new Ucloud.Uhost.GetImageArgs\n        {\n            AvailabilityZone = defaultZone.Zones[0].Id,\n            NameRegex = \"^CentOS 7.[1-2] 64\",\n            ImageType = \"base\",\n        })));\n        // Create cloud disk\n        var defaultDisk = new Ucloud.Udisk.Disk(\"defaultDisk\", new Ucloud.Udisk.DiskArgs\n        {\n            AvailabilityZone = defaultZone.Apply(defaultZone =\u003e defaultZone.Zones[0].Id),\n            DiskSize = 10,\n        });\n        // Create a web server\n        var web = new Ucloud.Uhost.Instance(\"web\", new Ucloud.Uhost.InstanceArgs\n        {\n            AvailabilityZone = defaultZone.Apply(defaultZone =\u003e defaultZone.Zones[0].Id),\n            InstanceType = \"n-basic-2\",\n            ImageId = defaultImage.Apply(defaultImage =\u003e defaultImage.Images[0].Id),\n            RootPassword = \"wA1234567\",\n            Tag = \"tf-example\",\n        });\n        // attach cloud disk to instance\n        var defaultDiskAttachment = new Ucloud.Udisk.DiskAttachment(\"defaultDiskAttachment\", new Ucloud.Udisk.DiskAttachmentArgs\n        {\n            AvailabilityZone = defaultZone.Apply(defaultZone =\u003e defaultZone.Zones[0].Id),\n            DiskId = defaultDisk.Id,\n            InstanceId = web.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/udisk\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdefaultZone, err := uaccount.GetZone(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt0 := defaultZone.Zones[0].Id\n\t\topt1 := \"^CentOS 7.[1-2] 64\"\n\t\topt2 := \"base\"\n\t\tdefaultImage, err := uhost.GetImage(ctx, \u0026uhost.GetImageArgs{\n\t\t\tAvailabilityZone: \u0026opt0,\n\t\t\tNameRegex:        \u0026opt1,\n\t\t\tImageType:        \u0026opt2,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefaultDisk, err := udisk.NewDisk(ctx, \"defaultDisk\", \u0026udisk.DiskArgs{\n\t\t\tAvailabilityZone: pulumi.String(defaultZone.Zones[0].Id),\n\t\t\tDiskSize:         pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tweb, err := uhost.NewInstance(ctx, \"web\", \u0026uhost.InstanceArgs{\n\t\t\tAvailabilityZone: pulumi.String(defaultZone.Zones[0].Id),\n\t\t\tInstanceType:     pulumi.String(\"n-basic-2\"),\n\t\t\tImageId:          pulumi.String(defaultImage.Images[0].Id),\n\t\t\tRootPassword:     pulumi.String(\"wA1234567\"),\n\t\t\tTag:              pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = udisk.NewDiskAttachment(ctx, \"defaultDiskAttachment\", \u0026udisk.DiskAttachmentArgs{\n\t\t\tAvailabilityZone: pulumi.String(defaultZone.Zones[0].Id),\n\t\t\tDiskId:           defaultDisk.ID(),\n\t\t\tInstanceId:       web.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The Zone to attach the disk in.\n"
                },
                "diskId": {
                    "type": "string",
                    "description": "The ID of disk that needs to be attached\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of instance.\n"
                }
            },
            "required": [
                "availabilityZone",
                "diskId",
                "instanceId"
            ],
            "inputProperties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "The Zone to attach the disk in.\n"
                },
                "diskId": {
                    "type": "string",
                    "description": "The ID of disk that needs to be attached\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of instance.\n"
                }
            },
            "requiredInputs": [
                "availabilityZone",
                "diskId",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DiskAttachment resources.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "The Zone to attach the disk in.\n"
                    },
                    "diskId": {
                        "type": "string",
                        "description": "The ID of disk that needs to be attached\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:udpn/uDPNConnection:UDPNConnection": {
            "description": "UDPN (UCloud Dedicated Private Network)，you can use Dedicated Private Network to achieve high-speed, stable, secure, and dedicated communications between different data centers. The most frequent scenario is to create network connection of clusters across regions.\n\n\u003e **VPC Peering Connections with UDPN Connection** The cross-region Dedicated Private Network must be established if the two VPCs located in different regions are expected to be connected.\n\n\u003e **Note** The additional packet head will be added and included in the overall length of packet due to the tunneling UDPN adopted. Since the number of the bytes of packet head is fixed, the bigger data packet is, the less usage will be taken for the packet head.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\n// connect provider's region (cn-bj2) and peer region (cn-sh2)\nconst example = new ucloud.udpn.UDPNConnection(\"example\", {\n    bandwidth: 2,\n    peerRegion: \"cn-sh2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\n# connect provider's region (cn-bj2) and peer region (cn-sh2)\nexample = ucloud.udpn.UDPNConnection(\"example\",\n    bandwidth=2,\n    peer_region=\"cn-sh2\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // connect provider's region (cn-bj2) and peer region (cn-sh2)\n        var example = new Ucloud.Udpn.UDPNConnection(\"example\", new Ucloud.Udpn.UDPNConnectionArgs\n        {\n            Bandwidth = 2,\n            PeerRegion = \"cn-sh2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/udpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := udpn.NewUDPNConnection(ctx, \"example\", \u0026udpn.UDPNConnectionArgs{\n\t\t\tBandwidth:  pulumi.Int(2),\n\t\t\tPeerRegion: pulumi.String(\"cn-sh2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUDPN connection can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:udpn/uDPNConnection:UDPNConnection example udpn-abc123456\n```\n\n ",
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). range from 2 - 1000M. The default value is \"1\"\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "Charge type. Possible values are: \"year\" as pay by year, \"month\" as pay by month, \"dynamic\" as pay by hour. The default value is \"month\".\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for UDPN connection, formatted by RFC3339 time string.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the resource, the default value is \"1\". It is not required when \"dynamic\" (pay by hour), the value is \"0\" when pay by month and the instance will be valid till the last day of that month.\n"
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time for UDPN connection, formatted by RFC3339 time string.\n"
                },
                "peerRegion": {
                    "type": "string",
                    "description": "The correspondent region of dedicated connection, please refer to the region and [availability zone list](https://docs.ucloud.cn/api/summary/regionlist) and [UDPN price list](https://docs.ucloud.cn/network/udpn/udpn_price).\n"
                }
            },
            "required": [
                "createTime",
                "expireTime",
                "peerRegion"
            ],
            "inputProperties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). range from 2 - 1000M. The default value is \"1\"\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "Charge type. Possible values are: \"year\" as pay by year, \"month\" as pay by month, \"dynamic\" as pay by hour. The default value is \"month\".\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the resource, the default value is \"1\". It is not required when \"dynamic\" (pay by hour), the value is \"0\" when pay by month and the instance will be valid till the last day of that month.\n"
                },
                "peerRegion": {
                    "type": "string",
                    "description": "The correspondent region of dedicated connection, please refer to the region and [availability zone list](https://docs.ucloud.cn/api/summary/regionlist) and [UDPN price list](https://docs.ucloud.cn/network/udpn/udpn_price).\n"
                }
            },
            "requiredInputs": [
                "peerRegion"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UDPNConnection resources.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer",
                        "description": "Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). range from 2 - 1000M. The default value is \"1\"\n"
                    },
                    "chargeType": {
                        "type": "string",
                        "description": "Charge type. Possible values are: \"year\" as pay by year, \"month\" as pay by month, \"dynamic\" as pay by hour. The default value is \"month\".\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation for UDPN connection, formatted by RFC3339 time string.\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration that you will buy the resource, the default value is \"1\". It is not required when \"dynamic\" (pay by hour), the value is \"0\" when pay by month and the instance will be valid till the last day of that month.\n"
                    },
                    "expireTime": {
                        "type": "string",
                        "description": "The expiration time for UDPN connection, formatted by RFC3339 time string.\n"
                    },
                    "peerRegion": {
                        "type": "string",
                        "description": "The correspondent region of dedicated connection, please refer to the region and [availability zone list](https://docs.ucloud.cn/api/summary/regionlist) and [UDPN price list](https://docs.ucloud.cn/network/udpn/udpn_price).\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:uhost/instance:Instance": {
            "description": "\n\n\n## Import\n\nInstance can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:uhost/instance:Instance example uhost-abcdefg\n```\n\n ",
            "properties": {
                "allowStoppingForUpdate": {
                    "type": "boolean"
                },
                "autoRenew": {
                    "type": "boolean",
                    "description": "Whether to renew an instance automatically or not.\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where instance is located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                },
                "bootDiskSize": {
                    "type": "integer",
                    "description": "The size of the boot disk, measured in GB (GigaByte). Range: 20-500. The value set of disk size must be larger or equal to `20`(default: `20`) for Linux and `40` (default: `40`) for Windows. The responsive time is a bit longer if the value set is larger than default for local boot disk, and further settings may be required on host instance if the value set is larger than default for cloud boot disk. The disk volume adjustment must be a multiple of 10 GB. In addition, any reduction of boot disk size is not supported.\n"
                },
                "bootDiskType": {
                    "type": "string",
                    "description": "The type of boot disk. Possible values are: `local_normal` and `local_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk. (Default: `local_normal`). The `local_ssd` and `cloud_ssd` are not fully support by all regions as boot disk type, please proceed to UCloud console for more details.\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "cpu": {
                    "type": "integer",
                    "description": "The number of cores of virtual CPU, measured in core.\n"
                },
                "cpuPlatform": {
                    "type": "string"
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for instance, formatted in RFC3339 time string.\n"
                },
                "dataDiskSize": {
                    "type": "integer",
                    "description": "The size of local data disk, measured in GB (GigaByte), 20-2000 for local sata disk and 20-1000 for local ssd disk (all the GPU type instances are included). The volume adjustment must be a multiple of 10 GB. In addition, any reduction of data disk size is not supported.\n"
                },
                "dataDiskType": {
                    "type": "string",
                    "description": "The type of local data disk. Possible values are: `local_normal` and `local_ssd` for local data disk. (Default: `local_normal`). The `local_ssd` is not fully support by all regions as data disk type, please proceed to UCloud console for more details. In addition, the `data_disk_type` must be same as `boot_disk_type` if specified.\n"
                },
                "dataDisks": {
                    "$ref": "#/types/ucloud:uhost/InstanceDataDisks:InstanceDataDisks",
                    "description": "Additional cloud data disks to attach to the instance. `data_disks` configurations only apply on resource creation. The count of `data_disks` can only be one. See data_disks below for details on attributes. When set `data_disks`, the argument `delete_disks_with_instance` must bet set.\n"
                },
                "deleteDisksWithInstance": {
                    "type": "boolean",
                    "description": "Whether the cloud data disks attached instance should be destroyed on instance termination.\n"
                },
                "diskSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:uhost/InstanceDiskSet:InstanceDiskSet"
                    },
                    "description": "It is a nested type which documented below.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time for instance, formatted in RFC3339 time string.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The ID for the image to use for the instance.\n"
                },
                "instanceType": {
                    "type": "string"
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:uhost/InstanceIpSet:InstanceIpSet"
                    },
                    "description": "It is a nested type which documented below.\n"
                },
                "isolationGroup": {
                    "type": "string",
                    "description": "The ID of the associated isolation group.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The size of memory, measured in GB(Gigabyte).\n"
                },
                "minCpuPlatform": {
                    "type": "string",
                    "description": "Specifies a minimum CPU platform for the the VM instance. (Default: `Intel/Auto`). You may refer to [min_cpu_platform](https://docs.ucloud.cn/uhost/introduction/uhost/type_new)\n- The Intel CPU platform:\n- `Intel/Auto` as the Intel CPU platform version will be selected randomly by system;\n- `Intel/IvyBridge` as Intel V2, the version of Intel CPU platform selected by system will be `Intel/IvyBridge` and above;\n- `Intel/Haswell` as Intel V3,  the version of Intel CPU platform selected by system will be `Intel/Haswell` and above;\n- `Intel/Broadwell` as Intel V4, the version of Intel CPU platform selected by system will be `Intel/Broadwell` and above;\n- `Intel/Skylake` as Intel V5, the version of Intel CPU platform selected by system will be `Intel/Skylake` and above;\n- `Intel/Cascadelake` as Intel V6, the version of Intel CPU platform selected by system will be `Intel/Cascadelake`;\n- The AMD CPU platform:\n- `Amd/Auto` as the Amd CPU platform version will be selected randomly by system;\n- `Amd/Epyc2` as the version of Amd CPU platform selected by system will be `Amd/Epyc2` and above;\n"
                },
                "name": {
                    "type": "string"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private IP address assigned to the instance.\n"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of instance. (Default: `\"\"`).\n"
                },
                "rootPassword": {
                    "type": "string"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The ID of the associated security group.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Instance current status. Possible values are `Initializing`, `Starting`, `Running`, `Stopping`, `Stopped`, `Install Fail`, `ResizeFail` and `Rebooting`.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet. If defined `vpc_id`, the `subnet_id` is Required. If not defined `vpc_id` and `subnet_id`, the instance will use the default subnet in the current region.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The user data to customize the startup behaviors when launching the instance. You may refer to [user_data_document](https://docs.ucloud.cn/uhost/guide/metadata/userdata)\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the instance. If not defined `vpc_id`, the instance will use the default VPC in the current region.\n"
                }
            },
            "required": [
                "autoRenew",
                "availabilityZone",
                "bootDiskSize",
                "bootDiskType",
                "chargeType",
                "cpu",
                "cpuPlatform",
                "createTime",
                "dataDiskSize",
                "dataDiskType",
                "diskSets",
                "expireTime",
                "imageId",
                "instanceType",
                "ipSets",
                "isolationGroup",
                "memory",
                "name",
                "privateIp",
                "remark",
                "rootPassword",
                "securityGroup",
                "status",
                "subnetId",
                "vpcId"
            ],
            "inputProperties": {
                "allowStoppingForUpdate": {
                    "type": "boolean"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where instance is located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                },
                "bootDiskSize": {
                    "type": "integer",
                    "description": "The size of the boot disk, measured in GB (GigaByte). Range: 20-500. The value set of disk size must be larger or equal to `20`(default: `20`) for Linux and `40` (default: `40`) for Windows. The responsive time is a bit longer if the value set is larger than default for local boot disk, and further settings may be required on host instance if the value set is larger than default for cloud boot disk. The disk volume adjustment must be a multiple of 10 GB. In addition, any reduction of boot disk size is not supported.\n"
                },
                "bootDiskType": {
                    "type": "string",
                    "description": "The type of boot disk. Possible values are: `local_normal` and `local_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk. (Default: `local_normal`). The `local_ssd` and `cloud_ssd` are not fully support by all regions as boot disk type, please proceed to UCloud console for more details.\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "dataDiskSize": {
                    "type": "integer",
                    "description": "The size of local data disk, measured in GB (GigaByte), 20-2000 for local sata disk and 20-1000 for local ssd disk (all the GPU type instances are included). The volume adjustment must be a multiple of 10 GB. In addition, any reduction of data disk size is not supported.\n"
                },
                "dataDiskType": {
                    "type": "string",
                    "description": "The type of local data disk. Possible values are: `local_normal` and `local_ssd` for local data disk. (Default: `local_normal`). The `local_ssd` is not fully support by all regions as data disk type, please proceed to UCloud console for more details. In addition, the `data_disk_type` must be same as `boot_disk_type` if specified.\n"
                },
                "dataDisks": {
                    "$ref": "#/types/ucloud:uhost/InstanceDataDisks:InstanceDataDisks",
                    "description": "Additional cloud data disks to attach to the instance. `data_disks` configurations only apply on resource creation. The count of `data_disks` can only be one. See data_disks below for details on attributes. When set `data_disks`, the argument `delete_disks_with_instance` must bet set.\n"
                },
                "deleteDisksWithInstance": {
                    "type": "boolean",
                    "description": "Whether the cloud data disks attached instance should be destroyed on instance termination.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The ID for the image to use for the instance.\n"
                },
                "instanceType": {
                    "type": "string"
                },
                "isolationGroup": {
                    "type": "string",
                    "description": "The ID of the associated isolation group.\n"
                },
                "minCpuPlatform": {
                    "type": "string",
                    "description": "Specifies a minimum CPU platform for the the VM instance. (Default: `Intel/Auto`). You may refer to [min_cpu_platform](https://docs.ucloud.cn/uhost/introduction/uhost/type_new)\n- The Intel CPU platform:\n- `Intel/Auto` as the Intel CPU platform version will be selected randomly by system;\n- `Intel/IvyBridge` as Intel V2, the version of Intel CPU platform selected by system will be `Intel/IvyBridge` and above;\n- `Intel/Haswell` as Intel V3,  the version of Intel CPU platform selected by system will be `Intel/Haswell` and above;\n- `Intel/Broadwell` as Intel V4, the version of Intel CPU platform selected by system will be `Intel/Broadwell` and above;\n- `Intel/Skylake` as Intel V5, the version of Intel CPU platform selected by system will be `Intel/Skylake` and above;\n- `Intel/Cascadelake` as Intel V6, the version of Intel CPU platform selected by system will be `Intel/Cascadelake`;\n- The AMD CPU platform:\n- `Amd/Auto` as the Amd CPU platform version will be selected randomly by system;\n- `Amd/Epyc2` as the version of Amd CPU platform selected by system will be `Amd/Epyc2` and above;\n"
                },
                "name": {
                    "type": "string"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private IP address assigned to the instance.\n"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of instance. (Default: `\"\"`).\n"
                },
                "rootPassword": {
                    "type": "string"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The ID of the associated security group.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet. If defined `vpc_id`, the `subnet_id` is Required. If not defined `vpc_id` and `subnet_id`, the instance will use the default subnet in the current region.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The user data to customize the startup behaviors when launching the instance. You may refer to [user_data_document](https://docs.ucloud.cn/uhost/guide/metadata/userdata)\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the instance. If not defined `vpc_id`, the instance will use the default VPC in the current region.\n"
                }
            },
            "requiredInputs": [
                "availabilityZone",
                "imageId",
                "instanceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "allowStoppingForUpdate": {
                        "type": "boolean"
                    },
                    "autoRenew": {
                        "type": "boolean",
                        "description": "Whether to renew an instance automatically or not.\n"
                    },
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where instance is located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                    },
                    "bootDiskSize": {
                        "type": "integer",
                        "description": "The size of the boot disk, measured in GB (GigaByte). Range: 20-500. The value set of disk size must be larger or equal to `20`(default: `20`) for Linux and `40` (default: `40`) for Windows. The responsive time is a bit longer if the value set is larger than default for local boot disk, and further settings may be required on host instance if the value set is larger than default for cloud boot disk. The disk volume adjustment must be a multiple of 10 GB. In addition, any reduction of boot disk size is not supported.\n"
                    },
                    "bootDiskType": {
                        "type": "string",
                        "description": "The type of boot disk. Possible values are: `local_normal` and `local_ssd` for local boot disk, `cloud_ssd` for cloud SSD boot disk. (Default: `local_normal`). The `local_ssd` and `cloud_ssd` are not fully support by all regions as boot disk type, please proceed to UCloud console for more details.\n"
                    },
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                    },
                    "cpu": {
                        "type": "integer",
                        "description": "The number of cores of virtual CPU, measured in core.\n"
                    },
                    "cpuPlatform": {
                        "type": "string"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation for instance, formatted in RFC3339 time string.\n"
                    },
                    "dataDiskSize": {
                        "type": "integer",
                        "description": "The size of local data disk, measured in GB (GigaByte), 20-2000 for local sata disk and 20-1000 for local ssd disk (all the GPU type instances are included). The volume adjustment must be a multiple of 10 GB. In addition, any reduction of data disk size is not supported.\n"
                    },
                    "dataDiskType": {
                        "type": "string",
                        "description": "The type of local data disk. Possible values are: `local_normal` and `local_ssd` for local data disk. (Default: `local_normal`). The `local_ssd` is not fully support by all regions as data disk type, please proceed to UCloud console for more details. In addition, the `data_disk_type` must be same as `boot_disk_type` if specified.\n"
                    },
                    "dataDisks": {
                        "$ref": "#/types/ucloud:uhost/InstanceDataDisks:InstanceDataDisks",
                        "description": "Additional cloud data disks to attach to the instance. `data_disks` configurations only apply on resource creation. The count of `data_disks` can only be one. See data_disks below for details on attributes. When set `data_disks`, the argument `delete_disks_with_instance` must bet set.\n"
                    },
                    "deleteDisksWithInstance": {
                        "type": "boolean",
                        "description": "Whether the cloud data disks attached instance should be destroyed on instance termination.\n"
                    },
                    "diskSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:uhost/InstanceDiskSet:InstanceDiskSet"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration that you will buy the instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                    },
                    "expireTime": {
                        "type": "string",
                        "description": "The expiration time for instance, formatted in RFC3339 time string.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The ID for the image to use for the instance.\n"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "ipSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:uhost/InstanceIpSet:InstanceIpSet"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "isolationGroup": {
                        "type": "string",
                        "description": "The ID of the associated isolation group.\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The size of memory, measured in GB(Gigabyte).\n"
                    },
                    "minCpuPlatform": {
                        "type": "string",
                        "description": "Specifies a minimum CPU platform for the the VM instance. (Default: `Intel/Auto`). You may refer to [min_cpu_platform](https://docs.ucloud.cn/uhost/introduction/uhost/type_new)\n- The Intel CPU platform:\n- `Intel/Auto` as the Intel CPU platform version will be selected randomly by system;\n- `Intel/IvyBridge` as Intel V2, the version of Intel CPU platform selected by system will be `Intel/IvyBridge` and above;\n- `Intel/Haswell` as Intel V3,  the version of Intel CPU platform selected by system will be `Intel/Haswell` and above;\n- `Intel/Broadwell` as Intel V4, the version of Intel CPU platform selected by system will be `Intel/Broadwell` and above;\n- `Intel/Skylake` as Intel V5, the version of Intel CPU platform selected by system will be `Intel/Skylake` and above;\n- `Intel/Cascadelake` as Intel V6, the version of Intel CPU platform selected by system will be `Intel/Cascadelake`;\n- The AMD CPU platform:\n- `Amd/Auto` as the Amd CPU platform version will be selected randomly by system;\n- `Amd/Epyc2` as the version of Amd CPU platform selected by system will be `Amd/Epyc2` and above;\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The private IP address assigned to the instance.\n"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of instance. (Default: `\"\"`).\n"
                    },
                    "rootPassword": {
                        "type": "string"
                    },
                    "securityGroup": {
                        "type": "string",
                        "description": "The ID of the associated security group.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Instance current status. Possible values are `Initializing`, `Starting`, `Running`, `Stopping`, `Stopped`, `Install Fail`, `ResizeFail` and `Rebooting`.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of subnet. If defined `vpc_id`, the `subnet_id` is Required. If not defined `vpc_id` and `subnet_id`, the instance will use the default subnet in the current region.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "The user data to customize the startup behaviors when launching the instance. You may refer to [user_data_document](https://docs.ucloud.cn/uhost/guide/metadata/userdata)\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC linked to the instance. If not defined `vpc_id`, the instance will use the default VPC in the current region.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:uhost/isolationGroup:IsolationGroup": {
            "description": "Provides an Isolation Group resource. The Isolation Group is a logical group of UHost instance, which ensure that each UHost instance within a group is on a different physical machine. Up to seven UHost instance can be added per isolation group in a single availability_zone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst foo = new ucloud.uhost.IsolationGroup(\"foo\", {\n    remark: \"test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nfoo = ucloud.uhost.IsolationGroup(\"foo\", remark=\"test\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Ucloud.Uhost.IsolationGroup(\"foo\", new Ucloud.Uhost.IsolationGroupArgs\n        {\n            Remark = \"test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := uhost.NewIsolationGroup(ctx, \"foo\", \u0026uhost.IsolationGroupArgs{\n\t\t\tRemark: pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIsolation Group can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:uhost/isolationGroup:IsolationGroup example ig-abc123456\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the isolation group. (Default: `\"\"`).\n"
                }
            },
            "required": [
                "name",
                "remark"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the isolation group. (Default: `\"\"`).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IsolationGroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the isolation group. (Default: `\"\"`).\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:ulb/lB:LB": {
            "description": "Provides a Load Balancer resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst web = new ucloud.ulb.LB(\"web\", {\n    tag: \"tf-example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nweb = ucloud.ulb.LB(\"web\", tag=\"tf-example\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var web = new Ucloud.Ulb.LB(\"web\", new Ucloud.Ulb.LBArgs\n        {\n            Tag = \"tf-example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ulb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ulb.NewLB(ctx, \"web\", \u0026ulb.LBArgs{\n\t\t\tTag: pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLB can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:ulb/lB:LB example ulb-abc123456\n```\n\n ",
            "properties": {
                "chargeType": {
                    "type": "string",
                    "description": ", argument `charge_type` is deprecated for optimizing parameters.\n",
                    "deprecationMessage": "attribute `charge_type` is deprecated for optimizing parameters"
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for load balancer, formatted in RFC3339 time string.\n"
                },
                "expireTime": {
                    "type": "string",
                    "description": "**Deprecated** attribute `expire_time` is deprecated for optimizing outputs.\n",
                    "deprecationMessage": "attribute `expire_time` is deprecated for optimizing outputs"
                },
                "internal": {
                    "type": "boolean",
                    "description": "Indicate whether the load balancer is intranet mode.(Default: `\"false\"`)\n"
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:ulb/LBIpSet:LBIpSet"
                    },
                    "description": "It is a nested type which documented below.\n"
                },
                "name": {
                    "type": "string"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The IP address of intranet IP. It is `\"\"` if `internal` is `false`.\n"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the load balancer. (Default: `\"\"`).\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The ID of the associated security group. The security_group only takes effect for ULB instances of request_proxy mode and extranet mode at present.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet that intranet load balancer belongs to. This argument is not required if default subnet.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to load balancer, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC linked to the Load balancer, This argument is not required if default VPC.\n"
                }
            },
            "required": [
                "createTime",
                "expireTime",
                "internal",
                "ipSets",
                "name",
                "privateIp",
                "remark",
                "securityGroup",
                "subnetId",
                "vpcId"
            ],
            "inputProperties": {
                "chargeType": {
                    "type": "string",
                    "description": ", argument `charge_type` is deprecated for optimizing parameters.\n",
                    "deprecationMessage": "attribute `charge_type` is deprecated for optimizing parameters"
                },
                "internal": {
                    "type": "boolean",
                    "description": "Indicate whether the load balancer is intranet mode.(Default: `\"false\"`)\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the load balancer. (Default: `\"\"`).\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The ID of the associated security group. The security_group only takes effect for ULB instances of request_proxy mode and extranet mode at present.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet that intranet load balancer belongs to. This argument is not required if default subnet.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to load balancer, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC linked to the Load balancer, This argument is not required if default VPC.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LB resources.\n",
                "properties": {
                    "chargeType": {
                        "type": "string",
                        "description": ", argument `charge_type` is deprecated for optimizing parameters.\n",
                        "deprecationMessage": "attribute `charge_type` is deprecated for optimizing parameters"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation for load balancer, formatted in RFC3339 time string.\n"
                    },
                    "expireTime": {
                        "type": "string",
                        "description": "**Deprecated** attribute `expire_time` is deprecated for optimizing outputs.\n",
                        "deprecationMessage": "attribute `expire_time` is deprecated for optimizing outputs"
                    },
                    "internal": {
                        "type": "boolean",
                        "description": "Indicate whether the load balancer is intranet mode.(Default: `\"false\"`)\n"
                    },
                    "ipSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:ulb/LBIpSet:LBIpSet"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The IP address of intranet IP. It is `\"\"` if `internal` is `false`.\n"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the load balancer. (Default: `\"\"`).\n"
                    },
                    "securityGroup": {
                        "type": "string",
                        "description": "The ID of the associated security group. The security_group only takes effect for ULB instances of request_proxy mode and extranet mode at present.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of subnet that intranet load balancer belongs to. This argument is not required if default subnet.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to load balancer, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of the VPC linked to the Load balancer, This argument is not required if default VPC.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:ulb/lBAttachment:LBAttachment": {
            "description": "Provides a Load Balancer Attachment resource for attaching Load Balancer to UHost Instance, etc.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst defaultImage = ucloud.uhost.getImage({\n    availabilityZone: \"cn-bj2-04\",\n    nameRegex: \"^CentOS 6.5 64\",\n    imageType: \"base\",\n});\n// Create Load Balancer\nconst webLB = new ucloud.ulb.LB(\"webLB\", {tag: \"tf-example\"});\n// Create Load Balancer Listener with http protocol\nconst defaultLBListener = new ucloud.ulb.LBListener(\"defaultLBListener\", {\n    loadBalancerId: webLB.id,\n    protocol: \"http\",\n});\n// Create web server\nconst webInstance = new ucloud.uhost.Instance(\"webInstance\", {\n    instanceType: \"n-basic-2\",\n    availabilityZone: \"cn-bj2-04\",\n    rootPassword: \"wA1234567\",\n    imageId: defaultImage.then(defaultImage =\u003e defaultImage.images[0].id),\n    tag: \"tf-example\",\n});\n// Attach instances to Load Balancer\nconst example = new ucloud.ulb.LBAttachment(\"example\", {\n    loadBalancerId: webLB.id,\n    listenerId: defaultLBListener.id,\n    resourceId: webInstance.id,\n    port: 80,\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\ndefault_image = ucloud.uhost.get_image(availability_zone=\"cn-bj2-04\",\n    name_regex=\"^CentOS 6.5 64\",\n    image_type=\"base\")\n# Create Load Balancer\nweb_lb = ucloud.ulb.LB(\"webLB\", tag=\"tf-example\")\n# Create Load Balancer Listener with http protocol\ndefault_lb_listener = ucloud.ulb.LBListener(\"defaultLBListener\",\n    load_balancer_id=web_lb.id,\n    protocol=\"http\")\n# Create web server\nweb_instance = ucloud.uhost.Instance(\"webInstance\",\n    instance_type=\"n-basic-2\",\n    availability_zone=\"cn-bj2-04\",\n    root_password=\"wA1234567\",\n    image_id=default_image.images[0].id,\n    tag=\"tf-example\")\n# Attach instances to Load Balancer\nexample = ucloud.ulb.LBAttachment(\"example\",\n    load_balancer_id=web_lb.id,\n    listener_id=default_lb_listener.id,\n    resource_id=web_instance.id,\n    port=80)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var defaultImage = Output.Create(Ucloud.Uhost.GetImage.InvokeAsync(new Ucloud.Uhost.GetImageArgs\n        {\n            AvailabilityZone = \"cn-bj2-04\",\n            NameRegex = \"^CentOS 6.5 64\",\n            ImageType = \"base\",\n        }));\n        // Create Load Balancer\n        var webLB = new Ucloud.Ulb.LB(\"webLB\", new Ucloud.Ulb.LBArgs\n        {\n            Tag = \"tf-example\",\n        });\n        // Create Load Balancer Listener with http protocol\n        var defaultLBListener = new Ucloud.Ulb.LBListener(\"defaultLBListener\", new Ucloud.Ulb.LBListenerArgs\n        {\n            LoadBalancerId = webLB.Id,\n            Protocol = \"http\",\n        });\n        // Create web server\n        var webInstance = new Ucloud.Uhost.Instance(\"webInstance\", new Ucloud.Uhost.InstanceArgs\n        {\n            InstanceType = \"n-basic-2\",\n            AvailabilityZone = \"cn-bj2-04\",\n            RootPassword = \"wA1234567\",\n            ImageId = defaultImage.Apply(defaultImage =\u003e defaultImage.Images[0].Id),\n            Tag = \"tf-example\",\n        });\n        // Attach instances to Load Balancer\n        var example = new Ucloud.Ulb.LBAttachment(\"example\", new Ucloud.Ulb.LBAttachmentArgs\n        {\n            LoadBalancerId = webLB.Id,\n            ListenerId = defaultLBListener.Id,\n            ResourceId = webInstance.Id,\n            Port = 80,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ulb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"cn-bj2-04\"\n\t\topt1 := \"^CentOS 6.5 64\"\n\t\topt2 := \"base\"\n\t\tdefaultImage, err := uhost.GetImage(ctx, \u0026uhost.GetImageArgs{\n\t\t\tAvailabilityZone: \u0026opt0,\n\t\t\tNameRegex:        \u0026opt1,\n\t\t\tImageType:        \u0026opt2,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twebLB, err := ulb.NewLB(ctx, \"webLB\", \u0026ulb.LBArgs{\n\t\t\tTag: pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefaultLBListener, err := ulb.NewLBListener(ctx, \"defaultLBListener\", \u0026ulb.LBListenerArgs{\n\t\t\tLoadBalancerId: webLB.ID(),\n\t\t\tProtocol:       pulumi.String(\"http\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twebInstance, err := uhost.NewInstance(ctx, \"webInstance\", \u0026uhost.InstanceArgs{\n\t\t\tInstanceType:     pulumi.String(\"n-basic-2\"),\n\t\t\tAvailabilityZone: pulumi.String(\"cn-bj2-04\"),\n\t\t\tRootPassword:     pulumi.String(\"wA1234567\"),\n\t\t\tImageId:          pulumi.String(defaultImage.Images[0].Id),\n\t\t\tTag:              pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ulb.NewLBAttachment(ctx, \"example\", \u0026ulb.LBAttachmentArgs{\n\t\t\tLoadBalancerId: webLB.ID(),\n\t\t\tListenerId:     defaultLBListener.ID(),\n\t\t\tResourceId:     webInstance.ID(),\n\t\t\tPort:           pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLB Listener can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:ulb/lBAttachment:LBAttachment example backend-abcdefg\n```\n\n ",
            "properties": {
                "listenerId": {
                    "type": "string",
                    "description": "The ID of a listener server.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of a load balancer.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private ip address for backend servers.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of a backend server.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": ", attribute `resource_type` is deprecated for optimizing parameters.\n",
                    "deprecationMessage": "attribute `resource_type` is deprecated for optimizing parameters"
                },
                "status": {
                    "type": "string",
                    "description": "The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.\n"
                }
            },
            "required": [
                "listenerId",
                "loadBalancerId",
                "privateIp",
                "resourceId",
                "resourceType",
                "status"
            ],
            "inputProperties": {
                "listenerId": {
                    "type": "string",
                    "description": "The ID of a listener server.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of a load balancer.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of a backend server.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": ", attribute `resource_type` is deprecated for optimizing parameters.\n",
                    "deprecationMessage": "attribute `resource_type` is deprecated for optimizing parameters"
                }
            },
            "requiredInputs": [
                "listenerId",
                "loadBalancerId",
                "resourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LBAttachment resources.\n",
                "properties": {
                    "listenerId": {
                        "type": "string",
                        "description": "The ID of a listener server.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The ID of a load balancer.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The listening port of the backend server, range: 1-65535, (Default: `80`). Backend server port have the following restrictions: If the LB listener type is `request_proxy`, the backend serve can add different ports to implement different service instances of the same IP. Else if LB listener type is `packets_transmit`, the port of the backend server must be consistent with the LB listening port.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The private ip address for backend servers.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of a backend server.\n"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": ", attribute `resource_type` is deprecated for optimizing parameters.\n",
                        "deprecationMessage": "attribute `resource_type` is deprecated for optimizing parameters"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of backend servers. Possible values are: `normalRunning`, `exceptionRunning`.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:ulb/lBListener:LBListener": {
            "description": "Provides a Load Balancer Listener resource.\n\n\u003e **Note** This `listen_type` only support when `protocol` is `tcp` in the extranet mode and the default value is `request_proxy`. In addition, in the extranet mode, the `listen_type` is `request_proxy` if `protocol`is `http` or `https`, the `listen_type` is `packets_transmit` if `protocol`is `udp`. In the intranet mode, the `listen_type` is `packets_transmit`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst web = new ucloud.ulb.LB(\"web\", {tag: \"tf-example\"});\nconst example = new ucloud.ulb.LBListener(\"example\", {\n    loadBalancerId: web.id,\n    protocol: \"http\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nweb = ucloud.ulb.LB(\"web\", tag=\"tf-example\")\nexample = ucloud.ulb.LBListener(\"example\",\n    load_balancer_id=web.id,\n    protocol=\"http\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var web = new Ucloud.Ulb.LB(\"web\", new Ucloud.Ulb.LBArgs\n        {\n            Tag = \"tf-example\",\n        });\n        var example = new Ucloud.Ulb.LBListener(\"example\", new Ucloud.Ulb.LBListenerArgs\n        {\n            LoadBalancerId = web.Id,\n            Protocol = \"http\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ulb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tweb, err := ulb.NewLB(ctx, \"web\", \u0026ulb.LBArgs{\n\t\t\tTag: pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ulb.NewLBListener(ctx, \"example\", \u0026ulb.LBListenerArgs{\n\t\t\tLoadBalancerId: web.ID(),\n\t\t\tProtocol:       pulumi.String(\"http\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLB Listener can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:ulb/lBListener:LBListener example vserver-abcdefg\n```\n\n ",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Health check domain checking.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "Health check method. Possible values are `port` as port checking and `path` as http checking.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listen_type` is `request_proxy`, range: 60-900 when `listen_type` is `packets_transmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.\n"
                },
                "listenType": {
                    "type": "string",
                    "description": "The type of listener. Possible values are `request_proxy` and `packets_transmit`. When `packets_transmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of load balancer instance.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistent_hash`, `source_port` , `consistent_hash_port`, `weight_roundrobin` and `leastconn`. (Default: `roundrobin`).\n- The `consistent_hash`, `source_port` , `consistent_hash_port`, `roundrobin`, `source` and `weight_roundrobin` are valid if `listen_type` is `packets_transmit`.\n- The `roundrobin`, `source` and `weight_roundrobin` and `leastconn` are valid if `listen_type` is `request_proxy`.\n"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string",
                    "description": "Health check path checking.\n"
                },
                "persistence": {
                    "type": "string",
                    "description": "Indicate whether the persistence session is enabled, it is invalid if `persistence_type` is `none`, an auto-generated string will be exported if `persistence_type` is `server_insert`, a custom string will be exported if `persistence_type` is `user_defined`.\n"
                },
                "persistenceType": {
                    "type": "string",
                    "description": "The type of session persistence of listener. Possible values are: `none` as disabled, `server_insert` as auto-generated key and `user_defined` as customized key. (Default: `none`).\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Listener protocol. Possible values: `http`, `https`, `tcp` if `listen_type` is `request_proxy`, `tcp` and `udp` if `listen_type` is `packets_transmit`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.\n"
                }
            },
            "required": [
                "domain",
                "healthCheckType",
                "idleTimeout",
                "listenType",
                "loadBalancerId",
                "name",
                "path",
                "persistence",
                "port",
                "protocol",
                "status"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "Health check domain checking.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "Health check method. Possible values are `port` as port checking and `path` as http checking.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listen_type` is `request_proxy`, range: 60-900 when `listen_type` is `packets_transmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.\n"
                },
                "listenType": {
                    "type": "string",
                    "description": "The type of listener. Possible values are `request_proxy` and `packets_transmit`. When `packets_transmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of load balancer instance.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistent_hash`, `source_port` , `consistent_hash_port`, `weight_roundrobin` and `leastconn`. (Default: `roundrobin`).\n- The `consistent_hash`, `source_port` , `consistent_hash_port`, `roundrobin`, `source` and `weight_roundrobin` are valid if `listen_type` is `packets_transmit`.\n- The `roundrobin`, `source` and `weight_roundrobin` and `leastconn` are valid if `listen_type` is `request_proxy`.\n"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string",
                    "description": "Health check path checking.\n"
                },
                "persistence": {
                    "type": "string",
                    "description": "Indicate whether the persistence session is enabled, it is invalid if `persistence_type` is `none`, an auto-generated string will be exported if `persistence_type` is `server_insert`, a custom string will be exported if `persistence_type` is `user_defined`.\n"
                },
                "persistenceType": {
                    "type": "string",
                    "description": "The type of session persistence of listener. Possible values are: `none` as disabled, `server_insert` as auto-generated key and `user_defined` as customized key. (Default: `none`).\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Listener protocol. Possible values: `http`, `https`, `tcp` if `listen_type` is `request_proxy`, `tcp` and `udp` if `listen_type` is `packets_transmit`.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LBListener resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "Health check domain checking.\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "Health check method. Possible values are `port` as port checking and `path` as http checking.\n"
                    },
                    "idleTimeout": {
                        "type": "integer",
                        "description": "Keep alive timeout of the connection between the client and LB, measured in second. Range: 0-86400 when `listen_type` is `request_proxy`, range: 60-900 when `listen_type` is `packets_transmit` (Default: `60`). The connection will be closed as soon as no response between the client and LB if it set by `0`.\n"
                    },
                    "listenType": {
                        "type": "string",
                        "description": "The type of listener. Possible values are `request_proxy` and `packets_transmit`. When `packets_transmit` was specified, you need to config the instances by yourself if the instances attach to the load balancer. You may refer to [configuration instruction](https://docs.ucloud.cn/network/ulb/fast/createulb/vservertype).\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The ID of load balancer instance.\n"
                    },
                    "method": {
                        "type": "string",
                        "description": "The load balancer method in which the listener is. Possible values are: `roundrobin`, `source`, `consistent_hash`, `source_port` , `consistent_hash_port`, `weight_roundrobin` and `leastconn`. (Default: `roundrobin`).\n- The `consistent_hash`, `source_port` , `consistent_hash_port`, `roundrobin`, `source` and `weight_roundrobin` are valid if `listen_type` is `packets_transmit`.\n- The `roundrobin`, `source` and `weight_roundrobin` and `leastconn` are valid if `listen_type` is `request_proxy`.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "Health check path checking.\n"
                    },
                    "persistence": {
                        "type": "string",
                        "description": "Indicate whether the persistence session is enabled, it is invalid if `persistence_type` is `none`, an auto-generated string will be exported if `persistence_type` is `server_insert`, a custom string will be exported if `persistence_type` is `user_defined`.\n"
                    },
                    "persistenceType": {
                        "type": "string",
                        "description": "The type of session persistence of listener. Possible values are: `none` as disabled, `server_insert` as auto-generated key and `user_defined` as customized key. (Default: `none`).\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port opened on the listeners to receive requests, range: 1-65535. The default value: `80` as `protocol` is `http`, `443` as `protocol` is `https`, `1024` as `protocol` is `tcp` or `udp`.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Listener protocol. Possible values: `http`, `https`, `tcp` if `listen_type` is `request_proxy`, `tcp` and `udp` if `listen_type` is `packets_transmit`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Listener status. Possible values are: `allNormal` for all resource functioning well, `partNormal` for partial resource functioning well and `allException` for all resource functioning exceptional.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:ulb/lBRule:LBRule": {
            "description": "Provides a Load Balancer Rule resource to add content forwarding policies for Load Balancer backend resource.\n \n\u003e **Note** The Load Balancer Rule can only be define while the `protocol` of lb listener is one of HTTP and HTTPS. In addition, should set one of `domain` and `path` if defined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst defaultImage = ucloud.uhost.getImage({\n    availabilityZone: \"cn-bj2-02\",\n    nameRegex: \"^CentOS 6.5 64\",\n    imageType: \"base\",\n});\nconst webLB = new ucloud.ulb.LB(\"webLB\", {tag: \"tf-example\"});\nconst defaultLBListener = new ucloud.ulb.LBListener(\"defaultLBListener\", {\n    loadBalancerId: webLB.id,\n    protocol: \"http\",\n});\nconst webInstance = new ucloud.uhost.Instance(\"webInstance\", {\n    instanceType: \"n-basic-2\",\n    availabilityZone: \"cn-bj2-02\",\n    rootPassword: \"wA1234567\",\n    imageId: defaultImage.then(defaultImage =\u003e defaultImage.images[0].id),\n    tag: \"tf-example\",\n});\nconst defaultLBAttachment = new ucloud.ulb.LBAttachment(\"defaultLBAttachment\", {\n    loadBalancerId: webLB.id,\n    listenerId: defaultLBListener.id,\n    resourceType: \"instance\",\n    resourceId: webInstance.id,\n    port: 80,\n});\nconst example = new ucloud.ulb.LBRule(\"example\", {\n    loadBalancerId: webLB.id,\n    listenerId: defaultLBListener.id,\n    backendIds: [defaultLBAttachment].map(__item =\u003e __item.id),\n    domain: \"www.ucloud.cn\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\ndefault_image = ucloud.uhost.get_image(availability_zone=\"cn-bj2-02\",\n    name_regex=\"^CentOS 6.5 64\",\n    image_type=\"base\")\nweb_lb = ucloud.ulb.LB(\"webLB\", tag=\"tf-example\")\ndefault_lb_listener = ucloud.ulb.LBListener(\"defaultLBListener\",\n    load_balancer_id=web_lb.id,\n    protocol=\"http\")\nweb_instance = ucloud.uhost.Instance(\"webInstance\",\n    instance_type=\"n-basic-2\",\n    availability_zone=\"cn-bj2-02\",\n    root_password=\"wA1234567\",\n    image_id=default_image.images[0].id,\n    tag=\"tf-example\")\ndefault_lb_attachment = ucloud.ulb.LBAttachment(\"defaultLBAttachment\",\n    load_balancer_id=web_lb.id,\n    listener_id=default_lb_listener.id,\n    resource_type=\"instance\",\n    resource_id=web_instance.id,\n    port=80)\nexample = ucloud.ulb.LBRule(\"example\",\n    load_balancer_id=web_lb.id,\n    listener_id=default_lb_listener.id,\n    backend_ids=[__item.id for __item in [default_lb_attachment]],\n    domain=\"www.ucloud.cn\")\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var defaultImage = Output.Create(Ucloud.Uhost.GetImage.InvokeAsync(new Ucloud.Uhost.GetImageArgs\n        {\n            AvailabilityZone = \"cn-bj2-02\",\n            NameRegex = \"^CentOS 6.5 64\",\n            ImageType = \"base\",\n        }));\n        var webLB = new Ucloud.Ulb.LB(\"webLB\", new Ucloud.Ulb.LBArgs\n        {\n            Tag = \"tf-example\",\n        });\n        var defaultLBListener = new Ucloud.Ulb.LBListener(\"defaultLBListener\", new Ucloud.Ulb.LBListenerArgs\n        {\n            LoadBalancerId = webLB.Id,\n            Protocol = \"http\",\n        });\n        var webInstance = new Ucloud.Uhost.Instance(\"webInstance\", new Ucloud.Uhost.InstanceArgs\n        {\n            InstanceType = \"n-basic-2\",\n            AvailabilityZone = \"cn-bj2-02\",\n            RootPassword = \"wA1234567\",\n            ImageId = defaultImage.Apply(defaultImage =\u003e defaultImage.Images[0].Id),\n            Tag = \"tf-example\",\n        });\n        var defaultLBAttachment = new Ucloud.Ulb.LBAttachment(\"defaultLBAttachment\", new Ucloud.Ulb.LBAttachmentArgs\n        {\n            LoadBalancerId = webLB.Id,\n            ListenerId = defaultLBListener.Id,\n            ResourceType = \"instance\",\n            ResourceId = webInstance.Id,\n            Port = 80,\n        });\n        var example = new Ucloud.Ulb.LBRule(\"example\", new Ucloud.Ulb.LBRuleArgs\n        {\n            LoadBalancerId = webLB.Id,\n            ListenerId = defaultLBListener.Id,\n            BackendIds = \n            {\n                defaultLBAttachment,\n            }.Select(__item =\u003e __item.Id).ToList(),\n            Domain = \"www.ucloud.cn\",\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLB Listener can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:ulb/lBRule:LBRule example rule-abcdefg\n```\n\n ",
            "properties": {
                "backendIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the backend servers where rule applies, this argument is populated base on the `backend_id` responded from `lb_attachment` create.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.\n"
                },
                "listenerId": {
                    "type": "string",
                    "description": "The ID of a listener server.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of a load balancer.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.\n"
                }
            },
            "required": [
                "backendIds",
                "listenerId",
                "loadBalancerId"
            ],
            "inputProperties": {
                "backendIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the backend servers where rule applies, this argument is populated base on the `backend_id` responded from `lb_attachment` create.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.\n"
                },
                "listenerId": {
                    "type": "string",
                    "description": "The ID of a listener server.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of a load balancer.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.\n"
                }
            },
            "requiredInputs": [
                "backendIds",
                "listenerId",
                "loadBalancerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LBRule resources.\n",
                "properties": {
                    "backendIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the backend servers where rule applies, this argument is populated base on the `backend_id` responded from `lb_attachment` create.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.\n"
                    },
                    "listenerId": {
                        "type": "string",
                        "description": "The ID of a listener server.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The ID of a load balancer.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of Content forward matching fields. `path` and `domain` cannot coexist. `path` and `domain` must be filled in one.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:ulb/lBSsl:LBSsl": {
            "description": "Provides a Load Balancer SSL certificate resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\nimport * from \"fs\";\n\nconst _default = new ucloud.ulb.LBSsl(\"default\", {\n    privateKey: fs.readFileSync(\"private.key\"),\n    userCert: fs.readFileSync(\"user.crt\"),\n    caCert: fs.readFileSync(\"ca.crt\"),\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\ndefault = ucloud.ulb.LBSsl(\"default\",\n    private_key=(lambda path: open(path).read())(\"private.key\"),\n    user_cert=(lambda path: open(path).read())(\"user.crt\"),\n    ca_cert=(lambda path: open(path).read())(\"ca.crt\"))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Ucloud.Ulb.LBSsl(\"default\", new Ucloud.Ulb.LBSslArgs\n        {\n            PrivateKey = File.ReadAllText(\"private.key\"),\n            UserCert = File.ReadAllText(\"user.crt\"),\n            CaCert = File.ReadAllText(\"ca.crt\"),\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "caCert": {
                    "type": "string",
                    "description": "The content of the CA certificate about ssl certificate.\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for lb ssl, formatted in RFC3339 time string.\n"
                },
                "name": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The content of the private key about ssl certificate.\n"
                },
                "userCert": {
                    "type": "string",
                    "description": "The content of the user certificate about ssl certificate.\n"
                }
            },
            "required": [
                "createTime",
                "name",
                "privateKey",
                "userCert"
            ],
            "inputProperties": {
                "caCert": {
                    "type": "string",
                    "description": "The content of the CA certificate about ssl certificate.\n"
                },
                "name": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The content of the private key about ssl certificate.\n"
                },
                "userCert": {
                    "type": "string",
                    "description": "The content of the user certificate about ssl certificate.\n"
                }
            },
            "requiredInputs": [
                "privateKey",
                "userCert"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LBSsl resources.\n",
                "properties": {
                    "caCert": {
                        "type": "string",
                        "description": "The content of the CA certificate about ssl certificate.\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation for lb ssl, formatted in RFC3339 time string.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The content of the private key about ssl certificate.\n"
                    },
                    "userCert": {
                        "type": "string",
                        "description": "The content of the user certificate about ssl certificate.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:ulb/lBSslAttachment:LBSslAttachment": {
            "description": "Provides a Load Balancer SSL attachment resource for attaching SSL certificate to Load Balancer Listener.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\nimport * from \"fs\";\n\nconst fooLB = new ucloud.ulb.LB(\"fooLB\", {tag: \"tf-example\"});\nconst fooLBListener = new ucloud.ulb.LBListener(\"fooLBListener\", {\n    loadBalancerId: fooLB.id,\n    protocol: \"https\",\n});\nconst fooLBSsl = new ucloud.ulb.LBSsl(\"fooLBSsl\", {\n    privateKey: fs.readFileSync(\"private.key\"),\n    userCert: fs.readFileSync(\"user.crt\"),\n    caCert: fs.readFileSync(\"ca.crt\"),\n});\nconst fooLBSslAttachment = new ucloud.ulb.LBSslAttachment(\"fooLBSslAttachment\", {\n    loadBalancerId: fooLB.id,\n    listenerId: fooLBListener.id,\n    sslId: fooLBSsl.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nfoo_lb = ucloud.ulb.LB(\"fooLB\", tag=\"tf-example\")\nfoo_lb_listener = ucloud.ulb.LBListener(\"fooLBListener\",\n    load_balancer_id=foo_lb.id,\n    protocol=\"https\")\nfoo_lbssl = ucloud.ulb.LBSsl(\"fooLBSsl\",\n    private_key=(lambda path: open(path).read())(\"private.key\"),\n    user_cert=(lambda path: open(path).read())(\"user.crt\"),\n    ca_cert=(lambda path: open(path).read())(\"ca.crt\"))\nfoo_lbssl_attachment = ucloud.ulb.LBSslAttachment(\"fooLBSslAttachment\",\n    load_balancer_id=foo_lb.id,\n    listener_id=foo_lb_listener.id,\n    ssl_id=foo_lbssl.id)\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooLB = new Ucloud.Ulb.LB(\"fooLB\", new Ucloud.Ulb.LBArgs\n        {\n            Tag = \"tf-example\",\n        });\n        var fooLBListener = new Ucloud.Ulb.LBListener(\"fooLBListener\", new Ucloud.Ulb.LBListenerArgs\n        {\n            LoadBalancerId = fooLB.Id,\n            Protocol = \"https\",\n        });\n        var fooLBSsl = new Ucloud.Ulb.LBSsl(\"fooLBSsl\", new Ucloud.Ulb.LBSslArgs\n        {\n            PrivateKey = File.ReadAllText(\"private.key\"),\n            UserCert = File.ReadAllText(\"user.crt\"),\n            CaCert = File.ReadAllText(\"ca.crt\"),\n        });\n        var fooLBSslAttachment = new Ucloud.Ulb.LBSslAttachment(\"fooLBSslAttachment\", new Ucloud.Ulb.LBSslAttachmentArgs\n        {\n            LoadBalancerId = fooLB.Id,\n            ListenerId = fooLBListener.Id,\n            SslId = fooLBSsl.Id,\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "listenerId": {
                    "type": "string",
                    "description": "The ID of listener servers.\n"
                },
                "loadBalancerId": {
                    "type": "string"
                },
                "sslId": {
                    "type": "string",
                    "description": "The ID of SSL certificate.\n"
                }
            },
            "required": [
                "listenerId",
                "loadBalancerId",
                "sslId"
            ],
            "inputProperties": {
                "listenerId": {
                    "type": "string",
                    "description": "The ID of listener servers.\n"
                },
                "loadBalancerId": {
                    "type": "string"
                },
                "sslId": {
                    "type": "string",
                    "description": "The ID of SSL certificate.\n"
                }
            },
            "requiredInputs": [
                "listenerId",
                "loadBalancerId",
                "sslId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LBSslAttachment resources.\n",
                "properties": {
                    "listenerId": {
                        "type": "string",
                        "description": "The ID of listener servers.\n"
                    },
                    "loadBalancerId": {
                        "type": "string"
                    },
                    "sslId": {
                        "type": "string",
                        "description": "The ID of SSL certificate.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:umem/memcachedInstance:MemcachedInstance": {
            "description": "The UCloud Memcache instance is a key-value online storage service compatible with the Memcached protocol.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst default = ucloud.uaccount.getZone({});\nconst master = new ucloud.umem.MemcachedInstance(\"master\", {\n    availabilityZone: _default.then(_default =\u003e _default.zones[0].id),\n    instanceType: \"memcache-master-2\",\n    tag: \"tf-example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\ndefault = ucloud.uaccount.get_zone()\nmaster = ucloud.umem.MemcachedInstance(\"master\",\n    availability_zone=default.zones[0].id,\n    instance_type=\"memcache-master-2\",\n    tag=\"tf-example\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Ucloud.Uaccount.GetZone.InvokeAsync());\n        var master = new Ucloud.Umem.MemcachedInstance(\"master\", new Ucloud.Umem.MemcachedInstanceArgs\n        {\n            AvailabilityZone = @default.Apply(@default =\u003e @default.Zones[0].Id),\n            InstanceType = \"memcache-master-2\",\n            Tag = \"tf-example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/umem\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := uaccount.GetZone(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = umem.NewMemcachedInstance(ctx, \"master\", \u0026umem.MemcachedInstanceArgs{\n\t\t\tAvailabilityZone: pulumi.String(_default.Zones[0].Id),\n\t\t\tInstanceType:     pulumi.String(\"memcache-master-2\"),\n\t\t\tTag:              pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where Memcache instance is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of Memcache instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of Memcache instance, formatted by RFC3339 time string.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the Memcache instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time of Memcache instance, formatted by RFC3339 time string.\n"
                },
                "instanceType": {
                    "type": "string"
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:umem/MemcachedInstanceIpSet:MemcachedInstanceIpSet"
                    },
                    "description": "ip_set is a nested type. ip_set documented below.\n"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "The status of KV Memcache instance.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet linked to the Memcache instance.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Memcache instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the Memcache instance.\n"
                }
            },
            "required": [
                "availabilityZone",
                "chargeType",
                "createTime",
                "expireTime",
                "instanceType",
                "ipSets",
                "name",
                "status",
                "subnetId",
                "tag",
                "vpcId"
            ],
            "inputProperties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where Memcache instance is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of Memcache instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the Memcache instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                },
                "instanceType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet linked to the Memcache instance.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Memcache instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the Memcache instance.\n"
                }
            },
            "requiredInputs": [
                "availabilityZone",
                "instanceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MemcachedInstance resources.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where Memcache instance is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                    },
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of Memcache instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The creation time of Memcache instance, formatted by RFC3339 time string.\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration that you will buy the Memcache instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                    },
                    "expireTime": {
                        "type": "string",
                        "description": "The expiration time of Memcache instance, formatted by RFC3339 time string.\n"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "ipSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:umem/MemcachedInstanceIpSet:MemcachedInstanceIpSet"
                        },
                        "description": "ip_set is a nested type. ip_set documented below.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of KV Memcache instance.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of subnet linked to the Memcache instance.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to Memcache instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC linked to the Memcache instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:umem/redisInstance:RedisInstance": {
            "description": "The UCloud Redis instance is a key-value online storage service compatible with the Redis protocol.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst default = ucloud.uaccount.getZone({});\nconst master = new ucloud.umem.RedisInstance(\"master\", {\n    availabilityZone: _default.then(_default =\u003e _default.zones[0].id),\n    instanceType: \"redis-master-2\",\n    password: \"2018_Tfacc\",\n    engineVersion: \"4.0\",\n    tag: \"tf-example\",\n});\nconst distributed = new ucloud.umem.RedisInstance(\"distributed\", {\n    availabilityZone: _default.then(_default =\u003e _default.zones[0].id),\n    instanceType: \"redis-distributed-16\",\n    tag: \"tf-example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\ndefault = ucloud.uaccount.get_zone()\nmaster = ucloud.umem.RedisInstance(\"master\",\n    availability_zone=default.zones[0].id,\n    instance_type=\"redis-master-2\",\n    password=\"2018_Tfacc\",\n    engine_version=\"4.0\",\n    tag=\"tf-example\")\ndistributed = ucloud.umem.RedisInstance(\"distributed\",\n    availability_zone=default.zones[0].id,\n    instance_type=\"redis-distributed-16\",\n    tag=\"tf-example\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Ucloud.Uaccount.GetZone.InvokeAsync());\n        var master = new Ucloud.Umem.RedisInstance(\"master\", new Ucloud.Umem.RedisInstanceArgs\n        {\n            AvailabilityZone = @default.Apply(@default =\u003e @default.Zones[0].Id),\n            InstanceType = \"redis-master-2\",\n            Password = \"2018_Tfacc\",\n            EngineVersion = \"4.0\",\n            Tag = \"tf-example\",\n        });\n        var distributed = new Ucloud.Umem.RedisInstance(\"distributed\", new Ucloud.Umem.RedisInstanceArgs\n        {\n            AvailabilityZone = @default.Apply(@default =\u003e @default.Zones[0].Id),\n            InstanceType = \"redis-distributed-16\",\n            Tag = \"tf-example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/umem\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := uaccount.GetZone(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = umem.NewRedisInstance(ctx, \"master\", \u0026umem.RedisInstanceArgs{\n\t\t\tAvailabilityZone: pulumi.String(_default.Zones[0].Id),\n\t\t\tInstanceType:     pulumi.String(\"redis-master-2\"),\n\t\t\tPassword:         pulumi.String(\"2018_Tfacc\"),\n\t\t\tEngineVersion:    pulumi.String(\"4.0\"),\n\t\t\tTag:              pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = umem.NewRedisInstance(ctx, \"distributed\", \u0026umem.RedisInstanceArgs{\n\t\t\tAvailabilityZone: pulumi.String(_default.Zones[0].Id),\n\t\t\tInstanceType:     pulumi.String(\"redis-distributed-16\"),\n\t\t\tTag:              pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where Redis instance is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of Redis instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The creation time of Redis instance, formatted by RFC3339 time string.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the Redis instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The version of engine of active-standby Redis. Possible values are: 3.0, 3.2, 4.0 and 5.0.\n"
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time of Redis instance, formatted by RFC3339 time string.\n"
                },
                "instanceType": {
                    "type": "string"
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:umem/RedisInstanceIpSet:RedisInstanceIpSet"
                    },
                    "description": "ip_set is a nested type. ip_set documented below.\n"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The password for  active-standby Redis instance which should have 6-36 characters. It must contain at least 3 items of Capital letters, small letter, numbers and special characters. The special characters include `-_`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of KV Redis instance.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet linked to the Redis instance.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Redis instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the Redis instance.\n"
                }
            },
            "required": [
                "availabilityZone",
                "chargeType",
                "createTime",
                "engineVersion",
                "expireTime",
                "instanceType",
                "ipSets",
                "name",
                "status",
                "subnetId",
                "tag",
                "vpcId"
            ],
            "inputProperties": {
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone where Redis instance is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "The charge type of Redis instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the Redis instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "The version of engine of active-standby Redis. Possible values are: 3.0, 3.2, 4.0 and 5.0.\n"
                },
                "instanceType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The password for  active-standby Redis instance which should have 6-36 characters. It must contain at least 3 items of Capital letters, small letter, numbers and special characters. The special characters include `-_`.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet linked to the Redis instance.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Redis instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the Redis instance.\n"
                }
            },
            "requiredInputs": [
                "availabilityZone",
                "instanceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RedisInstance resources.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where Redis instance is located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                    },
                    "chargeType": {
                        "type": "string",
                        "description": "The charge type of Redis instance, possible values are: `year`, `month` and `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The creation time of Redis instance, formatted by RFC3339 time string.\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration that you will buy the Redis instance (Default: `1`). The value is `0` when pay by month and the instance will be valid till the last day of that month. It is not required when `dynamic` (pay by hour).\n"
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "The version of engine of active-standby Redis. Possible values are: 3.0, 3.2, 4.0 and 5.0.\n"
                    },
                    "expireTime": {
                        "type": "string",
                        "description": "The expiration time of Redis instance, formatted by RFC3339 time string.\n"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "ipSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:umem/RedisInstanceIpSet:RedisInstanceIpSet"
                        },
                        "description": "ip_set is a nested type. ip_set documented below.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for  active-standby Redis instance which should have 6-36 characters. It must contain at least 3 items of Capital letters, small letter, numbers and special characters. The special characters include `-_`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of KV Redis instance.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of subnet linked to the Redis instance.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to Redis instance, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC linked to the Redis instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:unet/eIP:EIP": {
            "description": "Provides an Elastic IP resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = new ucloud.unet.EIP(\"example\", {\n    bandwidth: 2,\n    chargeMode: \"bandwidth\",\n    internetType: \"bgp\",\n    tag: \"tf-example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.unet.EIP(\"example\",\n    bandwidth=2,\n    charge_mode=\"bandwidth\",\n    internet_type=\"bgp\",\n    tag=\"tf-example\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Ucloud.Unet.EIP(\"example\", new Ucloud.Unet.EIPArgs\n        {\n            Bandwidth = 2,\n            ChargeMode = \"bandwidth\",\n            InternetType = \"bgp\",\n            Tag = \"tf-example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := unet.NewEIP(ctx, \"example\", \u0026unet.EIPArgs{\n\t\t\tBandwidth:    pulumi.Int(2),\n\t\t\tChargeMode:   pulumi.String(\"bandwidth\"),\n\t\t\tInternetType: pulumi.String(\"bgp\"),\n\t\t\tTag:          pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nEIP can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:unet/eIP:EIP example eip-abcdefg\n```\n\n ",
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). The ranges for bandwidth are: 1-200 for pay by traffic, 1-800 for pay by bandwidth. (Default: `1`).\n"
                },
                "chargeMode": {
                    "type": "string",
                    "description": "-(Optional) Elastic IP charge mode. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth, `share_bandwidth` as share bandwidth mode. (Default: `bandwidth`for the Elastic IP, `share_bandwidth` for the Elastic IP with share bandwidth mode).\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "Elastic IP charge type. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for EIP, formatted in RFC3339 time string.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the instance will be valid till the last day of that month.\n"
                },
                "expireTime": {
                    "type": "string",
                    "description": "The expiration time for EIP, formatted in RFC3339 time string.\n"
                },
                "internetType": {
                    "type": "string",
                    "description": "Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.\n"
                },
                "ipSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:unet/EIPIpSet:EIPIpSet"
                    },
                    "description": "It is a nested type which documented below.\n"
                },
                "name": {
                    "type": "string"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Public IP address of Elastic IP.\n"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the EIP. (Default: `\"\"`).\n"
                },
                "resource": {
                    "$ref": "#/types/ucloud:unet/EIPResource:EIPResource",
                    "description": "It is a nested type which documented below.\n"
                },
                "status": {
                    "type": "string",
                    "description": "EIP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Elastic IP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                }
            },
            "required": [
                "bandwidth",
                "chargeMode",
                "chargeType",
                "createTime",
                "expireTime",
                "internetType",
                "ipSets",
                "name",
                "publicIp",
                "remark",
                "resource",
                "status"
            ],
            "inputProperties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). The ranges for bandwidth are: 1-200 for pay by traffic, 1-800 for pay by bandwidth. (Default: `1`).\n"
                },
                "chargeMode": {
                    "type": "string",
                    "description": "-(Optional) Elastic IP charge mode. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth, `share_bandwidth` as share bandwidth mode. (Default: `bandwidth`for the Elastic IP, `share_bandwidth` for the Elastic IP with share bandwidth mode).\n"
                },
                "chargeType": {
                    "type": "string",
                    "description": "Elastic IP charge type. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the instance will be valid till the last day of that month.\n"
                },
                "internetType": {
                    "type": "string",
                    "description": "Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the EIP. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Elastic IP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                }
            },
            "requiredInputs": [
                "internetType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EIP resources.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer",
                        "description": "Maximum bandwidth to the elastic public network, measured in Mbps (Mega bit per second). The ranges for bandwidth are: 1-200 for pay by traffic, 1-800 for pay by bandwidth. (Default: `1`).\n"
                    },
                    "chargeMode": {
                        "type": "string",
                        "description": "-(Optional) Elastic IP charge mode. Possible values are: `traffic` as pay by traffic, `bandwidth` as pay by bandwidth, `share_bandwidth` as share bandwidth mode. (Default: `bandwidth`for the Elastic IP, `share_bandwidth` for the Elastic IP with share bandwidth mode).\n"
                    },
                    "chargeType": {
                        "type": "string",
                        "description": "Elastic IP charge type. Possible values are: `year` as pay by year, `month` as pay by month, `dynamic` as pay by hour (specific permission required). (Default: `month`).\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation for EIP, formatted in RFC3339 time string.\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration that you will buy the resource. (Default: `1`). It is not required when `dynamic` (pay by hour), the value is `0` when `month`(pay by month) and the instance will be valid till the last day of that month.\n"
                    },
                    "expireTime": {
                        "type": "string",
                        "description": "The expiration time for EIP, formatted in RFC3339 time string.\n"
                    },
                    "internetType": {
                        "type": "string",
                        "description": "Type of Elastic IP routes. Possible values are: `international` as international BGP IP and `bgp` as china mainland BGP IP.\n"
                    },
                    "ipSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:unet/EIPIpSet:EIPIpSet"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "Public IP address of Elastic IP.\n"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the EIP. (Default: `\"\"`).\n"
                    },
                    "resource": {
                        "$ref": "#/types/ucloud:unet/EIPResource:EIPResource",
                        "description": "It is a nested type which documented below.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "EIP status. Possible values are: `used` as in use, `free` as available and `freeze` as associating.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to Elastic IP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:unet/eIPAssociation:EIPAssociation": {
            "description": "Provides an EIP Association resource for associating Elastic IP to UHost Instance, Load Balancer, etc.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst defaultZone = ucloud.uaccount.getZone({});\nconst defaultImage = defaultZone.then(defaultZone =\u003e ucloud.uhost.getImage({\n    availabilityZone: defaultZone.zones[0].id,\n    nameRegex: \"^CentOS 7.[1-2] 64\",\n    imageType: \"base\",\n}));\n// Create security group\nconst defaultSecurityGroup = new ucloud.unet.SecurityGroup(\"defaultSecurityGroup\", {\n    tag: \"tf-example\",\n    rules: [{\n        portRange: \"80\",\n        protocol: \"tcp\",\n        cidrBlock: \"0.0.0.0/0\",\n        policy: \"accept\",\n    }],\n});\n// Create an eip\nconst defaultEIP = new ucloud.unet.EIP(\"defaultEIP\", {\n    bandwidth: 2,\n    chargeMode: \"bandwidth\",\n    tag: \"tf-example\",\n    internetType: \"bgp\",\n});\n// Create a web server\nconst web = new ucloud.uhost.Instance(\"web\", {\n    instanceType: \"n-basic-2\",\n    availabilityZone: defaultZone.then(defaultZone =\u003e defaultZone.zones[0].id),\n    imageId: defaultImage.then(defaultImage =\u003e defaultImage.images[0].id),\n    dataDiskSize: 50,\n    rootPassword: \"wA1234567\",\n    securityGroup: defaultSecurityGroup.id,\n    tag: \"tf-example\",\n});\n// Bind eip to instance\nconst defaultEIPAssociation = new ucloud.unet.EIPAssociation(\"defaultEIPAssociation\", {\n    resourceId: web.id,\n    eipId: defaultEIP.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\ndefault_zone = ucloud.uaccount.get_zone()\ndefault_image = ucloud.uhost.get_image(availability_zone=default_zone.zones[0].id,\n    name_regex=\"^CentOS 7.[1-2] 64\",\n    image_type=\"base\")\n# Create security group\ndefault_security_group = ucloud.unet.SecurityGroup(\"defaultSecurityGroup\",\n    tag=\"tf-example\",\n    rules=[ucloud.unet.SecurityGroupRuleArgs(\n        port_range=\"80\",\n        protocol=\"tcp\",\n        cidr_block=\"0.0.0.0/0\",\n        policy=\"accept\",\n    )])\n# Create an eip\ndefault_eip = ucloud.unet.EIP(\"defaultEIP\",\n    bandwidth=2,\n    charge_mode=\"bandwidth\",\n    tag=\"tf-example\",\n    internet_type=\"bgp\")\n# Create a web server\nweb = ucloud.uhost.Instance(\"web\",\n    instance_type=\"n-basic-2\",\n    availability_zone=default_zone.zones[0].id,\n    image_id=default_image.images[0].id,\n    data_disk_size=50,\n    root_password=\"wA1234567\",\n    security_group=default_security_group.id,\n    tag=\"tf-example\")\n# Bind eip to instance\ndefault_eipassociation = ucloud.unet.EIPAssociation(\"defaultEIPAssociation\",\n    resource_id=web.id,\n    eip_id=default_eip.id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var defaultZone = Output.Create(Ucloud.Uaccount.GetZone.InvokeAsync());\n        var defaultImage = defaultZone.Apply(defaultZone =\u003e Output.Create(Ucloud.Uhost.GetImage.InvokeAsync(new Ucloud.Uhost.GetImageArgs\n        {\n            AvailabilityZone = defaultZone.Zones[0].Id,\n            NameRegex = \"^CentOS 7.[1-2] 64\",\n            ImageType = \"base\",\n        })));\n        // Create security group\n        var defaultSecurityGroup = new Ucloud.Unet.SecurityGroup(\"defaultSecurityGroup\", new Ucloud.Unet.SecurityGroupArgs\n        {\n            Tag = \"tf-example\",\n            Rules = \n            {\n                new Ucloud.Unet.Inputs.SecurityGroupRuleArgs\n                {\n                    PortRange = \"80\",\n                    Protocol = \"tcp\",\n                    CidrBlock = \"0.0.0.0/0\",\n                    Policy = \"accept\",\n                },\n            },\n        });\n        // Create an eip\n        var defaultEIP = new Ucloud.Unet.EIP(\"defaultEIP\", new Ucloud.Unet.EIPArgs\n        {\n            Bandwidth = 2,\n            ChargeMode = \"bandwidth\",\n            Tag = \"tf-example\",\n            InternetType = \"bgp\",\n        });\n        // Create a web server\n        var web = new Ucloud.Uhost.Instance(\"web\", new Ucloud.Uhost.InstanceArgs\n        {\n            InstanceType = \"n-basic-2\",\n            AvailabilityZone = defaultZone.Apply(defaultZone =\u003e defaultZone.Zones[0].Id),\n            ImageId = defaultImage.Apply(defaultImage =\u003e defaultImage.Images[0].Id),\n            DataDiskSize = 50,\n            RootPassword = \"wA1234567\",\n            SecurityGroup = defaultSecurityGroup.Id,\n            Tag = \"tf-example\",\n        });\n        // Bind eip to instance\n        var defaultEIPAssociation = new Ucloud.Unet.EIPAssociation(\"defaultEIPAssociation\", new Ucloud.Unet.EIPAssociationArgs\n        {\n            ResourceId = web.Id,\n            EipId = defaultEIP.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdefaultZone, err := uaccount.GetZone(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt0 := defaultZone.Zones[0].Id\n\t\topt1 := \"^CentOS 7.[1-2] 64\"\n\t\topt2 := \"base\"\n\t\tdefaultImage, err := uhost.GetImage(ctx, \u0026uhost.GetImageArgs{\n\t\t\tAvailabilityZone: \u0026opt0,\n\t\t\tNameRegex:        \u0026opt1,\n\t\t\tImageType:        \u0026opt2,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefaultSecurityGroup, err := unet.NewSecurityGroup(ctx, \"defaultSecurityGroup\", \u0026unet.SecurityGroupArgs{\n\t\t\tTag: pulumi.String(\"tf-example\"),\n\t\t\tRules: unet.SecurityGroupRuleArray{\n\t\t\t\t\u0026unet.SecurityGroupRuleArgs{\n\t\t\t\t\tPortRange: pulumi.String(\"80\"),\n\t\t\t\t\tProtocol:  pulumi.String(\"tcp\"),\n\t\t\t\t\tCidrBlock: pulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\tPolicy:    pulumi.String(\"accept\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefaultEIP, err := unet.NewEIP(ctx, \"defaultEIP\", \u0026unet.EIPArgs{\n\t\t\tBandwidth:    pulumi.Int(2),\n\t\t\tChargeMode:   pulumi.String(\"bandwidth\"),\n\t\t\tTag:          pulumi.String(\"tf-example\"),\n\t\t\tInternetType: pulumi.String(\"bgp\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tweb, err := uhost.NewInstance(ctx, \"web\", \u0026uhost.InstanceArgs{\n\t\t\tInstanceType:     pulumi.String(\"n-basic-2\"),\n\t\t\tAvailabilityZone: pulumi.String(defaultZone.Zones[0].Id),\n\t\t\tImageId:          pulumi.String(defaultImage.Images[0].Id),\n\t\t\tDataDiskSize:     pulumi.Int(50),\n\t\t\tRootPassword:     pulumi.String(\"wA1234567\"),\n\t\t\tSecurityGroup:    defaultSecurityGroup.ID(),\n\t\t\tTag:              pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = unet.NewEIPAssociation(ctx, \"defaultEIPAssociation\", \u0026unet.EIPAssociationArgs{\n\t\t\tResourceId: web.ID(),\n\t\t\tEipId:      defaultEIP.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "eipId": {
                    "type": "string",
                    "description": "The ID of EIP.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of resource with EIP attached.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": ", attribute `resource_type` is deprecated for optimizing parameters.\n",
                    "deprecationMessage": "attribute `resource_type` is deprecated for optimizing parameters"
                }
            },
            "required": [
                "eipId",
                "resourceId",
                "resourceType"
            ],
            "inputProperties": {
                "eipId": {
                    "type": "string",
                    "description": "The ID of EIP.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of resource with EIP attached.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": ", attribute `resource_type` is deprecated for optimizing parameters.\n",
                    "deprecationMessage": "attribute `resource_type` is deprecated for optimizing parameters"
                }
            },
            "requiredInputs": [
                "eipId",
                "resourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EIPAssociation resources.\n",
                "properties": {
                    "eipId": {
                        "type": "string",
                        "description": "The ID of EIP.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of resource with EIP attached.\n"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": ", attribute `resource_type` is deprecated for optimizing parameters.\n",
                        "deprecationMessage": "attribute `resource_type` is deprecated for optimizing parameters"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:unet/securityGroup:SecurityGroup": {
            "description": "Provides a Security Group resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = new ucloud.unet.SecurityGroup(\"example\", {\n    rules: [\n        // http access from LAN\n        {\n            cidrBlock: \"192.168.0.0/16\",\n            policy: \"accept\",\n            portRange: \"80\",\n            protocol: \"tcp\",\n        },\n        // https access from LAN\n        {\n            cidrBlock: \"192.168.0.0/16\",\n            policy: \"accept\",\n            portRange: \"443\",\n            protocol: \"tcp\",\n        },\n    ],\n    tag: \"tf-example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.unet.SecurityGroup(\"example\",\n    rules=[\n        ucloud.unet.SecurityGroupRuleArgs(\n            cidr_block=\"192.168.0.0/16\",\n            policy=\"accept\",\n            port_range=\"80\",\n            protocol=\"tcp\",\n        ),\n        ucloud.unet.SecurityGroupRuleArgs(\n            cidr_block=\"192.168.0.0/16\",\n            policy=\"accept\",\n            port_range=\"443\",\n            protocol=\"tcp\",\n        ),\n    ],\n    tag=\"tf-example\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Ucloud.Unet.SecurityGroup(\"example\", new Ucloud.Unet.SecurityGroupArgs\n        {\n            Rules = \n            {\n                new Ucloud.Unet.Inputs.SecurityGroupRuleArgs\n                {\n                    CidrBlock = \"192.168.0.0/16\",\n                    Policy = \"accept\",\n                    PortRange = \"80\",\n                    Protocol = \"tcp\",\n                },\n                new Ucloud.Unet.Inputs.SecurityGroupRuleArgs\n                {\n                    CidrBlock = \"192.168.0.0/16\",\n                    Policy = \"accept\",\n                    PortRange = \"443\",\n                    Protocol = \"tcp\",\n                },\n            },\n            Tag = \"tf-example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := unet.NewSecurityGroup(ctx, \"example\", \u0026unet.SecurityGroupArgs{\n\t\t\tRules: unet.SecurityGroupRuleArray{\n\t\t\t\t\u0026unet.SecurityGroupRuleArgs{\n\t\t\t\t\tCidrBlock: pulumi.String(\"192.168.0.0/16\"),\n\t\t\t\t\tPolicy:    pulumi.String(\"accept\"),\n\t\t\t\t\tPortRange: pulumi.String(\"80\"),\n\t\t\t\t\tProtocol:  pulumi.String(\"tcp\"),\n\t\t\t\t},\n\t\t\t\t\u0026unet.SecurityGroupRuleArgs{\n\t\t\t\t\tCidrBlock: pulumi.String(\"192.168.0.0/16\"),\n\t\t\t\t\tPolicy:    pulumi.String(\"accept\"),\n\t\t\t\t\tPortRange: pulumi.String(\"443\"),\n\t\t\t\t\tProtocol:  pulumi.String(\"tcp\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTag: pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSecurity Group can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:unet/securityGroup:SecurityGroup example firewall-abc123456\n```\n\n ",
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time of creation of security group, formatted in RFC3339 time string.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the security group. (Default: `\"\"`).\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:unet/SecurityGroupRule:SecurityGroupRule"
                    },
                    "description": "A list of security group rules. Can be specified multiple times for each rules. See rules below for details on attributes.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to security group, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                }
            },
            "required": [
                "createTime",
                "name",
                "remark",
                "rules"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the security group. (Default: `\"\"`).\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:unet/SecurityGroupRule:SecurityGroupRule"
                    },
                    "description": "A list of security group rules. Can be specified multiple times for each rules. See rules below for details on attributes.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to security group, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                }
            },
            "requiredInputs": [
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroup resources.\n",
                "properties": {
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation of security group, formatted in RFC3339 time string.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the security group. (Default: `\"\"`).\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:unet/SecurityGroupRule:SecurityGroupRule"
                        },
                        "description": "A list of security group rules. Can be specified multiple times for each rules. See rules below for details on attributes.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to security group, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:vpc/nATGateway:NATGateway": {
            "description": "Provides a Nat Gateway resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst fooVPC = new ucloud.vpc.VPC(\"fooVPC\", {\n    tag: \"tf-acc\",\n    cidrBlocks: [\"192.168.0.0/16\"],\n});\nconst fooSubnet = new ucloud.vpc.Subnet(\"fooSubnet\", {\n    tag: \"tf-acc\",\n    cidrBlock: \"192.168.1.0/24\",\n    vpcId: fooVPC.id,\n});\nconst fooEIP = new ucloud.unet.EIP(\"fooEIP\", {\n    bandwidth: 1,\n    internetType: \"bgp\",\n    chargeMode: \"bandwidth\",\n    tag: \"tf-acc\",\n});\nconst fooSecurityGroup = ucloud.unet.getSecurityGroup({\n    type: \"recommend_web\",\n});\nconst fooNATGateway = new ucloud.vpc.NATGateway(\"fooNATGateway\", {\n    vpcId: fooVPC.id,\n    subnetIds: [fooSubnet.id],\n    eipId: fooEIP.id,\n    tag: \"tf-acc\",\n    securityGroup: fooSecurityGroup.then(fooSecurityGroup =\u003e fooSecurityGroup.securityGroups[0].id),\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nfoo_vpc = ucloud.vpc.VPC(\"fooVPC\",\n    tag=\"tf-acc\",\n    cidr_blocks=[\"192.168.0.0/16\"])\nfoo_subnet = ucloud.vpc.Subnet(\"fooSubnet\",\n    tag=\"tf-acc\",\n    cidr_block=\"192.168.1.0/24\",\n    vpc_id=foo_vpc.id)\nfoo_eip = ucloud.unet.EIP(\"fooEIP\",\n    bandwidth=1,\n    internet_type=\"bgp\",\n    charge_mode=\"bandwidth\",\n    tag=\"tf-acc\")\nfoo_security_group = ucloud.unet.get_security_group(type=\"recommend_web\")\nfoo_nat_gateway = ucloud.vpc.NATGateway(\"fooNATGateway\",\n    vpc_id=foo_vpc.id,\n    subnet_ids=[foo_subnet.id],\n    eip_id=foo_eip.id,\n    tag=\"tf-acc\",\n    security_group=foo_security_group.security_groups[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooVPC = new Ucloud.Vpc.VPC(\"fooVPC\", new Ucloud.Vpc.VPCArgs\n        {\n            Tag = \"tf-acc\",\n            CidrBlocks = \n            {\n                \"192.168.0.0/16\",\n            },\n        });\n        var fooSubnet = new Ucloud.Vpc.Subnet(\"fooSubnet\", new Ucloud.Vpc.SubnetArgs\n        {\n            Tag = \"tf-acc\",\n            CidrBlock = \"192.168.1.0/24\",\n            VpcId = fooVPC.Id,\n        });\n        var fooEIP = new Ucloud.Unet.EIP(\"fooEIP\", new Ucloud.Unet.EIPArgs\n        {\n            Bandwidth = 1,\n            InternetType = \"bgp\",\n            ChargeMode = \"bandwidth\",\n            Tag = \"tf-acc\",\n        });\n        var fooSecurityGroup = Output.Create(Ucloud.Unet.GetSecurityGroup.InvokeAsync(new Ucloud.Unet.GetSecurityGroupArgs\n        {\n            Type = \"recommend_web\",\n        }));\n        var fooNATGateway = new Ucloud.Vpc.NATGateway(\"fooNATGateway\", new Ucloud.Vpc.NATGatewayArgs\n        {\n            VpcId = fooVPC.Id,\n            SubnetIds = \n            {\n                fooSubnet.Id,\n            },\n            EipId = fooEIP.Id,\n            Tag = \"tf-acc\",\n            SecurityGroup = fooSecurityGroup.Apply(fooSecurityGroup =\u003e fooSecurityGroup.SecurityGroups[0].Id),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVPC, err := vpc.NewVPC(ctx, \"fooVPC\", \u0026vpc.VPCArgs{\n\t\t\tTag: pulumi.String(\"tf-acc\"),\n\t\t\tCidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tTag:       pulumi.String(\"tf-acc\"),\n\t\t\tCidrBlock: pulumi.String(\"192.168.1.0/24\"),\n\t\t\tVpcId:     fooVPC.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooEIP, err := unet.NewEIP(ctx, \"fooEIP\", \u0026unet.EIPArgs{\n\t\t\tBandwidth:    pulumi.Int(1),\n\t\t\tInternetType: pulumi.String(\"bgp\"),\n\t\t\tChargeMode:   pulumi.String(\"bandwidth\"),\n\t\t\tTag:          pulumi.String(\"tf-acc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt0 := \"recommend_web\"\n\t\tfooSecurityGroup, err := unet.LookupSecurityGroup(ctx, \u0026unet.LookupSecurityGroupArgs{\n\t\t\tType: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewNATGateway(ctx, \"fooNATGateway\", \u0026vpc.NATGatewayArgs{\n\t\t\tVpcId: fooVPC.ID(),\n\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\tfooSubnet.ID(),\n\t\t\t},\n\t\t\tEipId:         fooEIP.ID(),\n\t\t\tTag:           pulumi.String(\"tf-acc\"),\n\t\t\tSecurityGroup: pulumi.String(fooSecurityGroup.SecurityGroups[0].Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNat Gateway can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:vpc/nATGateway:NATGateway example natgw-abc123456\n```\n\n ",
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time of creation of Nat Gateway, formatted in RFC3339 time string.\n"
                },
                "eipId": {
                    "type": "string",
                    "description": "The ID of eip associate to the Nat Gateway.\n"
                },
                "enableWhiteList": {
                    "type": "boolean",
                    "description": "The boolean value to Controls whether or not start the whitelist mode.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the Nat Gateway. (Default: `\"\"`).\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The ID of the associated security group.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of subnet ID under the VPC.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n* ``\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the Nat Gateway.\n"
                },
                "whiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The white list of instance under the Nat Gateway.\n"
                }
            },
            "required": [
                "createTime",
                "eipId",
                "enableWhiteList",
                "name",
                "remark",
                "securityGroup",
                "subnetIds",
                "vpcId"
            ],
            "inputProperties": {
                "eipId": {
                    "type": "string",
                    "description": "The ID of eip associate to the Nat Gateway.\n"
                },
                "enableWhiteList": {
                    "type": "boolean",
                    "description": "The boolean value to Controls whether or not start the whitelist mode.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the Nat Gateway. (Default: `\"\"`).\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "The ID of the associated security group.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of subnet ID under the VPC.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n* ``\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the Nat Gateway.\n"
                },
                "whiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The white list of instance under the Nat Gateway.\n"
                }
            },
            "requiredInputs": [
                "eipId",
                "enableWhiteList",
                "securityGroup",
                "subnetIds",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NATGateway resources.\n",
                "properties": {
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation of Nat Gateway, formatted in RFC3339 time string.\n"
                    },
                    "eipId": {
                        "type": "string",
                        "description": "The ID of eip associate to the Nat Gateway.\n"
                    },
                    "enableWhiteList": {
                        "type": "boolean",
                        "description": "The boolean value to Controls whether or not start the whitelist mode.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the Nat Gateway. (Default: `\"\"`).\n"
                    },
                    "securityGroup": {
                        "type": "string",
                        "description": "The ID of the associated security group.\n"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of subnet ID under the VPC.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to Nat Gateway, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n* ``\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC linked to the Nat Gateway.\n"
                    },
                    "whiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The white list of instance under the Nat Gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:vpc/nATGatewayRule:NATGatewayRule": {
            "description": "Provides a Nat Gateway resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst fooVPC = new ucloud.vpc.VPC(\"fooVPC\", {\n    tag: \"tf-acc\",\n    cidrBlocks: [\"192.168.0.0/16\"],\n});\nconst fooSubnet = new ucloud.vpc.Subnet(\"fooSubnet\", {\n    tag: \"tf-acc\",\n    cidrBlock: \"192.168.1.0/24\",\n    vpcId: fooVPC.id,\n});\nconst fooEIP = new ucloud.unet.EIP(\"fooEIP\", {\n    bandwidth: 1,\n    internetType: \"bgp\",\n    chargeMode: \"bandwidth\",\n    tag: \"tf-acc\",\n});\nconst fooSecurityGroup = ucloud.unet.getSecurityGroup({\n    type: \"recommend_web\",\n});\nconst defaultZone = ucloud.uaccount.getZone({});\nconst defaultImage = defaultZone.then(defaultZone =\u003e ucloud.uhost.getImage({\n    availabilityZone: defaultZone.zones[0].id,\n    nameRegex: \"^CentOS 7.[1-2] 64\",\n    imageType: \"base\",\n}));\nconst fooInstance = new ucloud.uhost.Instance(\"fooInstance\", {\n    vpcId: fooVPC.id,\n    subnetId: fooSubnet.id,\n    availabilityZone: defaultZone.then(defaultZone =\u003e defaultZone.zones[0].id),\n    imageId: defaultImage.then(defaultImage =\u003e defaultImage.images[0].id),\n    instanceType: \"n-basic-1\",\n    chargeType: \"dynamic\",\n    tag: \"tf-acc\",\n});\nconst fooNATGateway = new ucloud.vpc.NATGateway(\"fooNATGateway\", {\n    vpcId: fooVPC.id,\n    subnetIds: [fooSubnet.id],\n    eipId: fooEIP.id,\n    tag: \"tf-acc\",\n    enableWhiteList: false,\n    securityGroup: fooSecurityGroup.then(fooSecurityGroup =\u003e fooSecurityGroup.securityGroups[0].id),\n});\nconst fooNATGatewayRule = new ucloud.vpc.NATGatewayRule(\"fooNATGatewayRule\", {\n    natGatewayId: fooNATGateway.id,\n    protocol: \"tcp\",\n    srcEipId: fooEIP.id,\n    srcPortRange: \"88\",\n    dstIp: fooInstance.privateIp,\n    dstPortRange: \"80\",\n});\nconst bar = new ucloud.vpc.NATGatewayRule(\"bar\", {\n    natGatewayId: fooNATGateway.id,\n    protocol: \"tcp\",\n    srcEipId: fooEIP.id,\n    srcPortRange: \"90-100\",\n    dstIp: fooInstance.privateIp,\n    dstPortRange: \"90-100\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nfoo_vpc = ucloud.vpc.VPC(\"fooVPC\",\n    tag=\"tf-acc\",\n    cidr_blocks=[\"192.168.0.0/16\"])\nfoo_subnet = ucloud.vpc.Subnet(\"fooSubnet\",\n    tag=\"tf-acc\",\n    cidr_block=\"192.168.1.0/24\",\n    vpc_id=foo_vpc.id)\nfoo_eip = ucloud.unet.EIP(\"fooEIP\",\n    bandwidth=1,\n    internet_type=\"bgp\",\n    charge_mode=\"bandwidth\",\n    tag=\"tf-acc\")\nfoo_security_group = ucloud.unet.get_security_group(type=\"recommend_web\")\ndefault_zone = ucloud.uaccount.get_zone()\ndefault_image = ucloud.uhost.get_image(availability_zone=default_zone.zones[0].id,\n    name_regex=\"^CentOS 7.[1-2] 64\",\n    image_type=\"base\")\nfoo_instance = ucloud.uhost.Instance(\"fooInstance\",\n    vpc_id=foo_vpc.id,\n    subnet_id=foo_subnet.id,\n    availability_zone=default_zone.zones[0].id,\n    image_id=default_image.images[0].id,\n    instance_type=\"n-basic-1\",\n    charge_type=\"dynamic\",\n    tag=\"tf-acc\")\nfoo_nat_gateway = ucloud.vpc.NATGateway(\"fooNATGateway\",\n    vpc_id=foo_vpc.id,\n    subnet_ids=[foo_subnet.id],\n    eip_id=foo_eip.id,\n    tag=\"tf-acc\",\n    enable_white_list=False,\n    security_group=foo_security_group.security_groups[0].id)\nfoo_nat_gateway_rule = ucloud.vpc.NATGatewayRule(\"fooNATGatewayRule\",\n    nat_gateway_id=foo_nat_gateway.id,\n    protocol=\"tcp\",\n    src_eip_id=foo_eip.id,\n    src_port_range=\"88\",\n    dst_ip=foo_instance.private_ip,\n    dst_port_range=\"80\")\nbar = ucloud.vpc.NATGatewayRule(\"bar\",\n    nat_gateway_id=foo_nat_gateway.id,\n    protocol=\"tcp\",\n    src_eip_id=foo_eip.id,\n    src_port_range=\"90-100\",\n    dst_ip=foo_instance.private_ip,\n    dst_port_range=\"90-100\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooVPC = new Ucloud.Vpc.VPC(\"fooVPC\", new Ucloud.Vpc.VPCArgs\n        {\n            Tag = \"tf-acc\",\n            CidrBlocks = \n            {\n                \"192.168.0.0/16\",\n            },\n        });\n        var fooSubnet = new Ucloud.Vpc.Subnet(\"fooSubnet\", new Ucloud.Vpc.SubnetArgs\n        {\n            Tag = \"tf-acc\",\n            CidrBlock = \"192.168.1.0/24\",\n            VpcId = fooVPC.Id,\n        });\n        var fooEIP = new Ucloud.Unet.EIP(\"fooEIP\", new Ucloud.Unet.EIPArgs\n        {\n            Bandwidth = 1,\n            InternetType = \"bgp\",\n            ChargeMode = \"bandwidth\",\n            Tag = \"tf-acc\",\n        });\n        var fooSecurityGroup = Output.Create(Ucloud.Unet.GetSecurityGroup.InvokeAsync(new Ucloud.Unet.GetSecurityGroupArgs\n        {\n            Type = \"recommend_web\",\n        }));\n        var defaultZone = Output.Create(Ucloud.Uaccount.GetZone.InvokeAsync());\n        var defaultImage = defaultZone.Apply(defaultZone =\u003e Output.Create(Ucloud.Uhost.GetImage.InvokeAsync(new Ucloud.Uhost.GetImageArgs\n        {\n            AvailabilityZone = defaultZone.Zones[0].Id,\n            NameRegex = \"^CentOS 7.[1-2] 64\",\n            ImageType = \"base\",\n        })));\n        var fooInstance = new Ucloud.Uhost.Instance(\"fooInstance\", new Ucloud.Uhost.InstanceArgs\n        {\n            VpcId = fooVPC.Id,\n            SubnetId = fooSubnet.Id,\n            AvailabilityZone = defaultZone.Apply(defaultZone =\u003e defaultZone.Zones[0].Id),\n            ImageId = defaultImage.Apply(defaultImage =\u003e defaultImage.Images[0].Id),\n            InstanceType = \"n-basic-1\",\n            ChargeType = \"dynamic\",\n            Tag = \"tf-acc\",\n        });\n        var fooNATGateway = new Ucloud.Vpc.NATGateway(\"fooNATGateway\", new Ucloud.Vpc.NATGatewayArgs\n        {\n            VpcId = fooVPC.Id,\n            SubnetIds = \n            {\n                fooSubnet.Id,\n            },\n            EipId = fooEIP.Id,\n            Tag = \"tf-acc\",\n            EnableWhiteList = false,\n            SecurityGroup = fooSecurityGroup.Apply(fooSecurityGroup =\u003e fooSecurityGroup.SecurityGroups[0].Id),\n        });\n        var fooNATGatewayRule = new Ucloud.Vpc.NATGatewayRule(\"fooNATGatewayRule\", new Ucloud.Vpc.NATGatewayRuleArgs\n        {\n            NatGatewayId = fooNATGateway.Id,\n            Protocol = \"tcp\",\n            SrcEipId = fooEIP.Id,\n            SrcPortRange = \"88\",\n            DstIp = fooInstance.PrivateIp,\n            DstPortRange = \"80\",\n        });\n        var bar = new Ucloud.Vpc.NATGatewayRule(\"bar\", new Ucloud.Vpc.NATGatewayRuleArgs\n        {\n            NatGatewayId = fooNATGateway.Id,\n            Protocol = \"tcp\",\n            SrcEipId = fooEIP.Id,\n            SrcPortRange = \"90-100\",\n            DstIp = fooInstance.PrivateIp,\n            DstPortRange = \"90-100\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet\"\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVPC, err := vpc.NewVPC(ctx, \"fooVPC\", \u0026vpc.VPCArgs{\n\t\t\tTag: pulumi.String(\"tf-acc\"),\n\t\t\tCidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tTag:       pulumi.String(\"tf-acc\"),\n\t\t\tCidrBlock: pulumi.String(\"192.168.1.0/24\"),\n\t\t\tVpcId:     fooVPC.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooEIP, err := unet.NewEIP(ctx, \"fooEIP\", \u0026unet.EIPArgs{\n\t\t\tBandwidth:    pulumi.Int(1),\n\t\t\tInternetType: pulumi.String(\"bgp\"),\n\t\t\tChargeMode:   pulumi.String(\"bandwidth\"),\n\t\t\tTag:          pulumi.String(\"tf-acc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt0 := \"recommend_web\"\n\t\tfooSecurityGroup, err := unet.LookupSecurityGroup(ctx, \u0026unet.LookupSecurityGroupArgs{\n\t\t\tType: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefaultZone, err := uaccount.GetZone(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := defaultZone.Zones[0].Id\n\t\topt2 := \"^CentOS 7.[1-2] 64\"\n\t\topt3 := \"base\"\n\t\tdefaultImage, err := uhost.GetImage(ctx, \u0026uhost.GetImageArgs{\n\t\t\tAvailabilityZone: \u0026opt1,\n\t\t\tNameRegex:        \u0026opt2,\n\t\t\tImageType:        \u0026opt3,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooInstance, err := uhost.NewInstance(ctx, \"fooInstance\", \u0026uhost.InstanceArgs{\n\t\t\tVpcId:            fooVPC.ID(),\n\t\t\tSubnetId:         fooSubnet.ID(),\n\t\t\tAvailabilityZone: pulumi.String(defaultZone.Zones[0].Id),\n\t\t\tImageId:          pulumi.String(defaultImage.Images[0].Id),\n\t\t\tInstanceType:     pulumi.String(\"n-basic-1\"),\n\t\t\tChargeType:       pulumi.String(\"dynamic\"),\n\t\t\tTag:              pulumi.String(\"tf-acc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooNATGateway, err := vpc.NewNATGateway(ctx, \"fooNATGateway\", \u0026vpc.NATGatewayArgs{\n\t\t\tVpcId: fooVPC.ID(),\n\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\tfooSubnet.ID(),\n\t\t\t},\n\t\t\tEipId:           fooEIP.ID(),\n\t\t\tTag:             pulumi.String(\"tf-acc\"),\n\t\t\tEnableWhiteList: pulumi.Bool(false),\n\t\t\tSecurityGroup:   pulumi.String(fooSecurityGroup.SecurityGroups[0].Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewNATGatewayRule(ctx, \"fooNATGatewayRule\", \u0026vpc.NATGatewayRuleArgs{\n\t\t\tNatGatewayId: fooNATGateway.ID(),\n\t\t\tProtocol:     pulumi.String(\"tcp\"),\n\t\t\tSrcEipId:     fooEIP.ID(),\n\t\t\tSrcPortRange: pulumi.String(\"88\"),\n\t\t\tDstIp:        fooInstance.PrivateIp,\n\t\t\tDstPortRange: pulumi.String(\"80\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewNATGatewayRule(ctx, \"bar\", \u0026vpc.NATGatewayRuleArgs{\n\t\t\tNatGatewayId: fooNATGateway.ID(),\n\t\t\tProtocol:     pulumi.String(\"tcp\"),\n\t\t\tSrcEipId:     fooEIP.ID(),\n\t\t\tSrcPortRange: pulumi.String(\"90-100\"),\n\t\t\tDstIp:        fooInstance.PrivateIp,\n\t\t\tDstPortRange: pulumi.String(\"90-100\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "dstIp": {
                    "type": "string",
                    "description": "The private ip of instance bound to the jNAT gateway.\n"
                },
                "dstPortRange": {
                    "type": "string",
                    "description": "The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).\n"
                },
                "name": {
                    "type": "string"
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The ID of the Nat Gateway.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.\n"
                },
                "srcEipId": {
                    "type": "string",
                    "description": "The ID of eip associate to the Nat Gateway.\n"
                },
                "srcPortRange": {
                    "type": "string",
                    "description": "The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).\n"
                }
            },
            "required": [
                "dstIp",
                "dstPortRange",
                "name",
                "natGatewayId",
                "protocol",
                "srcEipId",
                "srcPortRange"
            ],
            "inputProperties": {
                "dstIp": {
                    "type": "string",
                    "description": "The private ip of instance bound to the jNAT gateway.\n"
                },
                "dstPortRange": {
                    "type": "string",
                    "description": "The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).\n"
                },
                "name": {
                    "type": "string"
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The ID of the Nat Gateway.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.\n"
                },
                "srcEipId": {
                    "type": "string",
                    "description": "The ID of eip associate to the Nat Gateway.\n"
                },
                "srcPortRange": {
                    "type": "string",
                    "description": "The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).\n"
                }
            },
            "requiredInputs": [
                "dstIp",
                "dstPortRange",
                "natGatewayId",
                "protocol",
                "srcEipId",
                "srcPortRange"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NATGatewayRule resources.\n",
                "properties": {
                    "dstIp": {
                        "type": "string",
                        "description": "The private ip of instance bound to the jNAT gateway.\n"
                    },
                    "dstPortRange": {
                        "type": "string",
                        "description": "The range of port numbers of the private ip, range: 1-65535. (eg: `port` or `port1-port2`).\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "natGatewayId": {
                        "type": "string",
                        "description": "The ID of the Nat Gateway.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol of the Nat Gateway Rule. Possible values: `tcp`, `udp`.\n"
                    },
                    "srcEipId": {
                        "type": "string",
                        "description": "The ID of eip associate to the Nat Gateway.\n"
                    },
                    "srcPortRange": {
                        "type": "string",
                        "description": "The range of port numbers of the eip, range: 1-65535. (eg: `port` or `port1-port2`).\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:vpc/subnet:Subnet": {
            "description": "Provides a Subnet resource under VPC resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst _default = new ucloud.vpc.VPC(\"default\", {\n    tag: \"tf-example\",\n    cidrBlocks: [\"192.168.0.0/16\"],\n});\nconst example = new ucloud.vpc.Subnet(\"example\", {\n    tag: \"tf-example\",\n    cidrBlock: \"192.168.1.0/24\",\n    vpcId: _default.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\ndefault = ucloud.vpc.VPC(\"default\",\n    tag=\"tf-example\",\n    cidr_blocks=[\"192.168.0.0/16\"])\nexample = ucloud.vpc.Subnet(\"example\",\n    tag=\"tf-example\",\n    cidr_block=\"192.168.1.0/24\",\n    vpc_id=default.id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = new Ucloud.Vpc.VPC(\"default\", new Ucloud.Vpc.VPCArgs\n        {\n            Tag = \"tf-example\",\n            CidrBlocks = \n            {\n                \"192.168.0.0/16\",\n            },\n        });\n        var example = new Ucloud.Vpc.Subnet(\"example\", new Ucloud.Vpc.SubnetArgs\n        {\n            Tag = \"tf-example\",\n            CidrBlock = \"192.168.1.0/24\",\n            VpcId = @default.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewVPC(ctx, \"_default\", \u0026vpc.VPCArgs{\n\t\t\tTag: pulumi.String(\"tf-example\"),\n\t\t\tCidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewSubnet(ctx, \"example\", \u0026vpc.SubnetArgs{\n\t\t\tTag:       pulumi.String(\"tf-example\"),\n\t\t\tCidrBlock: pulumi.String(\"192.168.1.0/24\"),\n\t\t\tVpcId:     _default.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSubnet can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:vpc/subnet:Subnet example subnet-abc123456\n```\n\n ",
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr block of the desired subnet, format in \"0.0.0.0/0\", such as: `192.168.0.0/24`.\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation of subnet, formatted in RFC3339 time string.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the subnet. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to subnet, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC that the desired subnet belongs to.\n"
                }
            },
            "required": [
                "cidrBlock",
                "createTime",
                "name",
                "remark",
                "vpcId"
            ],
            "inputProperties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr block of the desired subnet, format in \"0.0.0.0/0\", such as: `192.168.0.0/24`.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the subnet. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to subnet, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC that the desired subnet belongs to.\n"
                }
            },
            "requiredInputs": [
                "cidrBlock",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subnet resources.\n",
                "properties": {
                    "cidrBlock": {
                        "type": "string",
                        "description": "The cidr block of the desired subnet, format in \"0.0.0.0/0\", such as: `192.168.0.0/24`.\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation of subnet, formatted in RFC3339 time string.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the subnet. (Default: `\"\"`).\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to subnet, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the VPC that the desired subnet belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:vpc/vIP:VIP": {
            "description": "Provides a VIP resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst fooVPC = new ucloud.vpc.VPC(\"fooVPC\", {\n    tag: \"tf-acc\",\n    cidrBlocks: [\"192.168.0.0/16\"],\n});\nconst fooSubnet = new ucloud.vpc.Subnet(\"fooSubnet\", {\n    tag: \"tf-acc\",\n    cidrBlock: \"192.168.1.0/24\",\n    vpcId: fooVPC.id,\n});\nconst fooVIP = new ucloud.vpc.VIP(\"fooVIP\", {\n    vpcId: fooVPC.id,\n    subnetId: fooSubnet.id,\n    remark: \"test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nfoo_vpc = ucloud.vpc.VPC(\"fooVPC\",\n    tag=\"tf-acc\",\n    cidr_blocks=[\"192.168.0.0/16\"])\nfoo_subnet = ucloud.vpc.Subnet(\"fooSubnet\",\n    tag=\"tf-acc\",\n    cidr_block=\"192.168.1.0/24\",\n    vpc_id=foo_vpc.id)\nfoo_vip = ucloud.vpc.VIP(\"fooVIP\",\n    vpc_id=foo_vpc.id,\n    subnet_id=foo_subnet.id,\n    remark=\"test\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooVPC = new Ucloud.Vpc.VPC(\"fooVPC\", new Ucloud.Vpc.VPCArgs\n        {\n            Tag = \"tf-acc\",\n            CidrBlocks = \n            {\n                \"192.168.0.0/16\",\n            },\n        });\n        var fooSubnet = new Ucloud.Vpc.Subnet(\"fooSubnet\", new Ucloud.Vpc.SubnetArgs\n        {\n            Tag = \"tf-acc\",\n            CidrBlock = \"192.168.1.0/24\",\n            VpcId = fooVPC.Id,\n        });\n        var fooVIP = new Ucloud.Vpc.VIP(\"fooVIP\", new Ucloud.Vpc.VIPArgs\n        {\n            VpcId = fooVPC.Id,\n            SubnetId = fooSubnet.Id,\n            Remark = \"test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVPC, err := vpc.NewVPC(ctx, \"fooVPC\", \u0026vpc.VPCArgs{\n\t\t\tTag: pulumi.String(\"tf-acc\"),\n\t\t\tCidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooSubnet, err := vpc.NewSubnet(ctx, \"fooSubnet\", \u0026vpc.SubnetArgs{\n\t\t\tTag:       pulumi.String(\"tf-acc\"),\n\t\t\tCidrBlock: pulumi.String(\"192.168.1.0/24\"),\n\t\t\tVpcId:     fooVPC.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewVIP(ctx, \"fooVIP\", \u0026vpc.VIPArgs{\n\t\t\tVpcId:    fooVPC.ID(),\n\t\t\tSubnetId: fooSubnet.ID(),\n\t\t\tRemark:   pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for VIP, formatted in RFC3339 time string.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The ip address of the VIP.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the VIP. (Default: `\"\"`).\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet. If defined `vpc_id`, the `subnet_id` is Required.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VIP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the VIP.\n"
                }
            },
            "required": [
                "createTime",
                "ipAddress",
                "name",
                "remark",
                "subnetId",
                "vpcId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the VIP. (Default: `\"\"`).\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of subnet. If defined `vpc_id`, the `subnet_id` is Required.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VIP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC linked to the VIP.\n"
                }
            },
            "requiredInputs": [
                "subnetId",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VIP resources.\n",
                "properties": {
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation for VIP, formatted in RFC3339 time string.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The ip address of the VIP.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the VIP. (Default: `\"\"`).\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of subnet. If defined `vpc_id`, the `subnet_id` is Required.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VIP, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC linked to the VIP.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:vpc/vPC:VPC": {
            "description": "Provides a VPC resource.\n\n\u003e **Note**  The network segment can only be created or deleted, can not perform both of them at the same time.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = new ucloud.vpc.VPC(\"example\", {\n    // vpc network\n    cidrBlocks: [\"192.168.0.0/16\"],\n    tag: \"tf-example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.vpc.VPC(\"example\",\n    cidr_blocks=[\"192.168.0.0/16\"],\n    tag=\"tf-example\")\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Ucloud.Vpc.VPC(\"example\", new Ucloud.Vpc.VPCArgs\n        {\n            CidrBlocks = \n            {\n                \"192.168.0.0/16\",\n            },\n            Tag = \"tf-example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpc.NewVPC(ctx, \"example\", \u0026vpc.VPCArgs{\n\t\t\tCidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.0/16\"),\n\t\t\t},\n\t\t\tTag: pulumi.String(\"tf-example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVPC can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import ucloud:vpc/vPC:VPC example uvnet-abc123456\n```\n\n ",
            "properties": {
                "cidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CIDR blocks of VPC.\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "The time of creation for VPC, formatted in RFC3339 time string.\n"
                },
                "name": {
                    "type": "string"
                },
                "networkInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ucloud:vpc/VPCNetworkInfo:VPCNetworkInfo"
                    },
                    "description": "It is a nested type which documented below.\n"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the VPC. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The time whenever there is a change made to VPC, formatted in RFC3339 time string.\n"
                }
            },
            "required": [
                "cidrBlocks",
                "createTime",
                "name",
                "networkInfos",
                "remark",
                "updateTime"
            ],
            "inputProperties": {
                "cidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CIDR blocks of VPC.\n"
                },
                "name": {
                    "type": "string"
                },
                "remark": {
                    "type": "string",
                    "description": "The remarks of the VPC. (Default: `\"\"`).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                }
            },
            "requiredInputs": [
                "cidrBlocks"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VPC resources.\n",
                "properties": {
                    "cidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The CIDR blocks of VPC.\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "The time of creation for VPC, formatted in RFC3339 time string.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:vpc/VPCNetworkInfo:VPCNetworkInfo"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "remark": {
                        "type": "string",
                        "description": "The remarks of the VPC. (Default: `\"\"`).\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VPC, which contains at most 63 characters and only support Chinese, English, numbers, '-', '_', and '.'. If it is not filled in or a empty string is filled in, then default tag will be assigned. (Default: `Default`).\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The time whenever there is a change made to VPC, formatted in RFC3339 time string.\n"
                    }
                },
                "type": "object"
            }
        },
        "ucloud:vpc/vPCPeeringConnection:VPCPeeringConnection": {
            "description": "Provides an VPC Peering Connection for establishing a connection between multiple VPC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst foo = new ucloud.vpc.VPC(\"foo\", {\n    tag: \"tf-example\",\n    cidrBlocks: [\"192.168.0.0/16\"],\n});\nconst bar = new ucloud.vpc.VPC(\"bar\", {\n    tag: \"tf-example\",\n    cidrBlocks: [\"10.10.0.0/16\"],\n});\nconst connection = new ucloud.vpc.VPCPeeringConnection(\"connection\", {\n    vpcId: foo.id,\n    peerVpcId: bar.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nfoo = ucloud.vpc.VPC(\"foo\",\n    tag=\"tf-example\",\n    cidr_blocks=[\"192.168.0.0/16\"])\nbar = ucloud.vpc.VPC(\"bar\",\n    tag=\"tf-example\",\n    cidr_blocks=[\"10.10.0.0/16\"])\nconnection = ucloud.vpc.VPCPeeringConnection(\"connection\",\n    vpc_id=foo.id,\n    peer_vpc_id=bar.id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Ucloud.Vpc.VPC(\"foo\", new Ucloud.Vpc.VPCArgs\n        {\n            Tag = \"tf-example\",\n            CidrBlocks = \n            {\n                \"192.168.0.0/16\",\n            },\n        });\n        var bar = new Ucloud.Vpc.VPC(\"bar\", new Ucloud.Vpc.VPCArgs\n        {\n            Tag = \"tf-example\",\n            CidrBlocks = \n            {\n                \"10.10.0.0/16\",\n            },\n        });\n        var connection = new Ucloud.Vpc.VPCPeeringConnection(\"connection\", new Ucloud.Vpc.VPCPeeringConnectionArgs\n        {\n            VpcId = foo.Id,\n            PeerVpcId = bar.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := vpc.NewVPC(ctx, \"foo\", \u0026vpc.VPCArgs{\n\t\t\tTag: pulumi.String(\"tf-example\"),\n\t\t\tCidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := vpc.NewVPC(ctx, \"bar\", \u0026vpc.VPCArgs{\n\t\t\tTag: pulumi.String(\"tf-example\"),\n\t\t\tCidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.10.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpc.NewVPCPeeringConnection(ctx, \"connection\", \u0026vpc.VPCPeeringConnectionArgs{\n\t\t\tVpcId:     foo.ID(),\n\t\t\tPeerVpcId: bar.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "peerProjectId": {
                    "type": "string",
                    "description": "The ID of accepter project of the specific VPC Peering Connection to retrieve.\n"
                },
                "peerVpcId": {
                    "type": "string",
                    "description": "The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.\n"
                }
            },
            "required": [
                "peerProjectId",
                "peerVpcId",
                "vpcId"
            ],
            "inputProperties": {
                "peerProjectId": {
                    "type": "string",
                    "description": "The ID of accepter project of the specific VPC Peering Connection to retrieve.\n"
                },
                "peerVpcId": {
                    "type": "string",
                    "description": "The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.\n"
                }
            },
            "requiredInputs": [
                "peerVpcId",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VPCPeeringConnection resources.\n",
                "properties": {
                    "peerProjectId": {
                        "type": "string",
                        "description": "The ID of accepter project of the specific VPC Peering Connection to retrieve.\n"
                    },
                    "peerVpcId": {
                        "type": "string",
                        "description": "The short ID of accepter VPC of the specific VPC Peering Connection to retrieve.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The short of ID of the requester VPC of the specific VPC Peering Connection to retrieve.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "ucloud:ipsecvpn/getVPNConnection:getVPNConnection": {
            "description": "This data source providers a list of VPN Connection resources according to their ID, name and tag.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.ipsecvpn.getVPNConnection({});\nexport const first = example.then(example =\u003e example.vpnConnections[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.ipsecvpn.get_vpn_connection()\npulumi.export(\"first\", example.vpn_connections[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Ipsecvpn.GetVPNConnection.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.VpnConnections[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ipsecvpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ipsecvpn.LookupVPNConnection(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.VpnConnections[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVPNConnection.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPN Connection IDs, all the VPN Connections belongs to the defined region will be retrieved if this argument is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting VPN Connections by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VPN Connection.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVPNConnection.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to the VPN Connection.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of VPN Connections that satisfy the condition.\n"
                    },
                    "vpnConnections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:ipsecvpn/getVPNConnectionVpnConnection:getVPNConnectionVpnConnection"
                        },
                        "description": "It is a nested type. VPN Connections documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "totalCount",
                    "vpnConnections",
                    "id"
                ]
            }
        },
        "ucloud:ipsecvpn/getVPNCustomerGateway:getVPNCustomerGateway": {
            "description": "This data source providers a list of VPN Customer Gateway resources according to their ID, name and tag.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.ipsecvpn.getVPNCustomerGateway({});\nexport const first = example.then(example =\u003e example.vpnCustomerGateways[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.ipsecvpn.get_vpn_customer_gateway()\npulumi.export(\"first\", example.vpn_customer_gateways[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Ipsecvpn.GetVPNCustomerGateway.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.VpnCustomerGateways[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ipsecvpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ipsecvpn.LookupVPNCustomerGateway(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.VpnCustomerGateways[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVPNCustomerGateway.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPN Customer Gateway IDs, all the VPN Customer Gateways belongs to the defined region will be retrieved if this argument is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting VPN Customer Gateways by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VPN Customer Gateway.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVPNCustomerGateway.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to the VPN Customer Gateway.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of VPN Customer Gateways that satisfy the condition.\n"
                    },
                    "vpnCustomerGateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:ipsecvpn/getVPNCustomerGatewayVpnCustomerGateway:getVPNCustomerGatewayVpnCustomerGateway"
                        },
                        "description": "It is a nested type. VPN Customer Gateways documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "totalCount",
                    "vpnCustomerGateways",
                    "id"
                ]
            }
        },
        "ucloud:ipsecvpn/getVPNGateway:getVPNGateway": {
            "description": "This data source providers a list of VPN Gateway resources according to their ID, name, vpc and tag.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.ipsecvpn.getVPNGateway({});\nexport const first = example.then(example =\u003e example.vpnGateways[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.ipsecvpn.get_vpn_gateway()\npulumi.export(\"first\", example.vpn_gateways[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Ipsecvpn.GetVPNGateway.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.VpnGateways[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ipsecvpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ipsecvpn.LookupVPNGateway(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.VpnGateways[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVPNGateway.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPN Gateway IDs, all the VPN Gateways belongs to the defined region will be retrieved if this argument is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting VPN Gateways by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VPN Gateway.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC linked to the VPN Gateway.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVPNGateway.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to the VPN Gateway.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of VPN Gateways that satisfy the condition.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC linked to the VPN Gateway.\n"
                    },
                    "vpnGateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:ipsecvpn/getVPNGatewayVpnGateway:getVPNGatewayVpnGateway"
                        },
                        "description": "It is a nested type. VPN Gateways documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "totalCount",
                    "vpnGateways",
                    "id"
                ]
            }
        },
        "ucloud:uaccount/getProject:getProject": {
            "description": "This data source providers a list of projects owned by user according to finance permission and name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.uaccount.getProject({\n    isFinance: false,\n});\nexport const first = example.then(example =\u003e example.projects[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.uaccount.get_project(is_finance=False)\npulumi.export(\"first\", example.projects[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Uaccount.GetProject.InvokeAsync(new Ucloud.Uaccount.GetProjectArgs\n        {\n            IsFinance = false,\n        }));\n        this.First = example.Apply(example =\u003e example.Projects[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := false\n\t\texample, err := uaccount.GetProject(ctx, \u0026uaccount.GetProjectArgs{\n\t\t\tIsFinance: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.Projects[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "isFinance": {
                        "type": "boolean",
                        "description": "To identify if the current account is granted with financial permission.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting projects by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isFinance": {
                        "type": "boolean"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:uaccount/getProjectProject:getProjectProject"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of projects that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:uaccount/getZone:getZone": {
            "description": "This data source provides a list of available zones in the current region.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.uaccount.getZone({});\nexport const first = example.then(example =\u003e example.zones[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.uaccount.get_zone()\npulumi.export(\"first\", example.zones[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Uaccount.GetZone.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.Zones[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uaccount\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := uaccount.GetZone(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.Zones[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZone.\n",
                "properties": {
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZone.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of zones that satisfy the condition.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:uaccount/getZoneZone:getZoneZone"
                        },
                        "description": "It is a nested type which documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "zones",
                    "id"
                ]
            }
        },
        "ucloud:udb/getDBInstance:getDBInstance": {
            "description": "This data source provides a list of database instance resources according to their database instance ID and name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.udb.getDBInstance({});\nexport const first = example.then(example =\u003e example.dbInstances[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.udb.get_db_instance()\npulumi.export(\"first\", example.db_instances[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Udb.GetDBInstance.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.DbInstances[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/udb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := udb.LookupDBInstance(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.DbInstances[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDBInstance.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where database instances are located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of database instance IDs, all the database instances belong to this region will be retrieved if the ID is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting database instances by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDBInstance.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where database instance is located.\n"
                    },
                    "dbInstances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:udb/getDBInstanceDbInstance:getDBInstanceDbInstance"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of database instances that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dbInstances",
                    "ids",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:udisk/getDisk:getDisk": {
            "description": "This data source provides a list of Disk resources according to their Disk ID and disk type.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.udisk.getDisk({});\nexport const first = example.then(example =\u003e example.disks[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.udisk.get_disk()\npulumi.export(\"first\", example.disks[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Udisk.GetDisk.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.Disks[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/udisk\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := udisk.LookupDisk(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.Disks[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDisk.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where Disk are located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                    },
                    "diskType": {
                        "type": "string",
                        "description": "The type of disk. Possible values are: `data_disk`as cloud disk, `ssd_data_disk` as SSD cloud disk, `system_disk`as system disk, `ssd_system_disk` as SSD system disk, `rssd_data_disk` as RDMA-SSD cloud disk.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Disk IDs, all the Disks belong to this region will be retrieved if the ID is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting disks by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDisk.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where disk is located.\n"
                    },
                    "diskType": {
                        "type": "string",
                        "description": "The type of disk.\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:udisk/getDiskDisk:getDiskDisk"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of Disks that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "disks",
                    "ids",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:uhost/getImage:getImage": {
            "description": "This data source providers a list of available image resources according to their availability zone, image ID and other fields.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.uhost.getImage({\n    availabilityZone: \"cn-bj2-02\",\n    imageType: \"base\",\n    nameRegex: \"^CentOS 7.[1-2] 64\",\n    mostRecent: true,\n});\nexport const first = example.then(example =\u003e example.images[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.uhost.get_image(availability_zone=\"cn-bj2-02\",\n    image_type=\"base\",\n    name_regex=\"^CentOS 7.[1-2] 64\",\n    most_recent=True)\npulumi.export(\"first\", example.images[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Uhost.GetImage.InvokeAsync(new Ucloud.Uhost.GetImageArgs\n        {\n            AvailabilityZone = \"cn-bj2-02\",\n            ImageType = \"base\",\n            NameRegex = \"^CentOS 7.[1-2] 64\",\n            MostRecent = true,\n        }));\n        this.First = example.Apply(example =\u003e example.Images[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"cn-bj2-02\"\n\t\topt1 := \"base\"\n\t\topt2 := \"^CentOS 7.[1-2] 64\"\n\t\topt3 := true\n\t\texample, err := uhost.GetImage(ctx, \u0026uhost.GetImageArgs{\n\t\t\tAvailabilityZone: \u0026opt0,\n\t\t\tImageType:        \u0026opt1,\n\t\t\tNameRegex:        \u0026opt2,\n\t\t\tMostRecent:       \u0026opt3,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.Images[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where images are located. such as: `cn-bj2-02`. You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist).\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of image IDs, all the images belong to this region will be retrieved if the ID is `[]`. \n\u003e **Note** this argument conflicts with `image_id`.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The ID of image.\n\u003e **Note** this argument conflicts with `ids`.\n"
                    },
                    "imageType": {
                        "type": "string",
                        "description": "The type of image. Possible values are: `base` as standard image, `business` as owned by market place, and `custom` as custom-image, all the image types will be retrieved by default.\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "If more than one result is returned, use the most recent image.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting images by name. (Such as: `^CentOS 7.[1-2] 64` means CentOS 7.1 of 64-bit operating system or CentOS 7.2 of 64-bit operating system, \"^Ubuntu 16.04 64\" means Ubuntu 16.04 of 64-bit operating system).\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "The type of OS. Possible values are: `linux` and `windows`, all the OS types will be retrieved by default.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where image is located.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "imageType": {
                        "type": "string"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:uhost/getImageImage:getImageImage"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "osType": {
                        "type": "string",
                        "description": "The type of OS.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of images that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "images",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:uhost/getInstance:getInstance": {
            "description": "This data source providers a list of UHost instance resources according to their availability zone, instance ID and tag.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.uhost.getInstance({\n    availabilityZone: \"cn-bj2-02\",\n});\nexport const first = example.then(example =\u003e example.instances[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.uhost.get_instance(availability_zone=\"cn-bj2-02\")\npulumi.export(\"first\", example.instances[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Uhost.GetInstance.InvokeAsync(new Ucloud.Uhost.GetInstanceArgs\n        {\n            AvailabilityZone = \"cn-bj2-02\",\n        }));\n        this.First = example.Apply(example =\u003e example.Instances[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/uhost\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"cn-bj2-02\"\n\t\texample, err := uhost.LookupInstance(ctx, \u0026uhost.LookupInstanceArgs{\n\t\t\tAvailabilityZone: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.Instances[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstance.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where instances are located. Such as: \"cn-bj2-02\". You may refer to [list of availability zone](https://docs.ucloud.cn/api/summary/regionlist)\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of instance IDs, all the instances belongs to the defined region will be retrieved if this argument is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting instances by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to instance.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstance.\n",
                "properties": {
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone where instances are located.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:uhost/getInstanceInstance:getInstanceInstance"
                        },
                        "description": "It is a nested type. instances documented below.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to the instance.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of instances that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "instances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:ulb/getLB:getLB": {
            "description": "This data source provides a list of Load Balancer resources according to their Load Balancer ID, VPC ID and Subnet ID.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.ulb.getLB({});\nexport const first = example.then(example =\u003e example.lbs[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.ulb.get_lb()\npulumi.export(\"first\", example.lbs[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Ulb.GetLB.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.Lbs[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ulb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ulb.LookupLB(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.Lbs[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLB.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Load Balancer IDs, all the LBs belong to this region will be retrieved if the ID is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting lbs by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of subnet that intrant load balancer belongs to.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of the VPC linked to the Load Balancers.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLB.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lbs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:ulb/getLBLb:getLBLb"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "(Optional) The ID of subnet that intrant load balancer belongs to.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of Load Balancers that satisfy the condition.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of the VPC linked to the Load Balancers.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "lbs",
                    "subnetId",
                    "totalCount",
                    "vpcId",
                    "id"
                ]
            }
        },
        "ucloud:ulb/getLBAttachment:getLBAttachment": {
            "description": "This data source provides a list of Load Balancer Attachment resources according to their Load Balancer Attachment ID.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.ulb.getLBAttachment({\n    loadBalancerId: \"ulb-xxx\",\n    listenerId: \"vserver-xxx\",\n});\nexport const first = example.then(example =\u003e example.lbAttachments[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.ulb.get_lb_attachment(load_balancer_id=\"ulb-xxx\",\n    listener_id=\"vserver-xxx\")\npulumi.export(\"first\", example.lb_attachments[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Ulb.GetLBAttachment.InvokeAsync(new Ucloud.Ulb.GetLBAttachmentArgs\n        {\n            LoadBalancerId = \"ulb-xxx\",\n            ListenerId = \"vserver-xxx\",\n        }));\n        this.First = example.Apply(example =\u003e example.LbAttachments[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ulb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ulb.LookupLBAttachment(ctx, \u0026ulb.LookupLBAttachmentArgs{\n\t\t\tLoadBalancerId: \"ulb-xxx\",\n\t\t\tListenerId:     \"vserver-xxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.LbAttachments[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLBAttachment.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of LB Attachment IDs, all the LB Attachments belong to the Load Balancer listener will be retrieved if the ID is `[]`.\n"
                    },
                    "listenerId": {
                        "type": "string",
                        "description": "The ID of a listener server.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The ID of a load balancer.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "listenerId",
                    "loadBalancerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLBAttachment.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lbAttachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:ulb/getLBAttachmentLbAttachment:getLBAttachmentLbAttachment"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "listenerId": {
                        "type": "string"
                    },
                    "loadBalancerId": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of LB Attachments that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "lbAttachments",
                    "listenerId",
                    "loadBalancerId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:ulb/getLBListeners:getLBListeners": {
            "description": "This data source provides a list of Load Balancer Listener resources according to their Load Balancer Listener ID.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.ulb.getLBListeners({\n    loadBalancerId: \"ulb-xxx\",\n});\nexport const first = example.then(example =\u003e example.lbListeners[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.ulb.get_lb_listeners(load_balancer_id=\"ulb-xxx\")\npulumi.export(\"first\", example.lb_listeners[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Ulb.GetLBListeners.InvokeAsync(new Ucloud.Ulb.GetLBListenersArgs\n        {\n            LoadBalancerId = \"ulb-xxx\",\n        }));\n        this.First = example.Apply(example =\u003e example.LbListeners[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ulb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ulb.GetLBListeners(ctx, \u0026ulb.GetLBListenersArgs{\n\t\t\tLoadBalancerId: \"ulb-xxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.LbListeners[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLBListeners.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of LB Listener IDs, all the LB Listeners belong to this region will be retrieved if the ID is `[]`.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The ID of a load balancer.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting lb listeners by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "loadBalancerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLBListeners.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lbListeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:ulb/getLBListenersLbListener:getLBListenersLbListener"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "loadBalancerId": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of LB listeners that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "lbListeners",
                    "loadBalancerId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:ulb/getLBRules:getLBRules": {
            "description": "This data source provides a list of Load Balancer Rule resources according to their Load Balancer Rule ID.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.ulb.getLBRules({\n    loadBalancerId: \"ulb-xxx\",\n    listenerId: \"vserver-xxx\",\n});\nexport const first = example.then(example =\u003e example.lbRules[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.ulb.get_lb_rules(load_balancer_id=\"ulb-xxx\",\n    listener_id=\"vserver-xxx\")\npulumi.export(\"first\", example.lb_rules[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Ulb.GetLBRules.InvokeAsync(new Ucloud.Ulb.GetLBRulesArgs\n        {\n            LoadBalancerId = \"ulb-xxx\",\n            ListenerId = \"vserver-xxx\",\n        }));\n        this.First = example.Apply(example =\u003e example.LbRules[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ulb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ulb.GetLBRules(ctx, \u0026ulb.GetLBRulesArgs{\n\t\t\tLoadBalancerId: \"ulb-xxx\",\n\t\t\tListenerId:     \"vserver-xxx\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.LbRules[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLBRules.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of LB Rule IDs, all the LB Rules belong to the Load Balancer listener will be retrieved if the ID is `[]`.\n"
                    },
                    "listenerId": {
                        "type": "string",
                        "description": "The ID of a listener server.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The ID of a load balancer.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "listenerId",
                    "loadBalancerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLBRules.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lbRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:ulb/getLBRulesLbRule:getLBRulesLbRule"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "listenerId": {
                        "type": "string"
                    },
                    "loadBalancerId": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of LB Rules that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "lbRules",
                    "listenerId",
                    "loadBalancerId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:ulb/getLBSsl:getLBSsl": {
            "description": "This data source provides a list of Load Balancer SSL certificate resources according to their Load Balancer SSL certificate resource ID and name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.ulb.getLBSsl({});\nexport const first = example.then(example =\u003e example.lbSsls[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.ulb.get_lbssl()\npulumi.export(\"first\", example.lb_ssls[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Ulb.GetLBSsl.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.LbSsls[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/ulb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ulb.LookupLBSsl(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.LbSsls[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLBSsl.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of LB SSL certificate resource IDs, all the LB SSL certificate resources in the current region will be retrieved if the ID is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting LB SSL by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLBSsl.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lbSsls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:ulb/getLBSslLbSsl:getLBSslLbSsl"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of LB SSL certificate resources that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "lbSsls",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:unet/getEIP:getEIP": {
            "description": "This data source provides a list of EIP resources (Elastic IP address) according to their EIP ID.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.unet.getEIP({});\nexport const first = example.then(example =\u003e example.eips[0].ipSets[0].ip);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.unet.get_eip()\npulumi.export(\"first\", example.eips[0].ip_sets[0].ip)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Unet.GetEIP.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.Eips[0].IpSets[0].Ip);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := unet.LookupEIP(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.Eips[0].IpSets[0].Ip)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEIP.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Elastic IP IDs, all the EIPs belong to this region will be retrieved if the ID is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting eips by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEIP.\n",
                "properties": {
                    "eips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:unet/getEIPEip:getEIPEip"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of Elastic IPs that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "eips",
                    "ids",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:unet/getSecurityGroup:getSecurityGroup": {
            "description": "This data source provides a list of Security Group resources according to their Security Group ID, name and resource id.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.unet.getSecurityGroup({});\nexport const first = example.then(example =\u003e example.securityGroups[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.unet.get_security_group()\npulumi.export(\"first\", example.security_groups[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Unet.GetSecurityGroup.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.SecurityGroups[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/unet\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := unet.LookupSecurityGroup(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.SecurityGroups[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecurityGroup.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Security Group IDs, all the Security Group resources belong to this region will be retrieved if the ID is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting Security Group resources by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Security Group. Possible values are: `recommend_web` as the default Web security group that UCloud recommend to users, default opened port include 80, 443, 22, 3389, `recommend_non_web` as the default non Web security group that UCloud recommend to users, default opened port include 22, 3389, `user_defined` as the security groups defined by users. You may refer to [security group](https://docs.ucloud.cn/network/firewall/firewall.html).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecurityGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "securityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:unet/getSecurityGroupSecurityGroup:getSecurityGroupSecurityGroup"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of Security Group resources that satisfy the condition.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Security Group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "securityGroups",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:vpc/getNATGateway:getNATGateway": {
            "description": "This data source providers a list of Nat Gateway resources according to their ID and name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.vpc.getNATGateway({});\nexport const first = example.then(example =\u003e example.natGateways[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.vpc.get_nat_gateway()\npulumi.export(\"first\", example.nat_gateways[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Vpc.GetNATGateway.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.NatGateways[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vpc.LookupNATGateway(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.NatGateways[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNATGateway.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Nat Gateway IDs, all the Nat Gateways belongs to the defined region will be retrieved if this argument is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting Nat Gateways by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNATGateway.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "natGateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:vpc/getNATGatewayNatGateway:getNATGatewayNatGateway"
                        },
                        "description": "It is a nested type. Nat Gateways documented below.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of Nat Gateways that satisfy the condition.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "natGateways",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:vpc/getSubnet:getSubnet": {
            "description": "This data source provides a list of Subnet resources according to their Subnet ID, name and the VPC they belong to.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.vpc.getSubnet({\n    vpcId: \"uvnet-xxx\",\n});\nexport const first = example.then(example =\u003e example.subnets[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.vpc.get_subnet(vpc_id=\"uvnet-xxx\")\npulumi.export(\"first\", example.subnets[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Vpc.GetSubnet.InvokeAsync(new Ucloud.Vpc.GetSubnetArgs\n        {\n            VpcId = \"uvnet-xxx\",\n        }));\n        this.First = example.Apply(example =\u003e example.Subnets[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"uvnet-xxx\"\n\t\texample, err := vpc.LookupSubnet(ctx, \u0026vpc.LookupSubnetArgs{\n\t\t\tVpcId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.Subnets[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSubnet.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Subnet IDs, all the Subnet resources belong to this region will be retrieved if the ID is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting Subnet resources by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to Subnet.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the VPC that the desired Subnet belongs to.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSubnet.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:vpc/getSubnetSubnet:getSubnetSubnet"
                        },
                        "description": "It is a nested type which documented below.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to Subnet.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of Subnet resources that satisfy the condition.\n"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "subnets",
                    "totalCount",
                    "id"
                ]
            }
        },
        "ucloud:vpc/getVPC:getVPC": {
            "description": "This data source provides a list of VPC resources according to their VPC ID, name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ucloud from \"@pulumi/ucloud\";\n\nconst example = ucloud.vpc.getVPC({});\nexport const first = example.then(example =\u003e example.vpcs[0].id);\n```\n```python\nimport pulumi\nimport pulumi_ucloud as ucloud\n\nexample = ucloud.vpc.get_vpc()\npulumi.export(\"first\", example.vpcs[0].id)\n```\n```csharp\nusing Pulumi;\nusing Ucloud = Pulumi.Ucloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ucloud.Vpc.GetVPC.InvokeAsync());\n        this.First = example.Apply(example =\u003e example.Vpcs[0].Id);\n    }\n\n    [Output(\"first\")]\n    public Output\u003cstring\u003e First { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ucloud/sdk/go/ucloud/vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := vpc.LookupVPC(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"first\", example.Vpcs[0].Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVPC.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPC IDs, all the VPC resources belong to this region will be retrieved if the ID is `[]`.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A regex string to filter resulting VPC resources by name.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VPC.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVPC.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "A tag assigned to VPC.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of VPC resources that satisfy the condition.\n"
                    },
                    "vpcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ucloud:vpc/getVPCVpc:getVPCVpc"
                        },
                        "description": "It is a nested type which documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "totalCount",
                    "vpcs",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-ucloud/sdk/go/ucloud"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing ucloud cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-ucloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-ucloud` repo](https://github.com/pulumi/pulumi-ucloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-ucloud` repo](https://github.com/terraform-providers/terraform-provider-ucloud/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-ucloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-ucloud` repo](https://github.com/pulumi/pulumi-ucloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-ucloud` repo](https://github.com/terraform-providers/terraform-provider-ucloud/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}